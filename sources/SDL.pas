{==============================================================================
   _____  _____   __
  / ____||  __ \ | |
 | (___  | |  | || |
  \___ \ | |  | || |
  ____) || |__| || |____
 |_____/ |_____/ |______|
 Simple DirectMedia Layer
       for Delphi

 Includes:
   SDL
   SDL_image
   SDL_mixer
   SDL_net
   SDL_ttf

Delphi Header Conversion

Copyright © 2022 tinyBigGAMES™ LLC
All Rights Reserved.

Website: https://tinybiggames.com
Email  : support@tinybiggames.com

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. The origin of this software must not be misrepresented; you must not
   claim that you wrote the original software. If you use this software in
   a product, an acknowledgment in the product documentation would be
   appreciated but is not required.

2. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

3. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

4. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived
   from this software without specific prior written permission.

5. All video, audio, graphics and other content accessed through the
   software in this distro is the property of the applicable content owner
   and may be protected by applicable copyright law. This License gives
   Customer no rights to such content, and Company disclaims any liability
   for misuse of content.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
============================================================================= }

{$IFNDEF WIN64}
  {$MESSAGE Error 'Unsupported platform'}
{$ENDIF}

{$Z4}
{$A8}
{$WARN SYMBOL_PLATFORM OFF}

unit SDL;

interface

const
  SIZEOF_VOIDP = 8;
  
  WINAPI_FAMILY_DESKTOP_APP = 100;
  WINAPI_FAMILY = WINAPI_FAMILY_DESKTOP_APP;
  WINAPI_PARTITION_DESKTOP = (WINAPI_FAMILY=WINAPI_FAMILY_DESKTOP_APP);
  
  HAVE_WINAPIFAMILY_H = 1;
  HAVE_WINSDKVER_H = 1;
  HAVE_STDINT_H = 1;
  HAVE_GCC_ATOMICS = 1;
  HAVE_DDRAW_H = 1;
  HAVE_DINPUT_H = 1;
  HAVE_DSOUND_H = 1;
  HAVE_DXGI_H = 1;
  HAVE_XINPUT_H = 1;
  HAVE_WINDOWS_GAMING_INPUT_H = 1;
  HAVE_D3D11_H = 1;
  HAVE_ROAPI_H = 1;
  HAVE_MMDEVICEAPI_H = 1;
  HAVE_AUDIOCLIENT_H = 1;
  HAVE_TPCSHRD_H = 1;
  HAVE_SENSORSAPI_H = 1;
  HAVE_IMMINTRIN_H = 1;
  HAVE_STDARG_H = 1;
  HAVE_STDDEF_H = 1;

  SDL_AUDIO_DRIVER_WASAPI = 1;
  SDL_AUDIO_DRIVER_DSOUND = 1;
  SDL_AUDIO_DRIVER_WINMM = 1;
  SDL_AUDIO_DRIVER_DISK = 1;
  SDL_AUDIO_DRIVER_DUMMY = 1;

  SDL_JOYSTICK_DINPUT = 1;
  SDL_JOYSTICK_HIDAPI = 1;
  SDL_JOYSTICK_RAWINPUT = 1;
  SDL_JOYSTICK_VIRTUAL = 1;
  SDL_JOYSTICK_WGI = 1;
  SDL_JOYSTICK_XINPUT = 1;

  SDL_HAPTIC_DINPUT = 1;
  SDL_HAPTIC_XINPUT = 1;

  SDL_SENSOR_WINDOWS = 1;

  SDL_LOADSO_WINDOWS = 1;

  SDL_THREAD_GENERIC_COND_SUFFIX = 1;
  SDL_THREAD_WINDOWS = 1;

  SDL_TIMER_WINDOWS = 1;

  SDL_VIDEO_DRIVER_DUMMY = 1;
  SDL_VIDEO_DRIVER_WINDOWS = 1;
  SDL_VIDEO_RENDER_D3D = 1;
  SDL_VIDEO_RENDER_D3D11 = 1;
  SDL_VIDEO_OPENGL = 1;
  SDL_VIDEO_OPENGL_WGL = 1;
  SDL_VIDEO_RENDER_OGL = 1;
  SDL_VIDEO_RENDER_OGL_ES2 = 1;
  SDL_VIDEO_OPENGL_ES2 = 1;
  SDL_VIDEO_OPENGL_EGL = 1;
  SDL_VIDEO_VULKAN = 1;

  SDL_POWER_WINDOWS = 1;

  SDL_FILESYSTEM_WINDOWS = 1;

  SDL_MAX_SINT8 = $7F;
  SDL_MIN_SINT8 = (not $7F);
  SDL_MAX_UINT8 = $FF;
  SDL_MIN_UINT8 = $00;
  SDL_MAX_SINT16 = $7FFF;
  SDL_MIN_SINT16 = (not $7FFF);
  SDL_MAX_UINT16 = $FFFF;
  SDL_MIN_UINT16 = $0000;
  SDL_MAX_SINT32 = $7FFFFFFF;
  SDL_MIN_SINT32 = (not $7FFFFFFF);
  SDL_MAX_UINT32 = $FFFFFFFF;
  SDL_MIN_UINT32 = $00000000;
  SDL_MAX_SINT64 = $7FFFFFFFFFFFFFFF;
  SDL_MIN_SINT64 = (not $7FFFFFFFFFFFFFFF);
  SDL_MAX_UINT64 = $FFFFFFFFFFFFFFFF;
  SDL_MIN_UINT64 = $0000000000000000;
  SDL_FLT_EPSILON = 1.1920928955078125e-07;
  M_PI = 3.14159265358979323846264338327950288;

  SDL_ASSERT_LEVEL = 1;

  SDL_LIL_ENDIAN = 1234;
  SDL_BIG_ENDIAN = 4321;
  SDL_BYTEORDER = SDL_LIL_ENDIAN;

  SDL_MUTEX_TIMEDOUT = 1;
  SDL_MUTEX_MAXWAIT = (not 0);

  SDL_RWOPS_UNKNOWN = 0;
  SDL_RWOPS_WINFILE = 1;
  SDL_RWOPS_STDFILE = 2;
  SDL_RWOPS_JNIFILE = 3;
  SDL_RWOPS_MEMORY = 4;
  SDL_RWOPS_MEMORY_RO = 5;

  RW_SEEK_SET = 0;
  RW_SEEK_CUR = 1;
  RW_SEEK_END = 2;

  SDL_AUDIO_MASK_BITSIZE = ($FF);
  SDL_AUDIO_MASK_DATATYPE = (1 shl 8);
  SDL_AUDIO_MASK_ENDIAN = (1 shl 12);
  SDL_AUDIO_MASK_SIGNED = (1 shl 15);

  AUDIO_U8 = $0008;
  AUDIO_S8 = $8008;
  AUDIO_U16LSB = $0010;
  AUDIO_S16LSB = $8010;
  AUDIO_U16MSB = $1010;
  AUDIO_S16MSB = $9010;
  AUDIO_U16 = AUDIO_U16LSB;
  AUDIO_S16 = AUDIO_S16LSB;
  AUDIO_S32LSB = $8020;
  AUDIO_S32MSB = $9020;
  AUDIO_S32 = AUDIO_S32LSB;
  AUDIO_F32LSB = $8120;
  AUDIO_F32MSB = $9120;
  AUDIO_F32 = AUDIO_F32LSB;
  AUDIO_U16SYS = AUDIO_U16LSB;
  AUDIO_S16SYS = AUDIO_S16LSB;
  AUDIO_S32SYS = AUDIO_S32LSB;
  AUDIO_F32SYS = AUDIO_F32LSB;

  SDL_AUDIO_ALLOW_FREQUENCY_CHANGE = $00000001;
  SDL_AUDIO_ALLOW_FORMAT_CHANGE = $00000002;
  SDL_AUDIO_ALLOW_CHANNELS_CHANGE = $00000004;
  SDL_AUDIO_ALLOW_SAMPLES_CHANGE = $00000008;
  SDL_AUDIO_ALLOW_ANY_CHANGE = (SDL_AUDIO_ALLOW_FREQUENCY_CHANGE or
                                SDL_AUDIO_ALLOW_FORMAT_CHANGE or
                                SDL_AUDIO_ALLOW_CHANNELS_CHANGE or
                                SDL_AUDIO_ALLOW_SAMPLES_CHANGE);

  SDL_AUDIOCVT_MAX_FILTERS = 9;

  SDL_MIX_MAXVOLUME = 128;

  SDL_CACHELINE_SIZE = 128;

  SDL_ALPHA_OPAQUE = 255;
  SDL_ALPHA_TRANSPARENT = 0;

  SDL_SWSURFACE = 0;

  SDL_PREALLOC = $00000001;
  SDL_RLEACCEL = $00000002;
  SDL_DONTFREE = $00000004;

  SDL_SIMD_ALIGNED = $00000008;

  SDL_WINDOWPOS_UNDEFINED_MASK = $1FFF0000;
  SDL_WINDOWPOS_UNDEFINED = SDL_WINDOWPOS_UNDEFINED_MASK or 0;
  SDL_WINDOWPOS_CENTERED_MASK = $2FFF0000;

  SDLK_SCANCODE_MASK = (1 shl 30);

  SDL_BUTTON_LEFT = 1;
  SDL_BUTTON_MIDDLE = 2;
  SDL_BUTTON_RIGHT = 3;
  SDL_BUTTON_X1 = 4;
  SDL_BUTTON_X2 = 5;

  SDL_IPHONE_MAX_GFORCE = 5.0;

  SDL_JOYSTICK_AXIS_MAX = 32767;
  SDL_JOYSTICK_AXIS_MIN = -32768;

  SDL_HAT_CENTERED = $00;
  SDL_HAT_UP = $01;
  SDL_HAT_RIGHT = $02;
  SDL_HAT_DOWN = $04;
  SDL_HAT_LEFT = $08;
  SDL_HAT_RIGHTUP = (SDL_HAT_RIGHT or SDL_HAT_UP);
  SDL_HAT_RIGHTDOWN = (SDL_HAT_RIGHT or SDL_HAT_DOWN);
  SDL_HAT_LEFTUP = (SDL_HAT_LEFT or SDL_HAT_UP);
  SDL_HAT_LEFTDOWN = (SDL_HAT_LEFT or SDL_HAT_DOWN);

  SDL_STANDARD_GRAVITY = 9.80665;

  SDL_TOUCH_MOUSEID = -1;
  SDL_MOUSE_TOUCHID = -1;

  SDL_RELEASED = 0;
  SDL_PRESSED = 1;

  SDL_TEXTEDITINGEVENT_TEXT_SIZE = (32);
  SDL_TEXTINPUTEVENT_TEXT_SIZE = (32);

  SDL_QUERY = -1;
  SDL_IGNORE = 0;

  SDL_DISABLE = 0;
  SDL_ENABLE = 1;

  SDL_HAPTIC_CONSTANT = (1 shl 0);
  SDL_HAPTIC_SINE = (1 shl 1);
  SDL_HAPTIC_LEFTRIGHT = (1 shl 2);
  SDL_HAPTIC_TRIANGLE = (1 shl 3);
  SDL_HAPTIC_SAWTOOTHUP = (1 shl 4);
  SDL_HAPTIC_SAWTOOTHDOWN = (1 shl 5);
  SDL_HAPTIC_RAMP = (1 shl 6);
  SDL_HAPTIC_SPRING = (1 shl 7);
  SDL_HAPTIC_DAMPER = (1 shl 8);
  SDL_HAPTIC_INERTIA = (1 shl 9);
  SDL_HAPTIC_FRICTION = (1 shl 10);
  SDL_HAPTIC_CUSTOM = (1 shl 11);
  SDL_HAPTIC_GAIN = (1 shl 12);
  SDL_HAPTIC_AUTOCENTER = (1 shl 13);
  SDL_HAPTIC_STATUS = (1 shl 14);
  SDL_HAPTIC_PAUSE = (1 shl 15);
  SDL_HAPTIC_POLAR = 0;
  SDL_HAPTIC_CARTESIAN = 1;
  SDL_HAPTIC_SPHERICAL = 2;
  SDL_HAPTIC_STEERING_AXIS = 3;
  SDL_HAPTIC_INFINITY = 4294967295;

  SDL_HINT_ACCELEROMETER_AS_JOYSTICK = 'SDL_ACCELEROMETER_AS_JOYSTICK';
  SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED = 'SDL_ALLOW_ALT_TAB_WHILE_GRABBED';
  SDL_HINT_ALLOW_TOPMOST = 'SDL_ALLOW_TOPMOST';
  SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION = 'SDL_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION';
  SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION = 'SDL_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION';
  SDL_HINT_ANDROID_BLOCK_ON_PAUSE = 'SDL_ANDROID_BLOCK_ON_PAUSE';
  SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO = 'SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO';
  SDL_HINT_ANDROID_TRAP_BACK_BUTTON = 'SDL_ANDROID_TRAP_BACK_BUTTON';
  SDL_HINT_APP_NAME = 'SDL_APP_NAME';
  SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS = 'SDL_APPLE_TV_CONTROLLER_UI_EVENTS';
  SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION = 'SDL_APPLE_TV_REMOTE_ALLOW_ROTATION';
  SDL_HINT_AUDIO_CATEGORY = 'SDL_AUDIO_CATEGORY';
  SDL_HINT_AUDIO_DEVICE_APP_NAME = 'SDL_AUDIO_DEVICE_APP_NAME';
  SDL_HINT_AUDIO_DEVICE_STREAM_NAME = 'SDL_AUDIO_DEVICE_STREAM_NAME';
  SDL_HINT_AUDIO_DEVICE_STREAM_ROLE = 'SDL_AUDIO_DEVICE_STREAM_ROLE';
  SDL_HINT_AUDIO_RESAMPLING_MODE = 'SDL_AUDIO_RESAMPLING_MODE';
  SDL_HINT_AUTO_UPDATE_JOYSTICKS = 'SDL_AUTO_UPDATE_JOYSTICKS';
  SDL_HINT_AUTO_UPDATE_SENSORS = 'SDL_AUTO_UPDATE_SENSORS';
  SDL_HINT_BMP_SAVE_LEGACY_FORMAT = 'SDL_BMP_SAVE_LEGACY_FORMAT';
  SDL_HINT_DISPLAY_USABLE_BOUNDS = 'SDL_DISPLAY_USABLE_BOUNDS';
  SDL_HINT_EMSCRIPTEN_ASYNCIFY = 'SDL_EMSCRIPTEN_ASYNCIFY';
  SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT = 'SDL_EMSCRIPTEN_KEYBOARD_ELEMENT';
  SDL_HINT_ENABLE_STEAM_CONTROLLERS = 'SDL_ENABLE_STEAM_CONTROLLERS';
  SDL_HINT_EVENT_LOGGING = 'SDL_EVENT_LOGGING';
  SDL_HINT_FORCE_RAISEWINDOW = 'SDL_HINT_FORCE_RAISEWINDOW';
  SDL_HINT_FRAMEBUFFER_ACCELERATION = 'SDL_FRAMEBUFFER_ACCELERATION';
  SDL_HINT_GAMECONTROLLERCONFIG = 'SDL_GAMECONTROLLERCONFIG';
  SDL_HINT_GAMECONTROLLERCONFIG_FILE = 'SDL_GAMECONTROLLERCONFIG_FILE';
  SDL_HINT_GAMECONTROLLERTYPE = 'SDL_GAMECONTROLLERTYPE';
  SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES = 'SDL_GAMECONTROLLER_IGNORE_DEVICES';
  SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT = 'SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT';
  SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS = 'SDL_GAMECONTROLLER_USE_BUTTON_LABELS';
  SDL_HINT_GRAB_KEYBOARD = 'SDL_GRAB_KEYBOARD';
  SDL_HINT_IDLE_TIMER_DISABLED = 'SDL_IOS_IDLE_TIMER_DISABLED';
  SDL_HINT_IME_INTERNAL_EDITING = 'SDL_IME_INTERNAL_EDITING';
  SDL_HINT_IME_SHOW_UI = 'SDL_IME_SHOW_UI';
  SDL_HINT_IME_SUPPORT_EXTENDED_TEXT = 'SDL_IME_SUPPORT_EXTENDED_TEXT';
  SDL_HINT_IOS_HIDE_HOME_INDICATOR = 'SDL_IOS_HIDE_HOME_INDICATOR';
  SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = 'SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS';
  SDL_HINT_JOYSTICK_HIDAPI = 'SDL_JOYSTICK_HIDAPI';
  SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE = 'SDL_JOYSTICK_HIDAPI_GAMECUBE';
  SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE = 'SDL_JOYSTICK_GAMECUBE_RUMBLE_BRAKE';
  SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS = 'SDL_JOYSTICK_HIDAPI_JOY_CONS';
  SDL_HINT_JOYSTICK_HIDAPI_LUNA = 'SDL_JOYSTICK_HIDAPI_LUNA';
  SDL_HINT_JOYSTICK_HIDAPI_PS4 = 'SDL_JOYSTICK_HIDAPI_PS4';
  SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE = 'SDL_JOYSTICK_HIDAPI_PS4_RUMBLE';
  SDL_HINT_JOYSTICK_HIDAPI_PS5 = 'SDL_JOYSTICK_HIDAPI_PS5';
  SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED = 'SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED';
  SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE = 'SDL_JOYSTICK_HIDAPI_PS5_RUMBLE';
  SDL_HINT_JOYSTICK_HIDAPI_STADIA = 'SDL_JOYSTICK_HIDAPI_STADIA';
  SDL_HINT_JOYSTICK_HIDAPI_STEAM = 'SDL_JOYSTICK_HIDAPI_STEAM';
  SDL_HINT_JOYSTICK_HIDAPI_SWITCH = 'SDL_JOYSTICK_HIDAPI_SWITCH';
  SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED = 'SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED';
  SDL_HINT_JOYSTICK_HIDAPI_XBOX = 'SDL_JOYSTICK_HIDAPI_XBOX';
  SDL_HINT_JOYSTICK_RAWINPUT = 'SDL_JOYSTICK_RAWINPUT';
  SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT = 'SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT';
  SDL_HINT_JOYSTICK_ROG_CHAKRAM = 'SDL_JOYSTICK_ROG_CHAKRAM';
  SDL_HINT_JOYSTICK_THREAD = 'SDL_JOYSTICK_THREAD';
  SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER = 'SDL_KMSDRM_REQUIRE_DRM_MASTER';
  SDL_HINT_JOYSTICK_DEVICE = 'SDL_JOYSTICK_DEVICE';
  SDL_HINT_LINUX_JOYSTICK_CLASSIC = 'SDL_LINUX_JOYSTICK_CLASSIC';
  SDL_HINT_LINUX_JOYSTICK_DEADZONES = 'SDL_LINUX_JOYSTICK_DEADZONES';
  SDL_HINT_MAC_BACKGROUND_APP = 'SDL_MAC_BACKGROUND_APP';
  SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK = 'SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK';
  SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS = 'SDL_MOUSE_DOUBLE_CLICK_RADIUS';
  SDL_HINT_MOUSE_DOUBLE_CLICK_TIME = 'SDL_MOUSE_DOUBLE_CLICK_TIME';
  SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH = 'SDL_MOUSE_FOCUS_CLICKTHROUGH';
  SDL_HINT_MOUSE_NORMAL_SPEED_SCALE = 'SDL_MOUSE_NORMAL_SPEED_SCALE';
  SDL_HINT_MOUSE_RELATIVE_MODE_CENTER = 'SDL_MOUSE_RELATIVE_MODE_CENTER';
  SDL_HINT_MOUSE_RELATIVE_MODE_WARP = 'SDL_MOUSE_RELATIVE_MODE_WARP';
  SDL_HINT_MOUSE_RELATIVE_SCALING = 'SDL_MOUSE_RELATIVE_SCALING';
  SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE = 'SDL_MOUSE_RELATIVE_SPEED_SCALE';
  SDL_HINT_MOUSE_TOUCH_EVENTS = 'SDL_MOUSE_TOUCH_EVENTS';
  SDL_HINT_MOUSE_AUTO_CAPTURE = 'SDL_MOUSE_AUTO_CAPTURE';
  SDL_HINT_NO_SIGNAL_HANDLERS = 'SDL_NO_SIGNAL_HANDLERS';
  SDL_HINT_OPENGL_ES_DRIVER = 'SDL_OPENGL_ES_DRIVER';
  SDL_HINT_ORIENTATIONS = 'SDL_IOS_ORIENTATIONS';
  SDL_HINT_POLL_SENTINEL = 'SDL_POLL_SENTINEL';
  SDL_HINT_PREFERRED_LOCALES = 'SDL_PREFERRED_LOCALES';
  SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION = 'SDL_QTWAYLAND_CONTENT_ORIENTATION';
  SDL_HINT_QTWAYLAND_WINDOW_FLAGS = 'SDL_QTWAYLAND_WINDOW_FLAGS';
  SDL_HINT_RENDER_BATCHING = 'SDL_RENDER_BATCHING';
  SDL_HINT_RENDER_LINE_METHOD = 'SDL_RENDER_LINE_METHOD';
  SDL_HINT_RENDER_DIRECT3D11_DEBUG = 'SDL_RENDER_DIRECT3D11_DEBUG';
  SDL_HINT_RENDER_DIRECT3D_THREADSAFE = 'SDL_RENDER_DIRECT3D_THREADSAFE';
  SDL_HINT_RENDER_DRIVER = 'SDL_RENDER_DRIVER';
  SDL_HINT_RENDER_LOGICAL_SIZE_MODE = 'SDL_RENDER_LOGICAL_SIZE_MODE';
  SDL_HINT_RENDER_OPENGL_SHADERS = 'SDL_RENDER_OPENGL_SHADERS';
  SDL_HINT_RENDER_SCALE_QUALITY = 'SDL_RENDER_SCALE_QUALITY';
  SDL_HINT_RENDER_VSYNC = 'SDL_RENDER_VSYNC';
  SDL_HINT_RETURN_KEY_HIDES_IME = 'SDL_RETURN_KEY_HIDES_IME';
  SDL_HINT_RPI_VIDEO_LAYER = 'SDL_RPI_VIDEO_LAYER';
  SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME = 'SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME';
  SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL = 'SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL';
  SDL_HINT_THREAD_PRIORITY_POLICY = 'SDL_THREAD_PRIORITY_POLICY';
  SDL_HINT_THREAD_STACK_SIZE = 'SDL_THREAD_STACK_SIZE';
  SDL_HINT_TIMER_RESOLUTION = 'SDL_TIMER_RESOLUTION';
  SDL_HINT_TOUCH_MOUSE_EVENTS = 'SDL_TOUCH_MOUSE_EVENTS';
  SDL_HINT_VITA_TOUCH_MOUSE_DEVICE = 'SDL_HINT_VITA_TOUCH_MOUSE_DEVICE';
  SDL_HINT_TV_REMOTE_AS_JOYSTICK = 'SDL_TV_REMOTE_AS_JOYSTICK';
  SDL_HINT_VIDEO_ALLOW_SCREENSAVER = 'SDL_VIDEO_ALLOW_SCREENSAVER';
  SDL_HINT_VIDEO_DOUBLE_BUFFER = 'SDL_VIDEO_DOUBLE_BUFFER';
  SDL_HINT_VIDEO_EGL_ALLOW_TRANSPARENCY = 'SDL_VIDEO_EGL_ALLOW_TRANSPARENCY';
  SDL_HINT_VIDEO_EXTERNAL_CONTEXT = 'SDL_VIDEO_EXTERNAL_CONTEXT';
  SDL_HINT_VIDEO_HIGHDPI_DISABLED = 'SDL_VIDEO_HIGHDPI_DISABLED';
  SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES = 'SDL_VIDEO_MAC_FULLSCREEN_SPACES';
  SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = 'SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS';
  SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR = 'SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR';
  SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR = 'SDL_VIDEO_WAYLAND_PREFER_LIBDECOR';
  SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT = 'SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT';
  SDL_HINT_VIDEO_FOREIGN_WINDOW_OPENGL = 'SDL_VIDEO_FOREIGN_WINDOW_OPENGL';
  SDL_HINT_VIDEO_FOREIGN_WINDOW_VULKAN = 'SDL_VIDEO_FOREIGN_WINDOW_VULKAN';
  SDL_HINT_VIDEO_WIN_D3DCOMPILER = 'SDL_VIDEO_WIN_D3DCOMPILER';
  SDL_HINT_VIDEO_X11_FORCE_EGL = 'SDL_VIDEO_X11_FORCE_EGL';
  SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR = 'SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR';
  SDL_HINT_VIDEO_X11_NET_WM_PING = 'SDL_VIDEO_X11_NET_WM_PING';
  SDL_HINT_VIDEO_X11_WINDOW_VISUALID = 'SDL_VIDEO_X11_WINDOW_VISUALID';
  SDL_HINT_VIDEO_X11_XINERAMA = 'SDL_VIDEO_X11_XINERAMA';
  SDL_HINT_VIDEO_X11_XRANDR = 'SDL_VIDEO_X11_XRANDR';
  SDL_HINT_VIDEO_X11_XVIDMODE = 'SDL_VIDEO_X11_XVIDMODE';
  SDL_HINT_WAVE_FACT_CHUNK = 'SDL_WAVE_FACT_CHUNK';
  SDL_HINT_WAVE_RIFF_CHUNK_SIZE = 'SDL_WAVE_RIFF_CHUNK_SIZE';
  SDL_HINT_WAVE_TRUNCATION = 'SDL_WAVE_TRUNCATION';
  SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING = 'SDL_WINDOWS_DISABLE_THREAD_NAMING';
  SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP = 'SDL_WINDOWS_ENABLE_MESSAGELOOP';
  SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS = 'SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS';
  SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL = 'SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL';
  SDL_HINT_WINDOWS_INTRESOURCE_ICON = 'SDL_WINDOWS_INTRESOURCE_ICON';
  SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL = 'SDL_WINDOWS_INTRESOURCE_ICON_SMALL';
  SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 = 'SDL_WINDOWS_NO_CLOSE_ON_ALT_F4';
  SDL_HINT_WINDOWS_USE_D3D9EX = 'SDL_WINDOWS_USE_D3D9EX';
  SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN = 'SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN';
  SDL_HINT_WINDOW_NO_ACTIVATION_WHEN_SHOWN = 'SDL_WINDOW_NO_ACTIVATION_WHEN_SHOWN';
  SDL_HINT_WINRT_HANDLE_BACK_BUTTON = 'SDL_WINRT_HANDLE_BACK_BUTTON';
  SDL_HINT_WINRT_PRIVACY_POLICY_LABEL = 'SDL_WINRT_PRIVACY_POLICY_LABEL';
  SDL_HINT_WINRT_PRIVACY_POLICY_URL = 'SDL_WINRT_PRIVACY_POLICY_URL';
  SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT = 'SDL_X11_FORCE_OVERRIDE_REDIRECT';
  SDL_HINT_XINPUT_ENABLED = 'SDL_XINPUT_ENABLED';
  SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING = 'SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING';
  SDL_HINT_AUDIO_INCLUDE_MONITORS = 'SDL_AUDIO_INCLUDE_MONITORS';
  SDL_HINT_X11_WINDOW_TYPE = 'SDL_X11_WINDOW_TYPE';
  SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE = 'SDL_QUIT_ON_LAST_WINDOW_CLOSE';
  SDL_HINT_VIDEODRIVER = 'SDL_VIDEODRIVER';
  SDL_HINT_AUDIODRIVER = 'SDL_AUDIODRIVER';
  
  SDL_MAX_LOG_MESSAGE = 4096;
  
  SDL_NONSHAPEABLE_WINDOW = -1;
  SDL_INVALID_SHAPE_ARGUMENT = -2;
  SDL_WINDOW_LACKS_SHAPE = -3;

  SDL_MAJOR_VERSION = 2;
  SDL_MINOR_VERSION = 0;
  SDL_PATCHLEVEL = 22;

  SDL_INIT_TIMER = $00000001;
  SDL_INIT_AUDIO = $00000010;
  SDL_INIT_VIDEO = $00000020;
  SDL_INIT_JOYSTICK = $00000200;
  SDL_INIT_HAPTIC = $00001000;
  SDL_INIT_GAMECONTROLLER = $00002000;
  SDL_INIT_EVENTS = $00004000;
  SDL_INIT_SENSOR = $00008000;
  SDL_INIT_NOPARACHUTE = $00100000;
  SDL_INIT_EVERYTHING = (SDL_INIT_TIMER or SDL_INIT_AUDIO or SDL_INIT_VIDEO or
                         SDL_INIT_EVENTS or SDL_INIT_JOYSTICK or
                         SDL_INIT_HAPTIC or SDL_INIT_GAMECONTROLLER or
                         SDL_INIT_SENSOR);

  SDL_MIXER_MAJOR_VERSION = 2;
  SDL_MIXER_MINOR_VERSION = 7;
  SDL_MIXER_PATCHLEVEL = 0;

  MIX_MAJOR_VERSION = SDL_MIXER_MAJOR_VERSION;
  MIX_MINOR_VERSION = SDL_MIXER_MINOR_VERSION;
  MIX_PATCHLEVEL = SDL_MIXER_PATCHLEVEL;
  MIX_CHANNELS = 8;
  MIX_DEFAULT_FREQUENCY = 44100;
  MIX_DEFAULT_FORMAT = AUDIO_S16LSB;
  MIX_DEFAULT_CHANNELS = 2;
  MIX_MAX_VOLUME = SDL_MIX_MAXVOLUME;
  MIX_CHANNEL_POST = (-2);
  MIX_EFFECTSMAXSPEED = 'MIX_EFFECTSMAXSPEED';

  SDL_NET_MAJOR_VERSION = 2;
  SDL_NET_MINOR_VERSION = 1;
  SDL_NET_PATCHLEVEL = 0;

  INADDR_ANY = $00000000;
  INADDR_NONE = $FFFFFFFF;
  INADDR_LOOPBACK = $7f000001;
  INADDR_BROADCAST = $FFFFFFFF;

  SDLNET_MAX_UDPCHANNELS = 32;
  SDLNET_MAX_UDPADDRESSES = 4;

  SDL_DATA_ALIGNED = 0;

  SDL_TTF_MAJOR_VERSION = 2;
  SDL_TTF_MINOR_VERSION = 21;
  SDL_TTF_PATCHLEVEL = 0;

  TTF_MAJOR_VERSION = SDL_TTF_MAJOR_VERSION;
  TTF_MINOR_VERSION = SDL_TTF_MINOR_VERSION;
  TTF_PATCHLEVEL = SDL_TTF_PATCHLEVEL;

  UNICODE_BOM_NATIVE = $FEFF;
  UNICODE_BOM_SWAPPED = $FFFE;

  TTF_STYLE_NORMAL = $00;
  TTF_STYLE_BOLD = $01;
  TTF_STYLE_ITALIC = $02;
  TTF_STYLE_UNDERLINE = $04;
  TTF_STYLE_STRIKETHROUGH = $08;
  TTF_HINTING_NORMAL = 0;
  TTF_HINTING_LIGHT = 1;
  TTF_HINTING_MONO = 2;
  TTF_HINTING_NONE = 3;
  TTF_HINTING_LIGHT_SUBPIXEL = 4;
  TTF_WRAPPED_ALIGN_LEFT = 0;
  TTF_WRAPPED_ALIGN_CENTER = 1;
  TTF_WRAPPED_ALIGN_RIGHT = 2;

  SDL_IMAGE_MAJOR_VERSION = 2;
  SDL_IMAGE_MINOR_VERSION = 7;
  SDL_IMAGE_PATCHLEVEL = 0;

  SDL_FALSE = 0;
  SDL_TRUE = 1;

  DUMMY_ENUM_VALUE = 0;

  SDL_ASSERTION_RETRY = 0;
  SDL_ASSERTION_BREAK = 1;
  SDL_ASSERTION_ABORT = 2;
  SDL_ASSERTION_IGNORE = 3;
  SDL_ASSERTION_ALWAYS_IGNORE = 4;

  SDL_ENOMEM = 0;
  SDL_EFREAD = 1;
  SDL_EFWRITE = 2;
  SDL_EFSEEK = 3;
  SDL_UNSUPPORTED = 4;
  SDL_LASTERROR = 5;

  SDL_THREAD_PRIORITY_LOW = 0;
  SDL_THREAD_PRIORITY_NORMAL = 1;
  SDL_THREAD_PRIORITY_HIGH = 2;
  SDL_THREAD_PRIORITY_TIME_CRITICAL = 3;

  SDL_AUDIO_STOPPED = 0;
  SDL_AUDIO_PLAYING = 1;
  SDL_AUDIO_PAUSED = 2;

  SDL_PIXELTYPE_UNKNOWN = 0;
  SDL_PIXELTYPE_INDEX1 = 1;
  SDL_PIXELTYPE_INDEX4 = 2;
  SDL_PIXELTYPE_INDEX8 = 3;
  SDL_PIXELTYPE_PACKED8 = 4;
  SDL_PIXELTYPE_PACKED16 = 5;
  SDL_PIXELTYPE_PACKED32 = 6;
  SDL_PIXELTYPE_ARRAYU8 = 7;
  SDL_PIXELTYPE_ARRAYU16 = 8;
  SDL_PIXELTYPE_ARRAYU32 = 9;
  SDL_PIXELTYPE_ARRAYF16 = 10;
  SDL_PIXELTYPE_ARRAYF32 = 11;

  SDL_BITMAPORDER_NONE = 0;
  SDL_BITMAPORDER_4321 = 1;
  SDL_BITMAPORDER_1234 = 2;

  SDL_PACKEDORDER_NONE = 0;
  SDL_PACKEDORDER_XRGB = 1;
  SDL_PACKEDORDER_RGBX = 2;
  SDL_PACKEDORDER_ARGB = 3;
  SDL_PACKEDORDER_RGBA = 4;
  SDL_PACKEDORDER_XBGR = 5;
  SDL_PACKEDORDER_BGRX = 6;
  SDL_PACKEDORDER_ABGR = 7;
  SDL_PACKEDORDER_BGRA = 8;

  SDL_ARRAYORDER_NONE = 0;
  SDL_ARRAYORDER_RGB = 1;
  SDL_ARRAYORDER_RGBA = 2;
  SDL_ARRAYORDER_ARGB = 3;
  SDL_ARRAYORDER_BGR = 4;
  SDL_ARRAYORDER_BGRA = 5;
  SDL_ARRAYORDER_ABGR = 6;

  SDL_PACKEDLAYOUT_NONE = 0;
  SDL_PACKEDLAYOUT_332 = 1;
  SDL_PACKEDLAYOUT_4444 = 2;
  SDL_PACKEDLAYOUT_1555 = 3;
  SDL_PACKEDLAYOUT_5551 = 4;
  SDL_PACKEDLAYOUT_565 = 5;
  SDL_PACKEDLAYOUT_8888 = 6;
  SDL_PACKEDLAYOUT_2101010 = 7;
  SDL_PACKEDLAYOUT_1010102 = 8;

  SDL_PIXELFORMAT_UNKNOWN = 0;
  SDL_PIXELFORMAT_INDEX1LSB = 286261504;
  SDL_PIXELFORMAT_INDEX1MSB = 287310080;
  SDL_PIXELFORMAT_INDEX4LSB = 303039488;
  SDL_PIXELFORMAT_INDEX4MSB = 304088064;
  SDL_PIXELFORMAT_INDEX8 = 318769153;
  SDL_PIXELFORMAT_RGB332 = 336660481;
  SDL_PIXELFORMAT_XRGB4444 = 353504258;
  SDL_PIXELFORMAT_RGB444 = 353504258;
  SDL_PIXELFORMAT_XBGR4444 = 357698562;
  SDL_PIXELFORMAT_BGR444 = 357698562;
  SDL_PIXELFORMAT_XRGB1555 = 353570562;
  SDL_PIXELFORMAT_RGB555 = 353570562;
  SDL_PIXELFORMAT_XBGR1555 = 357764866;
  SDL_PIXELFORMAT_BGR555 = 357764866;
  SDL_PIXELFORMAT_ARGB4444 = 355602434;
  SDL_PIXELFORMAT_RGBA4444 = 356651010;
  SDL_PIXELFORMAT_ABGR4444 = 359796738;
  SDL_PIXELFORMAT_BGRA4444 = 360845314;
  SDL_PIXELFORMAT_ARGB1555 = 355667970;
  SDL_PIXELFORMAT_RGBA5551 = 356782082;
  SDL_PIXELFORMAT_ABGR1555 = 359862274;
  SDL_PIXELFORMAT_BGRA5551 = 360976386;
  SDL_PIXELFORMAT_RGB565 = 353701890;
  SDL_PIXELFORMAT_BGR565 = 357896194;
  SDL_PIXELFORMAT_RGB24 = 386930691;
  SDL_PIXELFORMAT_BGR24 = 390076419;
  SDL_PIXELFORMAT_XRGB8888 = 370546692;
  SDL_PIXELFORMAT_RGB888 = 370546692;
  SDL_PIXELFORMAT_RGBX8888 = 371595268;
  SDL_PIXELFORMAT_XBGR8888 = 374740996;
  SDL_PIXELFORMAT_BGR888 = 374740996;
  SDL_PIXELFORMAT_BGRX8888 = 375789572;
  SDL_PIXELFORMAT_ARGB8888 = 372645892;
  SDL_PIXELFORMAT_RGBA8888 = 373694468;
  SDL_PIXELFORMAT_ABGR8888 = 376840196;
  SDL_PIXELFORMAT_BGRA8888 = 377888772;
  SDL_PIXELFORMAT_ARGB2101010 = 372711428;
  SDL_PIXELFORMAT_RGBA32 = 376840196;
  SDL_PIXELFORMAT_ARGB32 = 377888772;
  SDL_PIXELFORMAT_BGRA32 = 372645892;
  SDL_PIXELFORMAT_ABGR32 = 373694468;
  SDL_PIXELFORMAT_YV12 = 842094169;
  SDL_PIXELFORMAT_IYUV = 1448433993;
  SDL_PIXELFORMAT_YUY2 = 844715353;
  SDL_PIXELFORMAT_UYVY = 1498831189;
  SDL_PIXELFORMAT_YVYU = 1431918169;
  SDL_PIXELFORMAT_NV12 = 842094158;
  SDL_PIXELFORMAT_NV21 = 825382478;
  SDL_PIXELFORMAT_EXTERNAL_OES = 542328143;

  SDL_BLENDMODE_NONE = 0;
  SDL_BLENDMODE_BLEND = 1;
  SDL_BLENDMODE_ADD = 2;
  SDL_BLENDMODE_MOD = 4;
  SDL_BLENDMODE_MUL = 8;
  SDL_BLENDMODE_INVALID = 2147483647;

  SDL_BLENDOPERATION_ADD = 1;
  SDL_BLENDOPERATION_SUBTRACT = 2;
  SDL_BLENDOPERATION_REV_SUBTRACT = 3;
  SDL_BLENDOPERATION_MINIMUM = 4;
  SDL_BLENDOPERATION_MAXIMUM = 5;

  SDL_BLENDFACTOR_ZERO = 1;
  SDL_BLENDFACTOR_ONE = 2;
  SDL_BLENDFACTOR_SRC_COLOR = 3;
  SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4;
  SDL_BLENDFACTOR_SRC_ALPHA = 5;
  SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6;
  SDL_BLENDFACTOR_DST_COLOR = 7;
  SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8;
  SDL_BLENDFACTOR_DST_ALPHA = 9;
  SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10;

  SDL_YUV_CONVERSION_JPEG = 0;
  SDL_YUV_CONVERSION_BT601 = 1;
  SDL_YUV_CONVERSION_BT709 = 2;
  SDL_YUV_CONVERSION_AUTOMATIC = 3;

  SDL_WINDOW_FULLSCREEN = 1;
  SDL_WINDOW_OPENGL = 2;
  SDL_WINDOW_SHOWN = 4;
  SDL_WINDOW_HIDDEN = 8;
  SDL_WINDOW_BORDERLESS = 16;
  SDL_WINDOW_RESIZABLE = 32;
  SDL_WINDOW_MINIMIZED = 64;
  SDL_WINDOW_MAXIMIZED = 128;
  SDL_WINDOW_MOUSE_GRABBED = 256;
  SDL_WINDOW_INPUT_FOCUS = 512;
  SDL_WINDOW_MOUSE_FOCUS = 1024;
  SDL_WINDOW_FULLSCREEN_DESKTOP = 4097;
  SDL_WINDOW_FOREIGN = 2048;
  SDL_WINDOW_ALLOW_HIGHDPI = 8192;
  SDL_WINDOW_MOUSE_CAPTURE = 16384;
  SDL_WINDOW_ALWAYS_ON_TOP = 32768;
  SDL_WINDOW_SKIP_TASKBAR = 65536;
  SDL_WINDOW_UTILITY = 131072;
  SDL_WINDOW_TOOLTIP = 262144;
  SDL_WINDOW_POPUP_MENU = 524288;
  SDL_WINDOW_KEYBOARD_GRABBED = 1048576;
  SDL_WINDOW_VULKAN = 268435456;
  SDL_WINDOW_METAL = 536870912;
  SDL_WINDOW_INPUT_GRABBED = 256;

  SDL_WINDOWEVENT_NONE = 0;
  SDL_WINDOWEVENT_SHOWN = 1;
  SDL_WINDOWEVENT_HIDDEN = 2;
  SDL_WINDOWEVENT_EXPOSED = 3;
  SDL_WINDOWEVENT_MOVED = 4;
  SDL_WINDOWEVENT_RESIZED = 5;
  SDL_WINDOWEVENT_SIZE_CHANGED = 6;
  SDL_WINDOWEVENT_MINIMIZED = 7;
  SDL_WINDOWEVENT_MAXIMIZED = 8;
  SDL_WINDOWEVENT_RESTORED = 9;
  SDL_WINDOWEVENT_ENTER = 10;
  SDL_WINDOWEVENT_LEAVE = 11;
  SDL_WINDOWEVENT_FOCUS_GAINED = 12;
  SDL_WINDOWEVENT_FOCUS_LOST = 13;
  SDL_WINDOWEVENT_CLOSE = 14;
  SDL_WINDOWEVENT_TAKE_FOCUS = 15;
  SDL_WINDOWEVENT_HIT_TEST = 16;
  SDL_WINDOWEVENT_ICCPROF_CHANGED = 17;
  SDL_WINDOWEVENT_DISPLAY_CHANGED = 18;

  SDL_DISPLAYEVENT_NONE = 0;
  SDL_DISPLAYEVENT_ORIENTATION = 1;
  SDL_DISPLAYEVENT_CONNECTED = 2;
  SDL_DISPLAYEVENT_DISCONNECTED = 3;

  SDL_ORIENTATION_UNKNOWN = 0;
  SDL_ORIENTATION_LANDSCAPE = 1;
  SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2;
  SDL_ORIENTATION_PORTRAIT = 3;
  SDL_ORIENTATION_PORTRAIT_FLIPPED = 4;

  SDL_FLASH_CANCEL = 0;
  SDL_FLASH_BRIEFLY = 1;
  SDL_FLASH_UNTIL_FOCUSED = 2;

  SDL_GL_RED_SIZE = 0;
  SDL_GL_GREEN_SIZE = 1;
  SDL_GL_BLUE_SIZE = 2;
  SDL_GL_ALPHA_SIZE = 3;
  SDL_GL_BUFFER_SIZE = 4;
  SDL_GL_DOUBLEBUFFER = 5;
  SDL_GL_DEPTH_SIZE = 6;
  SDL_GL_STENCIL_SIZE = 7;
  SDL_GL_ACCUM_RED_SIZE = 8;
  SDL_GL_ACCUM_GREEN_SIZE = 9;
  SDL_GL_ACCUM_BLUE_SIZE = 10;
  SDL_GL_ACCUM_ALPHA_SIZE = 11;
  SDL_GL_STEREO = 12;
  SDL_GL_MULTISAMPLEBUFFERS = 13;
  SDL_GL_MULTISAMPLESAMPLES = 14;
  SDL_GL_ACCELERATED_VISUAL = 15;
  SDL_GL_RETAINED_BACKING = 16;
  SDL_GL_CONTEXT_MAJOR_VERSION = 17;
  SDL_GL_CONTEXT_MINOR_VERSION = 18;
  SDL_GL_CONTEXT_EGL = 19;
  SDL_GL_CONTEXT_FLAGS = 20;
  SDL_GL_CONTEXT_PROFILE_MASK = 21;
  SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22;
  SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23;
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24;
  SDL_GL_CONTEXT_RESET_NOTIFICATION = 25;
  SDL_GL_CONTEXT_NO_ERROR = 26;

  SDL_GL_CONTEXT_PROFILE_CORE = 1;
  SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 2;
  SDL_GL_CONTEXT_PROFILE_ES = 4;

  SDL_GL_CONTEXT_DEBUG_FLAG = 1;
  SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2;
  SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 4;
  SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 8;

  SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0;
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 1;

  SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0;
  SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 1;

  SDL_HITTEST_NORMAL = 0;
  SDL_HITTEST_DRAGGABLE = 1;
  SDL_HITTEST_RESIZE_TOPLEFT = 2;
  SDL_HITTEST_RESIZE_TOP = 3;
  SDL_HITTEST_RESIZE_TOPRIGHT = 4;
  SDL_HITTEST_RESIZE_RIGHT = 5;
  SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6;
  SDL_HITTEST_RESIZE_BOTTOM = 7;
  SDL_HITTEST_RESIZE_BOTTOMLEFT = 8;
  SDL_HITTEST_RESIZE_LEFT = 9;

  SDL_SCANCODE_UNKNOWN = 0;
  SDL_SCANCODE_A = 4;
  SDL_SCANCODE_B = 5;
  SDL_SCANCODE_C = 6;
  SDL_SCANCODE_D = 7;
  SDL_SCANCODE_E = 8;
  SDL_SCANCODE_F = 9;
  SDL_SCANCODE_G = 10;
  SDL_SCANCODE_H = 11;
  SDL_SCANCODE_I = 12;
  SDL_SCANCODE_J = 13;
  SDL_SCANCODE_K = 14;
  SDL_SCANCODE_L = 15;
  SDL_SCANCODE_M = 16;
  SDL_SCANCODE_N = 17;
  SDL_SCANCODE_O = 18;
  SDL_SCANCODE_P = 19;
  SDL_SCANCODE_Q = 20;
  SDL_SCANCODE_R = 21;
  SDL_SCANCODE_S = 22;
  SDL_SCANCODE_T = 23;
  SDL_SCANCODE_U = 24;
  SDL_SCANCODE_V = 25;
  SDL_SCANCODE_W = 26;
  SDL_SCANCODE_X = 27;
  SDL_SCANCODE_Y = 28;
  SDL_SCANCODE_Z = 29;
  SDL_SCANCODE_1 = 30;
  SDL_SCANCODE_2 = 31;
  SDL_SCANCODE_3 = 32;
  SDL_SCANCODE_4 = 33;
  SDL_SCANCODE_5 = 34;
  SDL_SCANCODE_6 = 35;
  SDL_SCANCODE_7 = 36;
  SDL_SCANCODE_8 = 37;
  SDL_SCANCODE_9 = 38;
  SDL_SCANCODE_0 = 39;
  SDL_SCANCODE_RETURN = 40;
  SDL_SCANCODE_ESCAPE = 41;
  SDL_SCANCODE_BACKSPACE = 42;
  SDL_SCANCODE_TAB = 43;
  SDL_SCANCODE_SPACE = 44;
  SDL_SCANCODE_MINUS = 45;
  SDL_SCANCODE_EQUALS = 46;
  SDL_SCANCODE_LEFTBRACKET = 47;
  SDL_SCANCODE_RIGHTBRACKET = 48;
  SDL_SCANCODE_BACKSLASH = 49;
  SDL_SCANCODE_NONUSHASH = 50;
  SDL_SCANCODE_SEMICOLON = 51;
  SDL_SCANCODE_APOSTROPHE = 52;
  SDL_SCANCODE_GRAVE = 53;
  SDL_SCANCODE_COMMA = 54;
  SDL_SCANCODE_PERIOD = 55;
  SDL_SCANCODE_SLASH = 56;
  SDL_SCANCODE_CAPSLOCK = 57;
  SDL_SCANCODE_F1 = 58;
  SDL_SCANCODE_F2 = 59;
  SDL_SCANCODE_F3 = 60;
  SDL_SCANCODE_F4 = 61;
  SDL_SCANCODE_F5 = 62;
  SDL_SCANCODE_F6 = 63;
  SDL_SCANCODE_F7 = 64;
  SDL_SCANCODE_F8 = 65;
  SDL_SCANCODE_F9 = 66;
  SDL_SCANCODE_F10 = 67;
  SDL_SCANCODE_F11 = 68;
  SDL_SCANCODE_F12 = 69;
  SDL_SCANCODE_PRINTSCREEN = 70;
  SDL_SCANCODE_SCROLLLOCK = 71;
  SDL_SCANCODE_PAUSE = 72;
  SDL_SCANCODE_INSERT = 73;
  SDL_SCANCODE_HOME = 74;
  SDL_SCANCODE_PAGEUP = 75;
  SDL_SCANCODE_DELETE = 76;
  SDL_SCANCODE_END = 77;
  SDL_SCANCODE_PAGEDOWN = 78;
  SDL_SCANCODE_RIGHT = 79;
  SDL_SCANCODE_LEFT = 80;
  SDL_SCANCODE_DOWN = 81;
  SDL_SCANCODE_UP = 82;
  SDL_SCANCODE_NUMLOCKCLEAR = 83;
  SDL_SCANCODE_KP_DIVIDE = 84;
  SDL_SCANCODE_KP_MULTIPLY = 85;
  SDL_SCANCODE_KP_MINUS = 86;
  SDL_SCANCODE_KP_PLUS = 87;
  SDL_SCANCODE_KP_ENTER = 88;
  SDL_SCANCODE_KP_1 = 89;
  SDL_SCANCODE_KP_2 = 90;
  SDL_SCANCODE_KP_3 = 91;
  SDL_SCANCODE_KP_4 = 92;
  SDL_SCANCODE_KP_5 = 93;
  SDL_SCANCODE_KP_6 = 94;
  SDL_SCANCODE_KP_7 = 95;
  SDL_SCANCODE_KP_8 = 96;
  SDL_SCANCODE_KP_9 = 97;
  SDL_SCANCODE_KP_0 = 98;
  SDL_SCANCODE_KP_PERIOD = 99;
  SDL_SCANCODE_NONUSBACKSLASH = 100;
  SDL_SCANCODE_APPLICATION = 101;
  SDL_SCANCODE_POWER = 102;
  SDL_SCANCODE_KP_EQUALS = 103;
  SDL_SCANCODE_F13 = 104;
  SDL_SCANCODE_F14 = 105;
  SDL_SCANCODE_F15 = 106;
  SDL_SCANCODE_F16 = 107;
  SDL_SCANCODE_F17 = 108;
  SDL_SCANCODE_F18 = 109;
  SDL_SCANCODE_F19 = 110;
  SDL_SCANCODE_F20 = 111;
  SDL_SCANCODE_F21 = 112;
  SDL_SCANCODE_F22 = 113;
  SDL_SCANCODE_F23 = 114;
  SDL_SCANCODE_F24 = 115;
  SDL_SCANCODE_EXECUTE = 116;
  SDL_SCANCODE_HELP = 117;
  SDL_SCANCODE_MENU = 118;
  SDL_SCANCODE_SELECT = 119;
  SDL_SCANCODE_STOP = 120;
  SDL_SCANCODE_AGAIN = 121;
  SDL_SCANCODE_UNDO = 122;
  SDL_SCANCODE_CUT = 123;
  SDL_SCANCODE_COPY = 124;
  SDL_SCANCODE_PASTE = 125;
  SDL_SCANCODE_FIND = 126;
  SDL_SCANCODE_MUTE = 127;
  SDL_SCANCODE_VOLUMEUP = 128;
  SDL_SCANCODE_VOLUMEDOWN = 129;
  SDL_SCANCODE_KP_COMMA = 133;
  SDL_SCANCODE_KP_EQUALSAS400 = 134;
  SDL_SCANCODE_INTERNATIONAL1 = 135;
  SDL_SCANCODE_INTERNATIONAL2 = 136;
  SDL_SCANCODE_INTERNATIONAL3 = 137;
  SDL_SCANCODE_INTERNATIONAL4 = 138;
  SDL_SCANCODE_INTERNATIONAL5 = 139;
  SDL_SCANCODE_INTERNATIONAL6 = 140;
  SDL_SCANCODE_INTERNATIONAL7 = 141;
  SDL_SCANCODE_INTERNATIONAL8 = 142;
  SDL_SCANCODE_INTERNATIONAL9 = 143;
  SDL_SCANCODE_LANG1 = 144;
  SDL_SCANCODE_LANG2 = 145;
  SDL_SCANCODE_LANG3 = 146;
  SDL_SCANCODE_LANG4 = 147;
  SDL_SCANCODE_LANG5 = 148;
  SDL_SCANCODE_LANG6 = 149;
  SDL_SCANCODE_LANG7 = 150;
  SDL_SCANCODE_LANG8 = 151;
  SDL_SCANCODE_LANG9 = 152;
  SDL_SCANCODE_ALTERASE = 153;
  SDL_SCANCODE_SYSREQ = 154;
  SDL_SCANCODE_CANCEL = 155;
  SDL_SCANCODE_CLEAR = 156;
  SDL_SCANCODE_PRIOR = 157;
  SDL_SCANCODE_RETURN2 = 158;
  SDL_SCANCODE_SEPARATOR = 159;
  SDL_SCANCODE_OUT = 160;
  SDL_SCANCODE_OPER = 161;
  SDL_SCANCODE_CLEARAGAIN = 162;
  SDL_SCANCODE_CRSEL = 163;
  SDL_SCANCODE_EXSEL = 164;
  SDL_SCANCODE_KP_00 = 176;
  SDL_SCANCODE_KP_000 = 177;
  SDL_SCANCODE_THOUSANDSSEPARATOR = 178;
  SDL_SCANCODE_DECIMALSEPARATOR = 179;
  SDL_SCANCODE_CURRENCYUNIT = 180;
  SDL_SCANCODE_CURRENCYSUBUNIT = 181;
  SDL_SCANCODE_KP_LEFTPAREN = 182;
  SDL_SCANCODE_KP_RIGHTPAREN = 183;
  SDL_SCANCODE_KP_LEFTBRACE = 184;
  SDL_SCANCODE_KP_RIGHTBRACE = 185;
  SDL_SCANCODE_KP_TAB = 186;
  SDL_SCANCODE_KP_BACKSPACE = 187;
  SDL_SCANCODE_KP_A = 188;
  SDL_SCANCODE_KP_B = 189;
  SDL_SCANCODE_KP_C = 190;
  SDL_SCANCODE_KP_D = 191;
  SDL_SCANCODE_KP_E = 192;
  SDL_SCANCODE_KP_F = 193;
  SDL_SCANCODE_KP_XOR = 194;
  SDL_SCANCODE_KP_POWER = 195;
  SDL_SCANCODE_KP_PERCENT = 196;
  SDL_SCANCODE_KP_LESS = 197;
  SDL_SCANCODE_KP_GREATER = 198;
  SDL_SCANCODE_KP_AMPERSAND = 199;
  SDL_SCANCODE_KP_DBLAMPERSAND = 200;
  SDL_SCANCODE_KP_VERTICALBAR = 201;
  SDL_SCANCODE_KP_DBLVERTICALBAR = 202;
  SDL_SCANCODE_KP_COLON = 203;
  SDL_SCANCODE_KP_HASH = 204;
  SDL_SCANCODE_KP_SPACE = 205;
  SDL_SCANCODE_KP_AT = 206;
  SDL_SCANCODE_KP_EXCLAM = 207;
  SDL_SCANCODE_KP_MEMSTORE = 208;
  SDL_SCANCODE_KP_MEMRECALL = 209;
  SDL_SCANCODE_KP_MEMCLEAR = 210;
  SDL_SCANCODE_KP_MEMADD = 211;
  SDL_SCANCODE_KP_MEMSUBTRACT = 212;
  SDL_SCANCODE_KP_MEMMULTIPLY = 213;
  SDL_SCANCODE_KP_MEMDIVIDE = 214;
  SDL_SCANCODE_KP_PLUSMINUS = 215;
  SDL_SCANCODE_KP_CLEAR = 216;
  SDL_SCANCODE_KP_CLEARENTRY = 217;
  SDL_SCANCODE_KP_BINARY = 218;
  SDL_SCANCODE_KP_OCTAL = 219;
  SDL_SCANCODE_KP_DECIMAL = 220;
  SDL_SCANCODE_KP_HEXADECIMAL = 221;
  SDL_SCANCODE_LCTRL = 224;
  SDL_SCANCODE_LSHIFT = 225;
  SDL_SCANCODE_LALT = 226;
  SDL_SCANCODE_LGUI = 227;
  SDL_SCANCODE_RCTRL = 228;
  SDL_SCANCODE_RSHIFT = 229;
  SDL_SCANCODE_RALT = 230;
  SDL_SCANCODE_RGUI = 231;
  SDL_SCANCODE_MODE = 257;
  SDL_SCANCODE_AUDIONEXT = 258;
  SDL_SCANCODE_AUDIOPREV = 259;
  SDL_SCANCODE_AUDIOSTOP = 260;
  SDL_SCANCODE_AUDIOPLAY = 261;
  SDL_SCANCODE_AUDIOMUTE = 262;
  SDL_SCANCODE_MEDIASELECT = 263;
  SDL_SCANCODE_WWW = 264;
  SDL_SCANCODE_MAIL = 265;
  SDL_SCANCODE_CALCULATOR = 266;
  SDL_SCANCODE_COMPUTER = 267;
  SDL_SCANCODE_AC_SEARCH = 268;
  SDL_SCANCODE_AC_HOME = 269;
  SDL_SCANCODE_AC_BACK = 270;
  SDL_SCANCODE_AC_FORWARD = 271;
  SDL_SCANCODE_AC_STOP = 272;
  SDL_SCANCODE_AC_REFRESH = 273;
  SDL_SCANCODE_AC_BOOKMARKS = 274;
  SDL_SCANCODE_BRIGHTNESSDOWN = 275;
  SDL_SCANCODE_BRIGHTNESSUP = 276;
  SDL_SCANCODE_DISPLAYSWITCH = 277;
  SDL_SCANCODE_KBDILLUMTOGGLE = 278;
  SDL_SCANCODE_KBDILLUMDOWN = 279;
  SDL_SCANCODE_KBDILLUMUP = 280;
  SDL_SCANCODE_EJECT = 281;
  SDL_SCANCODE_SLEEP = 282;
  SDL_SCANCODE_APP1 = 283;
  SDL_SCANCODE_APP2 = 284;
  SDL_SCANCODE_AUDIOREWIND = 285;
  SDL_SCANCODE_AUDIOFASTFORWARD = 286;
  SDL_NUM_SCANCODES = 512;

  SDLK_UNKNOWN = 0;
  SDLK_RETURN = 13;
  SDLK_ESCAPE = 27;
  SDLK_BACKSPACE = 8;
  SDLK_TAB = 9;
  SDLK_SPACE = 32;
  SDLK_EXCLAIM = 33;
  SDLK_QUOTEDBL = 34;
  SDLK_HASH = 35;
  SDLK_PERCENT = 37;
  SDLK_DOLLAR = 36;
  SDLK_AMPERSAND = 38;
  SDLK_QUOTE = 39;
  SDLK_LEFTPAREN = 40;
  SDLK_RIGHTPAREN = 41;
  SDLK_ASTERISK = 42;
  SDLK_PLUS = 43;
  SDLK_COMMA = 44;
  SDLK_MINUS = 45;
  SDLK_PERIOD = 46;
  SDLK_SLASH = 47;
  SDLK_0 = 48;
  SDLK_1 = 49;
  SDLK_2 = 50;
  SDLK_3 = 51;
  SDLK_4 = 52;
  SDLK_5 = 53;
  SDLK_6 = 54;
  SDLK_7 = 55;
  SDLK_8 = 56;
  SDLK_9 = 57;
  SDLK_COLON = 58;
  SDLK_SEMICOLON = 59;
  SDLK_LESS = 60;
  SDLK_EQUALS = 61;
  SDLK_GREATER = 62;
  SDLK_QUESTION = 63;
  SDLK_AT = 64;
  SDLK_LEFTBRACKET = 91;
  SDLK_BACKSLASH = 92;
  SDLK_RIGHTBRACKET = 93;
  SDLK_CARET = 94;
  SDLK_UNDERSCORE = 95;
  SDLK_BACKQUOTE = 96;
  SDLK_a = 97;
  SDLK_b = 98;
  SDLK_c = 99;
  SDLK_d = 100;
  SDLK_e = 101;
  SDLK_f = 102;
  SDLK_g = 103;
  SDLK_h = 104;
  SDLK_i = 105;
  SDLK_j = 106;
  SDLK_k = 107;
  SDLK_l = 108;
  SDLK_m = 109;
  SDLK_n = 110;
  SDLK_o = 111;
  SDLK_p = 112;
  SDLK_q = 113;
  SDLK_r = 114;
  SDLK_s = 115;
  SDLK_t = 116;
  SDLK_u = 117;
  SDLK_v = 118;
  SDLK_w = 119;
  SDLK_x = 120;
  SDLK_y = 121;
  SDLK_z = 122;
  SDLK_CAPSLOCK = 1073741881;
  SDLK_F1 = 1073741882;
  SDLK_F2 = 1073741883;
  SDLK_F3 = 1073741884;
  SDLK_F4 = 1073741885;
  SDLK_F5 = 1073741886;
  SDLK_F6 = 1073741887;
  SDLK_F7 = 1073741888;
  SDLK_F8 = 1073741889;
  SDLK_F9 = 1073741890;
  SDLK_F10 = 1073741891;
  SDLK_F11 = 1073741892;
  SDLK_F12 = 1073741893;
  SDLK_PRINTSCREEN = 1073741894;
  SDLK_SCROLLLOCK = 1073741895;
  SDLK_PAUSE = 1073741896;
  SDLK_INSERT = 1073741897;
  SDLK_HOME = 1073741898;
  SDLK_PAGEUP = 1073741899;
  SDLK_DELETE = 127;
  SDLK_END = 1073741901;
  SDLK_PAGEDOWN = 1073741902;
  SDLK_RIGHT = 1073741903;
  SDLK_LEFT = 1073741904;
  SDLK_DOWN = 1073741905;
  SDLK_UP = 1073741906;
  SDLK_NUMLOCKCLEAR = 1073741907;
  SDLK_KP_DIVIDE = 1073741908;
  SDLK_KP_MULTIPLY = 1073741909;
  SDLK_KP_MINUS = 1073741910;
  SDLK_KP_PLUS = 1073741911;
  SDLK_KP_ENTER = 1073741912;
  SDLK_KP_1 = 1073741913;
  SDLK_KP_2 = 1073741914;
  SDLK_KP_3 = 1073741915;
  SDLK_KP_4 = 1073741916;
  SDLK_KP_5 = 1073741917;
  SDLK_KP_6 = 1073741918;
  SDLK_KP_7 = 1073741919;
  SDLK_KP_8 = 1073741920;
  SDLK_KP_9 = 1073741921;
  SDLK_KP_0 = 1073741922;
  SDLK_KP_PERIOD = 1073741923;
  SDLK_APPLICATION = 1073741925;
  SDLK_POWER = 1073741926;
  SDLK_KP_EQUALS = 1073741927;
  SDLK_F13 = 1073741928;
  SDLK_F14 = 1073741929;
  SDLK_F15 = 1073741930;
  SDLK_F16 = 1073741931;
  SDLK_F17 = 1073741932;
  SDLK_F18 = 1073741933;
  SDLK_F19 = 1073741934;
  SDLK_F20 = 1073741935;
  SDLK_F21 = 1073741936;
  SDLK_F22 = 1073741937;
  SDLK_F23 = 1073741938;
  SDLK_F24 = 1073741939;
  SDLK_EXECUTE = 1073741940;
  SDLK_HELP = 1073741941;
  SDLK_MENU = 1073741942;
  SDLK_SELECT = 1073741943;
  SDLK_STOP = 1073741944;
  SDLK_AGAIN = 1073741945;
  SDLK_UNDO = 1073741946;
  SDLK_CUT = 1073741947;
  SDLK_COPY = 1073741948;
  SDLK_PASTE = 1073741949;
  SDLK_FIND = 1073741950;
  SDLK_MUTE = 1073741951;
  SDLK_VOLUMEUP = 1073741952;
  SDLK_VOLUMEDOWN = 1073741953;
  SDLK_KP_COMMA = 1073741957;
  SDLK_KP_EQUALSAS400 = 1073741958;
  SDLK_ALTERASE = 1073741977;
  SDLK_SYSREQ = 1073741978;
  SDLK_CANCEL = 1073741979;
  SDLK_CLEAR = 1073741980;
  SDLK_PRIOR = 1073741981;
  SDLK_RETURN2 = 1073741982;
  SDLK_SEPARATOR = 1073741983;
  SDLK_OUT = 1073741984;
  SDLK_OPER = 1073741985;
  SDLK_CLEARAGAIN = 1073741986;
  SDLK_CRSEL = 1073741987;
  SDLK_EXSEL = 1073741988;
  SDLK_KP_00 = 1073742000;
  SDLK_KP_000 = 1073742001;
  SDLK_THOUSANDSSEPARATOR = 1073742002;
  SDLK_DECIMALSEPARATOR = 1073742003;
  SDLK_CURRENCYUNIT = 1073742004;
  SDLK_CURRENCYSUBUNIT = 1073742005;
  SDLK_KP_LEFTPAREN = 1073742006;
  SDLK_KP_RIGHTPAREN = 1073742007;
  SDLK_KP_LEFTBRACE = 1073742008;
  SDLK_KP_RIGHTBRACE = 1073742009;
  SDLK_KP_TAB = 1073742010;
  SDLK_KP_BACKSPACE = 1073742011;
  SDLK_KP_A = 1073742012;
  SDLK_KP_B = 1073742013;
  SDLK_KP_C = 1073742014;
  SDLK_KP_D = 1073742015;
  SDLK_KP_E = 1073742016;
  SDLK_KP_F = 1073742017;
  SDLK_KP_XOR = 1073742018;
  SDLK_KP_POWER = 1073742019;
  SDLK_KP_PERCENT = 1073742020;
  SDLK_KP_LESS = 1073742021;
  SDLK_KP_GREATER = 1073742022;
  SDLK_KP_AMPERSAND = 1073742023;
  SDLK_KP_DBLAMPERSAND = 1073742024;
  SDLK_KP_VERTICALBAR = 1073742025;
  SDLK_KP_DBLVERTICALBAR = 1073742026;
  SDLK_KP_COLON = 1073742027;
  SDLK_KP_HASH = 1073742028;
  SDLK_KP_SPACE = 1073742029;
  SDLK_KP_AT = 1073742030;
  SDLK_KP_EXCLAM = 1073742031;
  SDLK_KP_MEMSTORE = 1073742032;
  SDLK_KP_MEMRECALL = 1073742033;
  SDLK_KP_MEMCLEAR = 1073742034;
  SDLK_KP_MEMADD = 1073742035;
  SDLK_KP_MEMSUBTRACT = 1073742036;
  SDLK_KP_MEMMULTIPLY = 1073742037;
  SDLK_KP_MEMDIVIDE = 1073742038;
  SDLK_KP_PLUSMINUS = 1073742039;
  SDLK_KP_CLEAR = 1073742040;
  SDLK_KP_CLEARENTRY = 1073742041;
  SDLK_KP_BINARY = 1073742042;
  SDLK_KP_OCTAL = 1073742043;
  SDLK_KP_DECIMAL = 1073742044;
  SDLK_KP_HEXADECIMAL = 1073742045;
  SDLK_LCTRL = 1073742048;
  SDLK_LSHIFT = 1073742049;
  SDLK_LALT = 1073742050;
  SDLK_LGUI = 1073742051;
  SDLK_RCTRL = 1073742052;
  SDLK_RSHIFT = 1073742053;
  SDLK_RALT = 1073742054;
  SDLK_RGUI = 1073742055;
  SDLK_MODE = 1073742081;
  SDLK_AUDIONEXT = 1073742082;
  SDLK_AUDIOPREV = 1073742083;
  SDLK_AUDIOSTOP = 1073742084;
  SDLK_AUDIOPLAY = 1073742085;
  SDLK_AUDIOMUTE = 1073742086;
  SDLK_MEDIASELECT = 1073742087;
  SDLK_WWW = 1073742088;
  SDLK_MAIL = 1073742089;
  SDLK_CALCULATOR = 1073742090;
  SDLK_COMPUTER = 1073742091;
  SDLK_AC_SEARCH = 1073742092;
  SDLK_AC_HOME = 1073742093;
  SDLK_AC_BACK = 1073742094;
  SDLK_AC_FORWARD = 1073742095;
  SDLK_AC_STOP = 1073742096;
  SDLK_AC_REFRESH = 1073742097;
  SDLK_AC_BOOKMARKS = 1073742098;
  SDLK_BRIGHTNESSDOWN = 1073742099;
  SDLK_BRIGHTNESSUP = 1073742100;
  SDLK_DISPLAYSWITCH = 1073742101;
  SDLK_KBDILLUMTOGGLE = 1073742102;
  SDLK_KBDILLUMDOWN = 1073742103;
  SDLK_KBDILLUMUP = 1073742104;
  SDLK_EJECT = 1073742105;
  SDLK_SLEEP = 1073742106;
  SDLK_APP1 = 1073742107;
  SDLK_APP2 = 1073742108;
  SDLK_AUDIOREWIND = 1073742109;
  SDLK_AUDIOFASTFORWARD = 1073742110;

  KMOD_NONE = 0;
  KMOD_LSHIFT = 1;
  KMOD_RSHIFT = 2;
  KMOD_LCTRL = 64;
  KMOD_RCTRL = 128;
  KMOD_LALT = 256;
  KMOD_RALT = 512;
  KMOD_LGUI = 1024;
  KMOD_RGUI = 2048;
  KMOD_NUM = 4096;
  KMOD_CAPS = 8192;
  KMOD_MODE = 16384;
  KMOD_SCROLL = 32768;
  KMOD_CTRL = 192;
  KMOD_SHIFT = 3;
  KMOD_ALT = 768;
  KMOD_GUI = 3072;
  KMOD_RESERVED = 32768;

  SDL_SYSTEM_CURSOR_ARROW = 0;
  SDL_SYSTEM_CURSOR_IBEAM = 1;
  SDL_SYSTEM_CURSOR_WAIT = 2;
  SDL_SYSTEM_CURSOR_CROSSHAIR = 3;
  SDL_SYSTEM_CURSOR_WAITARROW = 4;
  SDL_SYSTEM_CURSOR_SIZENWSE = 5;
  SDL_SYSTEM_CURSOR_SIZENESW = 6;
  SDL_SYSTEM_CURSOR_SIZEWE = 7;
  SDL_SYSTEM_CURSOR_SIZENS = 8;
  SDL_SYSTEM_CURSOR_SIZEALL = 9;
  SDL_SYSTEM_CURSOR_NO = 10;
  SDL_SYSTEM_CURSOR_HAND = 11;
  SDL_NUM_SYSTEM_CURSORS = 12;

  SDL_MOUSEWHEEL_NORMAL = 0;
  SDL_MOUSEWHEEL_FLIPPED = 1;

  SDL_JOYSTICK_TYPE_UNKNOWN = 0;
  SDL_JOYSTICK_TYPE_GAMECONTROLLER = 1;
  SDL_JOYSTICK_TYPE_WHEEL = 2;
  SDL_JOYSTICK_TYPE_ARCADE_STICK = 3;
  SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4;
  SDL_JOYSTICK_TYPE_DANCE_PAD = 5;
  SDL_JOYSTICK_TYPE_GUITAR = 6;
  SDL_JOYSTICK_TYPE_DRUM_KIT = 7;
  SDL_JOYSTICK_TYPE_ARCADE_PAD = 8;
  SDL_JOYSTICK_TYPE_THROTTLE = 9;

  SDL_JOYSTICK_POWER_UNKNOWN = -1;
  SDL_JOYSTICK_POWER_EMPTY = 0;
  SDL_JOYSTICK_POWER_LOW = 1;
  SDL_JOYSTICK_POWER_MEDIUM = 2;
  SDL_JOYSTICK_POWER_FULL = 3;
  SDL_JOYSTICK_POWER_WIRED = 4;
  SDL_JOYSTICK_POWER_MAX = 5;

  SDL_SENSOR_INVALID = -1;
  SDL_SENSOR_UNKNOWN = 0;
  SDL_SENSOR_ACCEL = 1;
  SDL_SENSOR_GYRO = 2;

  SDL_CONTROLLER_TYPE_UNKNOWN = 0;
  SDL_CONTROLLER_TYPE_XBOX360 = 1;
  SDL_CONTROLLER_TYPE_XBOXONE = 2;
  SDL_CONTROLLER_TYPE_PS3 = 3;
  SDL_CONTROLLER_TYPE_PS4 = 4;
  SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO = 5;
  SDL_CONTROLLER_TYPE_VIRTUAL = 6;
  SDL_CONTROLLER_TYPE_PS5 = 7;
  SDL_CONTROLLER_TYPE_AMAZON_LUNA = 8;
  SDL_CONTROLLER_TYPE_GOOGLE_STADIA = 9;

  SDL_CONTROLLER_BINDTYPE_NONE = 0;
  SDL_CONTROLLER_BINDTYPE_BUTTON = 1;
  SDL_CONTROLLER_BINDTYPE_AXIS = 2;
  SDL_CONTROLLER_BINDTYPE_HAT = 3;

  SDL_CONTROLLER_AXIS_INVALID = -1;
  SDL_CONTROLLER_AXIS_LEFTX = 0;
  SDL_CONTROLLER_AXIS_LEFTY = 1;
  SDL_CONTROLLER_AXIS_RIGHTX = 2;
  SDL_CONTROLLER_AXIS_RIGHTY = 3;
  SDL_CONTROLLER_AXIS_TRIGGERLEFT = 4;
  SDL_CONTROLLER_AXIS_TRIGGERRIGHT = 5;
  SDL_CONTROLLER_AXIS_MAX = 6;

  SDL_CONTROLLER_BUTTON_INVALID = -1;
  SDL_CONTROLLER_BUTTON_A = 0;
  SDL_CONTROLLER_BUTTON_B = 1;
  SDL_CONTROLLER_BUTTON_X = 2;
  SDL_CONTROLLER_BUTTON_Y = 3;
  SDL_CONTROLLER_BUTTON_BACK = 4;
  SDL_CONTROLLER_BUTTON_GUIDE = 5;
  SDL_CONTROLLER_BUTTON_START = 6;
  SDL_CONTROLLER_BUTTON_LEFTSTICK = 7;
  SDL_CONTROLLER_BUTTON_RIGHTSTICK = 8;
  SDL_CONTROLLER_BUTTON_LEFTSHOULDER = 9;
  SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = 10;
  SDL_CONTROLLER_BUTTON_DPAD_UP = 11;
  SDL_CONTROLLER_BUTTON_DPAD_DOWN = 12;
  SDL_CONTROLLER_BUTTON_DPAD_LEFT = 13;
  SDL_CONTROLLER_BUTTON_DPAD_RIGHT = 14;
  SDL_CONTROLLER_BUTTON_MISC1 = 15;
  SDL_CONTROLLER_BUTTON_PADDLE1 = 16;
  SDL_CONTROLLER_BUTTON_PADDLE2 = 17;
  SDL_CONTROLLER_BUTTON_PADDLE3 = 18;
  SDL_CONTROLLER_BUTTON_PADDLE4 = 19;
  SDL_CONTROLLER_BUTTON_TOUCHPAD = 20;
  SDL_CONTROLLER_BUTTON_MAX = 21;

  SDL_TOUCH_DEVICE_INVALID = -1;
  SDL_TOUCH_DEVICE_DIRECT = 0;
  SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1;
  SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2;

  SDL_FIRSTEVENT = 0;
  SDL_QUIT_ = 256;
  SDL_APP_TERMINATING = 257;
  SDL_APP_LOWMEMORY = 258;
  SDL_APP_WILLENTERBACKGROUND = 259;
  SDL_APP_DIDENTERBACKGROUND = 260;
  SDL_APP_WILLENTERFOREGROUND = 261;
  SDL_APP_DIDENTERFOREGROUND = 262;
  SDL_LOCALECHANGED = 263;
  SDL_DISPLAYEVENT_ = 336;
  SDL_WINDOWEVENT_ = 512;
  SDL_SYSWMEVENT_ = 513;
  SDL_KEYDOWN = 768;
  SDL_KEYUP = 769;
  SDL_TEXTEDITING = 770;
  SDL_TEXTINPUT = 771;
  SDL_KEYMAPCHANGED = 772;
  SDL_TEXTEDITING_EXT = 773;
  SDL_MOUSEMOTION = 1024;
  SDL_MOUSEBUTTONDOWN = 1025;
  SDL_MOUSEBUTTONUP = 1026;
  SDL_MOUSEWHEEL = 1027;
  SDL_JOYAXISMOTION = 1536;
  SDL_JOYBALLMOTION = 1537;
  SDL_JOYHATMOTION = 1538;
  SDL_JOYBUTTONDOWN = 1539;
  SDL_JOYBUTTONUP = 1540;
  SDL_JOYDEVICEADDED = 1541;
  SDL_JOYDEVICEREMOVED = 1542;
  SDL_CONTROLLERAXISMOTION = 1616;
  SDL_CONTROLLERBUTTONDOWN = 1617;
  SDL_CONTROLLERBUTTONUP = 1618;
  SDL_CONTROLLERDEVICEADDED = 1619;
  SDL_CONTROLLERDEVICEREMOVED = 1620;
  SDL_CONTROLLERDEVICEREMAPPED = 1621;
  SDL_CONTROLLERTOUCHPADDOWN = 1622;
  SDL_CONTROLLERTOUCHPADMOTION = 1623;
  SDL_CONTROLLERTOUCHPADUP = 1624;
  SDL_CONTROLLERSENSORUPDATE = 1625;
  SDL_FINGERDOWN = 1792;
  SDL_FINGERUP = 1793;
  SDL_FINGERMOTION = 1794;
  SDL_DOLLARGESTURE = 2048;
  SDL_DOLLARRECORD = 2049;
  SDL_MULTIGESTURE = 2050;
  SDL_CLIPBOARDUPDATE = 2304;
  SDL_DROPFILE = 4096;
  SDL_DROPTEXT = 4097;
  SDL_DROPBEGIN = 4098;
  SDL_DROPCOMPLETE = 4099;
  SDL_AUDIODEVICEADDED = 4352;
  SDL_AUDIODEVICEREMOVED = 4353;
  SDL_SENSORUPDATE_ = 4608;
  SDL_RENDER_TARGETS_RESET = 8192;
  SDL_RENDER_DEVICE_RESET = 8193;
  SDL_POLLSENTINEL = 32512;
  SDL_USEREVENT_ = 32768;
  SDL_LASTEVENT = 65535;

  SDL_ADDEVENT = 0;
  SDL_PEEKEVENT = 1;
  SDL_GETEVENT = 2;

  SDL_HINT_DEFAULT = 0;
  SDL_HINT_NORMAL = 1;
  SDL_HINT_OVERRIDE = 2;

  SDL_LOG_CATEGORY_APPLICATION = 0;
  SDL_LOG_CATEGORY_ERROR = 1;
  SDL_LOG_CATEGORY_ASSERT = 2;
  SDL_LOG_CATEGORY_SYSTEM = 3;
  SDL_LOG_CATEGORY_AUDIO = 4;
  SDL_LOG_CATEGORY_VIDEO = 5;
  SDL_LOG_CATEGORY_RENDER = 6;
  SDL_LOG_CATEGORY_INPUT = 7;
  SDL_LOG_CATEGORY_TEST = 8;
  SDL_LOG_CATEGORY_RESERVED1 = 9;
  SDL_LOG_CATEGORY_RESERVED2 = 10;
  SDL_LOG_CATEGORY_RESERVED3 = 11;
  SDL_LOG_CATEGORY_RESERVED4 = 12;
  SDL_LOG_CATEGORY_RESERVED5 = 13;
  SDL_LOG_CATEGORY_RESERVED6 = 14;
  SDL_LOG_CATEGORY_RESERVED7 = 15;
  SDL_LOG_CATEGORY_RESERVED8 = 16;
  SDL_LOG_CATEGORY_RESERVED9 = 17;
  SDL_LOG_CATEGORY_RESERVED10 = 18;
  SDL_LOG_CATEGORY_CUSTOM = 19;

  SDL_LOG_PRIORITY_VERBOSE = 1;
  SDL_LOG_PRIORITY_DEBUG = 2;
  SDL_LOG_PRIORITY_INFO = 3;
  SDL_LOG_PRIORITY_WARN = 4;
  SDL_LOG_PRIORITY_ERROR = 5;
  SDL_LOG_PRIORITY_CRITICAL = 6;
  SDL_NUM_LOG_PRIORITIES = 7;

  SDL_MESSAGEBOX_ERROR = 16;
  SDL_MESSAGEBOX_WARNING = 32;
  SDL_MESSAGEBOX_INFORMATION = 64;
  SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 128;
  SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 256;

  SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 1;
  SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 2;

  SDL_MESSAGEBOX_COLOR_BACKGROUND = 0;
  SDL_MESSAGEBOX_COLOR_TEXT = 1;
  SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2;
  SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3;
  SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4;
  SDL_MESSAGEBOX_COLOR_MAX = 5;

  SDL_RENDERER_SOFTWARE = 1;
  SDL_RENDERER_ACCELERATED = 2;
  SDL_RENDERER_PRESENTVSYNC = 4;
  SDL_RENDERER_TARGETTEXTURE = 8;

  SDL_ScaleModeNearest = 0;
  SDL_ScaleModeLinear = 1;
  SDL_ScaleModeBest = 2;

  SDL_TEXTUREACCESS_STATIC = 0;
  SDL_TEXTUREACCESS_STREAMING = 1;
  SDL_TEXTUREACCESS_TARGET = 2;

  SDL_FLIP_NONE = 0;
  SDL_FLIP_HORIZONTAL = 1;
  SDL_FLIP_VERTICAL = 2;

  ShapeModeDefault = 0;
  ShapeModeBinarizeAlpha = 1;
  ShapeModeReverseBinarizeAlpha = 2;
  ShapeModeColorKey = 3;

  MIX_INIT_FLAC = 1;
  MIX_INIT_MOD = 2;
  MIX_INIT_MP3 = 8;
  MIX_INIT_OGG = 16;
  MIX_INIT_MID = 32;
  MIX_INIT_OPUS = 64;

  MIX_NO_FADING = 0;
  MIX_FADING_OUT = 1;
  MIX_FADING_IN = 2;

  MUS_NONE = 0;
  MUS_CMD = 1;
  MUS_WAV = 2;
  MUS_MOD = 3;
  MUS_MID = 4;
  MUS_OGG = 5;
  MUS_MP3 = 6;
  MUS_MP3_MAD_UNUSED = 7;
  MUS_FLAC = 8;
  MUS_MODPLUG_UNUSED = 9;
  MUS_OPUS = 10;

  TTF_DIRECTION_LTR = 0;
  TTF_DIRECTION_RTL = 1;
  TTF_DIRECTION_TTB = 2;
  TTF_DIRECTION_BTT = 3;

  IMG_INIT_JPG = 1;
  IMG_INIT_PNG = 2;
  IMG_INIT_TIF = 4;
  IMG_INIT_WEBP = 8;
  IMG_INIT_JXL = 16;
  IMG_INIT_AVIF = 32;

  SDL_POWERSTATE_UNKNOWN = 0;
  SDL_POWERSTATE_ON_BATTERY = 1;
  SDL_POWERSTATE_NO_BATTERY = 2;
  SDL_POWERSTATE_CHARGING = 3;
  SDL_POWERSTATE_CHARGED = 4;

  SDL_TEXTUREMODULATE_NONE = 0;
  SDL_TEXTUREMODULATE_COLOR = 1;
  SDL_TEXTUREMODULATE_ALPHA = 2;

type
  SDL_bool = Integer;
  PSDL_bool = ^SDL_bool;

  SDL_DUMMY_ENUM = Integer;
  PSDL_DUMMY_ENUM = ^SDL_DUMMY_ENUM;

  SDL_AssertState = Integer;
  PSDL_AssertState = ^SDL_AssertState;

  SDL_errorcode = Integer;
  PSDL_errorcode = ^SDL_errorcode;

  SDL_ThreadPriority = Integer;
  PSDL_ThreadPriority = ^SDL_ThreadPriority;

  SDL_AudioStatus = Integer;
  PSDL_AudioStatus = ^SDL_AudioStatus;

  SDL_PixelType = Integer;
  PSDL_PixelType = ^SDL_PixelType;

  SDL_BitmapOrder = Integer;
  PSDL_BitmapOrder = ^SDL_BitmapOrder;

  SDL_PackedOrder = Integer;
  PSDL_PackedOrder = ^SDL_PackedOrder;

  SDL_ArrayOrder = Integer;
  PSDL_ArrayOrder = ^SDL_ArrayOrder;

  SDL_PackedLayout = Integer;
  PSDL_PackedLayout = ^SDL_PackedLayout;

  SDL_PixelFormatEnum = Integer;
  PSDL_PixelFormatEnum = ^SDL_PixelFormatEnum;

  SDL_BlendMode = Integer;
  PSDL_BlendMode = ^SDL_BlendMode;

  SDL_BlendOperation = Integer;
  PSDL_BlendOperation = ^SDL_BlendOperation;

  SDL_BlendFactor = Integer;
  PSDL_BlendFactor = ^SDL_BlendFactor;

  SDL_YUV_CONVERSION_MODE = Integer;
  PSDL_YUV_CONVERSION_MODE = ^SDL_YUV_CONVERSION_MODE;

  SDL_WindowFlags = Integer;
  PSDL_WindowFlags = ^SDL_WindowFlags;

  SDL_WindowEventID = Integer;
  PSDL_WindowEventID = ^SDL_WindowEventID;

  SDL_DisplayEventID = Integer;
  PSDL_DisplayEventID = ^SDL_DisplayEventID;

  SDL_DisplayOrientation = Integer;
  PSDL_DisplayOrientation = ^SDL_DisplayOrientation;

  SDL_FlashOperation = Integer;
  PSDL_FlashOperation = ^SDL_FlashOperation;

  SDL_GLattr = Integer;
  PSDL_GLattr = ^SDL_GLattr;

  SDL_GLprofile = Integer;
  PSDL_GLprofile = ^SDL_GLprofile;

  SDL_GLcontextFlag = Integer;
  PSDL_GLcontextFlag = ^SDL_GLcontextFlag;

  SDL_GLcontextReleaseFlag = Integer;
  PSDL_GLcontextReleaseFlag = ^SDL_GLcontextReleaseFlag;

  SDL_GLContextResetNotification = Integer;
  PSDL_GLContextResetNotification = ^SDL_GLContextResetNotification;

  SDL_HitTestResult = Integer;
  PSDL_HitTestResult = ^SDL_HitTestResult;

  SDL_Scancode = Integer;
  PSDL_Scancode = ^SDL_Scancode;

  SDL_KeyCode = Integer;
  PSDL_KeyCode = ^SDL_KeyCode;

  SDL_Keymod = Integer;
  PSDL_Keymod = ^SDL_Keymod;

  SDL_SystemCursor = Integer;
  PSDL_SystemCursor = ^SDL_SystemCursor;

  SDL_MouseWheelDirection = Integer;
  PSDL_MouseWheelDirection = ^SDL_MouseWheelDirection;

  SDL_JoystickType = Integer;
  PSDL_JoystickType = ^SDL_JoystickType;

  SDL_JoystickPowerLevel = Integer;
  PSDL_JoystickPowerLevel = ^SDL_JoystickPowerLevel;

  SDL_SensorType = Integer;
  PSDL_SensorType = ^SDL_SensorType;

  SDL_GameControllerType = Integer;
  PSDL_GameControllerType = ^SDL_GameControllerType;

  SDL_GameControllerBindType = Integer;
  PSDL_GameControllerBindType = ^SDL_GameControllerBindType;

  SDL_GameControllerAxis = Integer;
  PSDL_GameControllerAxis = ^SDL_GameControllerAxis;

  SDL_GameControllerButton = Integer;
  PSDL_GameControllerButton = ^SDL_GameControllerButton;

  SDL_TouchDeviceType = Integer;
  PSDL_TouchDeviceType = ^SDL_TouchDeviceType;

  SDL_EventType = Integer;
  PSDL_EventType = ^SDL_EventType;

  SDL_eventaction = Integer;
  PSDL_eventaction = ^SDL_eventaction;

  SDL_HintPriority = Integer;
  PSDL_HintPriority = ^SDL_HintPriority;

  SDL_LogCategory = Integer;
  PSDL_LogCategory = ^SDL_LogCategory;

  SDL_LogPriority = Integer;
  PSDL_LogPriority = ^SDL_LogPriority;

  SDL_MessageBoxFlags = Integer;
  PSDL_MessageBoxFlags = ^SDL_MessageBoxFlags;

  SDL_MessageBoxButtonFlags = Integer;
  PSDL_MessageBoxButtonFlags = ^SDL_MessageBoxButtonFlags;

  SDL_MessageBoxColorType = Integer;
  PSDL_MessageBoxColorType = ^SDL_MessageBoxColorType;

  SDL_PowerState = Integer;
  PSDL_PowerState = ^SDL_PowerState;

  SDL_RendererFlags = Integer;
  PSDL_RendererFlags = ^SDL_RendererFlags;

  SDL_ScaleMode = Integer;
  PSDL_ScaleMode = ^SDL_ScaleMode;

  SDL_TextureAccess = Integer;
  PSDL_TextureAccess = ^SDL_TextureAccess;

  SDL_TextureModulate = Integer;
  PSDL_TextureModulate = ^SDL_TextureModulate;

  SDL_RendererFlip = Integer;
  PSDL_RendererFlip = ^SDL_RendererFlip;

  WindowShapeMode = Integer;
  PWindowShapeMode = ^WindowShapeMode;

  MIX_InitFlags = Integer;
  PMIX_InitFlags = ^MIX_InitFlags;

  Mix_Fading = Integer;
  PMix_Fading = ^Mix_Fading;

  Mix_MusicType = Integer;
  PMix_MusicType = ^Mix_MusicType;

  TTF_Direction = Integer;
  PTTF_Direction = ^TTF_Direction;

  IMG_InitFlags = Integer;
  PIMG_InitFlags = ^IMG_InitFlags;

  PPUTF8Char = ^PUTF8Char;
  PWideChar = ^WideChar;
  PNativeUInt = ^NativeUInt;
  P_SDL_iconv_t = Pointer;
  PP_SDL_iconv_t = ^P_SDL_iconv_t;
  PSDL_semaphore = Pointer;
  PPSDL_semaphore = ^PSDL_semaphore;
  P_SDL_AudioStream = Pointer;
  PP_SDL_AudioStream = ^P_SDL_AudioStream;
  PSDL_BlitMap = Pointer;
  PPSDL_BlitMap = ^PSDL_BlitMap;
  P_SDL_Joystick = Pointer;
  PP_SDL_Joystick = ^P_SDL_Joystick;
  P_SDL_Sensor = Pointer;
  PP_SDL_Sensor = ^P_SDL_Sensor;
  P_SDL_GameController = Pointer;
  PP_SDL_GameController = ^P_SDL_GameController;
  P_SDL_Haptic = Pointer;
  PP_SDL_Haptic = ^P_SDL_Haptic;
  PSDL_hid_device_ = Pointer;
  PPSDL_hid_device_ = ^PSDL_hid_device_;
  P_Mix_Music = Pointer;
  PP_Mix_Music = ^P_Mix_Music;
  P_TCPsocket = Pointer;
  PP_TCPsocket = ^P_TCPsocket;
  P_UDPsocket = Pointer;
  PP_UDPsocket = ^P_UDPsocket;
  P_SDLNet_SocketSet = Pointer;
  PP_SDLNet_SocketSet = ^P_SDLNet_SocketSet;
  P_TTF_Font = Pointer;
  PP_TTF_Font = ^P_TTF_Font;
  PSDL_AssertData = ^SDL_AssertData;
  PSDL_atomic_t = ^SDL_atomic_t;
  PSDL_RWops = ^SDL_RWops;
  PSDL_AudioSpec = ^SDL_AudioSpec;
  PSDL_AudioCVT = ^SDL_AudioCVT;
  PSDL_Color = ^SDL_Color;
  PSDL_Palette = ^SDL_Palette;
  PSDL_PixelFormat = ^SDL_PixelFormat;
  PSDL_Point = ^SDL_Point;
  PSDL_FPoint = ^SDL_FPoint;
  PSDL_Rect = ^SDL_Rect;
  PSDL_FRect = ^SDL_FRect;
  PSDL_Surface = ^SDL_Surface;
  PPSDL_Surface = ^PSDL_Surface;
  PSDL_DisplayMode = ^SDL_DisplayMode;
  PSDL_Keysym = ^SDL_Keysym;
  PSDL_JoystickGUID = ^SDL_JoystickGUID;
  PSDL_GameControllerButtonBind = ^SDL_GameControllerButtonBind;
  PSDL_Finger = ^SDL_Finger;
  PSDL_CommonEvent = ^SDL_CommonEvent;
  PSDL_DisplayEvent = ^SDL_DisplayEvent;
  PSDL_WindowEvent = ^SDL_WindowEvent;
  PSDL_KeyboardEvent = ^SDL_KeyboardEvent;
  PSDL_TextEditingEvent = ^SDL_TextEditingEvent;
  PSDL_TextEditingExtEvent = ^SDL_TextEditingExtEvent;
  PSDL_TextInputEvent = ^SDL_TextInputEvent;
  PSDL_MouseMotionEvent = ^SDL_MouseMotionEvent;
  PSDL_MouseButtonEvent = ^SDL_MouseButtonEvent;
  PSDL_MouseWheelEvent = ^SDL_MouseWheelEvent;
  PSDL_JoyAxisEvent = ^SDL_JoyAxisEvent;
  PSDL_JoyBallEvent = ^SDL_JoyBallEvent;
  PSDL_JoyHatEvent = ^SDL_JoyHatEvent;
  PSDL_JoyButtonEvent = ^SDL_JoyButtonEvent;
  PSDL_JoyDeviceEvent = ^SDL_JoyDeviceEvent;
  PSDL_ControllerAxisEvent = ^SDL_ControllerAxisEvent;
  PSDL_ControllerButtonEvent = ^SDL_ControllerButtonEvent;
  PSDL_ControllerDeviceEvent = ^SDL_ControllerDeviceEvent;
  PSDL_ControllerTouchpadEvent = ^SDL_ControllerTouchpadEvent;
  PSDL_ControllerSensorEvent = ^SDL_ControllerSensorEvent;
  PSDL_AudioDeviceEvent = ^SDL_AudioDeviceEvent;
  PSDL_TouchFingerEvent = ^SDL_TouchFingerEvent;
  PSDL_MultiGestureEvent = ^SDL_MultiGestureEvent;
  PSDL_DollarGestureEvent = ^SDL_DollarGestureEvent;
  PSDL_DropEvent = ^SDL_DropEvent;
  PSDL_SensorEvent = ^SDL_SensorEvent;
  PSDL_QuitEvent = ^SDL_QuitEvent;
  PSDL_OSEvent = ^SDL_OSEvent;
  PSDL_UserEvent = ^SDL_UserEvent;
  PSDL_SysWMEvent = ^SDL_SysWMEvent;
  PSDL_HapticDirection = ^SDL_HapticDirection;
  PSDL_HapticConstant = ^SDL_HapticConstant;
  PSDL_HapticCondition = ^SDL_HapticCondition;
  PSDL_HapticRamp = ^SDL_HapticRamp;
  PSDL_HapticLeftRight = ^SDL_HapticLeftRight;
  PSDL_HapticCustom = ^SDL_HapticCustom;
  PSDL_hid_device_info = ^SDL_hid_device_info;
  PSDL_MessageBoxButtonData = ^SDL_MessageBoxButtonData;
  PSDL_MessageBoxColor = ^SDL_MessageBoxColor;
  PSDL_MessageBoxColorScheme = ^SDL_MessageBoxColorScheme;
  PSDL_MessageBoxData = ^SDL_MessageBoxData;
  PSDL_RendererInfo = ^SDL_RendererInfo;
  PSDL_Vertex = ^SDL_Vertex;
  PSDL_WindowShapeMode = ^SDL_WindowShapeMode;
  PSDL_version = ^SDL_version;
  PSDL_Locale = ^SDL_Locale;
  PMix_Chunk = ^Mix_Chunk;
  PIPaddress = ^IPaddress;
  PUDPpacket = ^UDPpacket;
  PPUDPpacket = ^PUDPpacket;
  P_SDLNet_GenericSocket = ^_SDLNet_GenericSocket;
  PIMG_Animation = ^IMG_Animation;

  Sint8 = Int8;
  PUint8 = ^Uint8;
  PPUint8 = ^PUint8;
  Sint16 = Int16;
  PSint16 = ^Sint16;
  PUint16 = ^Uint16;
  Sint32 = Int32;
  PUint32 = ^Uint32;
  Sint64 = Int64;

  SDL_malloc_func = function(size: NativeUInt): Pointer; cdecl;
  PSDL_malloc_func = ^SDL_malloc_func;

  SDL_calloc_func = function(nmemb: NativeUInt; size: NativeUInt): Pointer; cdecl;
  PSDL_calloc_func = ^SDL_calloc_func;

  SDL_realloc_func = function(mem: Pointer; size: NativeUInt): Pointer; cdecl;
  PSDL_realloc_func = ^SDL_realloc_func;

  SDL_free_func = procedure(mem: Pointer); cdecl;
  PSDL_free_func = ^SDL_free_func;
  SDL_iconv_t = Pointer;
  PSDL_iconv_t = ^SDL_iconv_t;

  SDL_main_func = function(argc: Integer; argv: PPUTF8Char): Integer; cdecl;

  SDL_AssertData = record
    always_ignore: Integer;
    trigger_count: Cardinal;
    condition: PUTF8Char;
    filename: PUTF8Char;
    linenum: Integer;
    function_: PUTF8Char;
    next: PSDL_AssertData;
  end;

  SDL_AssertionHandler = function(const data: PSDL_AssertData; userdata: Pointer): SDL_AssertState; cdecl;
  SDL_SpinLock = Integer;
  PSDL_SpinLock = ^SDL_SpinLock;

  SDL_atomic_t = record
    value: Integer;
  end;

  PSDL_mutex = Pointer;
  PPSDL_mutex = ^PSDL_mutex;
  PSDL_sem = Pointer;
  PPSDL_sem = ^PSDL_sem;
  PSDL_cond = Pointer;
  PPSDL_cond = ^PSDL_cond;
  PSDL_Thread = Pointer;
  PPSDL_Thread = ^PSDL_Thread;
  SDL_threadID_ = Cardinal;
  SDL_TLSID = Cardinal;

  SDL_ThreadFunction = function(data: Pointer): Integer; cdecl;
  pfnSDL_CurrentBeginThread_func = Pointer; //FIXME: define proper function type
                                            // for this later.

  pfnSDL_CurrentBeginThread = function(p1: Pointer; p2: Cardinal; func: pfnSDL_CurrentBeginThread_func; p4: Pointer; p5: Cardinal; p6: PCardinal): UIntPtr; cdecl;

  pfnSDL_CurrentEndThread = procedure(code: Cardinal); cdecl;

  _anonymous_type_1 = record
    data: Pointer;
    size: NativeUInt;
    left: NativeUInt;
  end;
  P_anonymous_type_1 = ^_anonymous_type_1;

  _anonymous_type_2 = record
    append: SDL_bool;
    h: Pointer;
    buffer: _anonymous_type_1;
  end;
  P_anonymous_type_2 = ^_anonymous_type_2;

  _anonymous_type_3 = record
    base: PUint8;
    here: PUint8;
    stop: PUint8;
  end;
  P_anonymous_type_3 = ^_anonymous_type_3;

  _anonymous_type_4 = record
    data1: Pointer;
    data2: Pointer;
  end;
  P_anonymous_type_4 = ^_anonymous_type_4;

  _anonymous_type_5 = record
    case Integer of
      0: (windowsio: _anonymous_type_2);
      1: (mem: _anonymous_type_3);
      2: (unknown: _anonymous_type_4);
  end;
  P_anonymous_type_5 = ^_anonymous_type_5;

  SDL_RWops = record
    size: function(context: PSDL_RWops): Sint64; cdecl;
    seek: function(context: PSDL_RWops; offset: Sint64; whence: Integer): Sint64; cdecl;
    read: function(context: PSDL_RWops; ptr: Pointer; size: NativeUInt; maxnum: NativeUInt): NativeUInt; cdecl;
    write: function(context: PSDL_RWops; const ptr: Pointer; size: NativeUInt; num: NativeUInt): NativeUInt; cdecl;
    close: function(context: PSDL_RWops): Integer; cdecl;
    type_: Uint32;
    hidden: _anonymous_type_5;
  end;

  SDL_AudioFormat = Uint16;

  SDL_AudioCallback = procedure(userdata: Pointer; stream: PUint8; len: Integer); cdecl;

  SDL_AudioSpec = record
    freq: Integer;
    format: SDL_AudioFormat;
    channels: Uint8;
    silence: Uint8;
    samples: Uint16;
    padding: Uint16;
    size: Uint32;
    callback: SDL_AudioCallback;
    userdata: Pointer;
  end;

  SDL_AudioFilter = procedure(cvt: PSDL_AudioCVT; format: SDL_AudioFormat); cdecl;

  SDL_AudioCVT = record
    needed: Integer;
    src_format: SDL_AudioFormat;
    dst_format: SDL_AudioFormat;
    rate_incr: Double;
    buf: PUint8;
    len: Integer;
    len_cvt: Integer;
    len_mult: Integer;
    len_ratio: Double;
    filters: array [0..9] of SDL_AudioFilter;
    filter_index: Integer;
  end;

  SDL_AudioDeviceID = Uint32;
  PSDL_AudioStream = Pointer;
  PPSDL_AudioStream = ^PSDL_AudioStream;

  SDL_Color = record
    r: Uint8;
    g: Uint8;
    b: Uint8;
    a: Uint8;
  end;

  SDL_Palette = record
    ncolors: Integer;
    colors: PSDL_Color;
    version: Uint32;
    refcount: Integer;
  end;

  SDL_PixelFormat = record
    format: Uint32;
    palette: PSDL_Palette;
    BitsPerPixel: Uint8;
    BytesPerPixel: Uint8;
    padding: array [0..1] of Uint8;
    Rmask: Uint32;
    Gmask: Uint32;
    Bmask: Uint32;
    Amask: Uint32;
    Rloss: Uint8;
    Gloss: Uint8;
    Bloss: Uint8;
    Aloss: Uint8;
    Rshift: Uint8;
    Gshift: Uint8;
    Bshift: Uint8;
    Ashift: Uint8;
    refcount: Integer;
    next: PSDL_PixelFormat;
  end;

  SDL_Point = record
    x: Integer;
    y: Integer;
  end;

  SDL_FPoint = record
    x: Single;
    y: Single;
  end;

  SDL_Rect = record
    x: Integer;
    y: Integer;
    w: Integer;
    h: Integer;
  end;

  SDL_FRect = record
    x: Single;
    y: Single;
    w: Single;
    h: Single;
  end;

  SDL_Surface = record
    flags: Uint32;
    format: PSDL_PixelFormat;
    w: Integer;
    h: Integer;
    pitch: Integer;
    pixels: Pointer;
    userdata: Pointer;
    locked: Integer;
    list_blitmap: Pointer;
    clip_rect: SDL_Rect;
    map: PSDL_BlitMap;
    refcount: Integer;
  end;

  SDL_blit = function(src: PSDL_Surface; srcrect: PSDL_Rect; dst: PSDL_Surface; dstrect: PSDL_Rect): Integer; cdecl;

  SDL_DisplayMode = record
    format: Uint32;
    w: Integer;
    h: Integer;
    refresh_rate: Integer;
    driverdata: Pointer;
  end;

  PSDL_Window = Pointer;
  PPSDL_Window = ^PSDL_Window;
  SDL_GLContext = Pointer;

  SDL_HitTest = function(win: PSDL_Window; const area: PSDL_Point; data: Pointer): SDL_HitTestResult; cdecl;

  SDL_Keysym = record
    scancode: SDL_Scancode;
    sym: SDL_Keycode;
    mod_: Uint16;
    unused: Uint32;
  end;

  PSDL_Cursor = Pointer;
  PPSDL_Cursor = ^PSDL_Cursor;
  PSDL_Joystick = Pointer;
  PPSDL_Joystick = ^PSDL_Joystick;

  SDL_JoystickGUID = record
    data: array [0..15] of Uint8;
  end;

  SDL_JoystickID = Sint32;
  PSDL_Sensor = Pointer;
  PPSDL_Sensor = ^PSDL_Sensor;
  SDL_SensorID = Sint32;
  PSDL_GameController = Pointer;
  PPSDL_GameController = ^PSDL_GameController;

  _anonymous_type_6 = record
    hat: Integer;
    hat_mask: Integer;
  end;
  P_anonymous_type_6 = ^_anonymous_type_6;

  _anonymous_type_7 = record
    case Integer of
      0: (button: Integer);
      1: (axis: Integer);
      2: (hat: _anonymous_type_6);
  end;
  P_anonymous_type_7 = ^_anonymous_type_7;

  SDL_GameControllerButtonBind = record
    bindType: SDL_GameControllerBindType;
    value: _anonymous_type_7;
  end;

  SDL_TouchID = Sint64;
  SDL_FingerID = Sint64;

  SDL_Finger = record
    id: SDL_FingerID;
    x: Single;
    y: Single;
    pressure: Single;
  end;

  SDL_GestureID = Sint64;

  SDL_CommonEvent = record
    type_: Uint32;
    timestamp: Uint32;
  end;

  SDL_DisplayEvent = record
    type_: Uint32;
    timestamp: Uint32;
    display: Uint32;
    event: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    data1: Sint32;
  end;

  SDL_WindowEvent = record
    type_: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    event: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    data1: Sint32;
    data2: Sint32;
  end;

  SDL_KeyboardEvent = record
    type_: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    state: Uint8;
    repeat_: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    keysym: SDL_Keysym;
  end;

  SDL_TextEditingEvent = record
    type_: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    text: array [0..31] of UTF8Char;
    start: Sint32;
    length: Sint32;
  end;

  SDL_TextEditingExtEvent = record
    type_: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    text: PUTF8Char;
    start: Sint32;
    length: Sint32;
  end;

  SDL_TextInputEvent = record
    type_: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    text: array [0..31] of UTF8Char;
  end;

  SDL_MouseMotionEvent = record
    type_: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    which: Uint32;
    state: Uint32;
    x: Sint32;
    y: Sint32;
    xrel: Sint32;
    yrel: Sint32;
  end;

  SDL_MouseButtonEvent = record
    type_: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    which: Uint32;
    button: Uint8;
    state: Uint8;
    clicks: Uint8;
    padding1: Uint8;
    x: Sint32;
    y: Sint32;
  end;

  SDL_MouseWheelEvent = record
    type_: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    which: Uint32;
    x: Sint32;
    y: Sint32;
    direction: Uint32;
    preciseX: Single;
    preciseY: Single;
  end;

  SDL_JoyAxisEvent = record
    type_: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    axis: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    value: Sint16;
    padding4: Uint16;
  end;

  SDL_JoyBallEvent = record
    type_: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    ball: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    xrel: Sint16;
    yrel: Sint16;
  end;

  SDL_JoyHatEvent = record
    type_: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    hat: Uint8;
    value: Uint8;
    padding1: Uint8;
    padding2: Uint8;
  end;

  SDL_JoyButtonEvent = record
    type_: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    button: Uint8;
    state: Uint8;
    padding1: Uint8;
    padding2: Uint8;
  end;

  SDL_JoyDeviceEvent = record
    type_: Uint32;
    timestamp: Uint32;
    which: Sint32;
  end;

  SDL_ControllerAxisEvent = record
    type_: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    axis: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    value: Sint16;
    padding4: Uint16;
  end;

  SDL_ControllerButtonEvent = record
    type_: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    button: Uint8;
    state: Uint8;
    padding1: Uint8;
    padding2: Uint8;
  end;

  SDL_ControllerDeviceEvent = record
    type_: Uint32;
    timestamp: Uint32;
    which: Sint32;
  end;

  SDL_ControllerTouchpadEvent = record
    type_: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    touchpad: Sint32;
    finger: Sint32;
    x: Single;
    y: Single;
    pressure: Single;
  end;

  SDL_ControllerSensorEvent = record
    type_: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    sensor: Sint32;
    data: array [0..2] of Single;
  end;

  SDL_AudioDeviceEvent = record
    type_: Uint32;
    timestamp: Uint32;
    which: Uint32;
    iscapture: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
  end;

  SDL_TouchFingerEvent = record
    type_: Uint32;
    timestamp: Uint32;
    touchId: SDL_TouchID;
    fingerId: SDL_FingerID;
    x: Single;
    y: Single;
    dx: Single;
    dy: Single;
    pressure: Single;
    windowID: Uint32;
  end;

  SDL_MultiGestureEvent = record
    type_: Uint32;
    timestamp: Uint32;
    touchId: SDL_TouchID;
    dTheta: Single;
    dDist: Single;
    x: Single;
    y: Single;
    numFingers: Uint16;
    padding: Uint16;
  end;

  SDL_DollarGestureEvent = record
    type_: Uint32;
    timestamp: Uint32;
    touchId: SDL_TouchID;
    gestureId: SDL_GestureID;
    numFingers: Uint32;
    error: Single;
    x: Single;
    y: Single;
  end;

  SDL_DropEvent = record
    type_: Uint32;
    timestamp: Uint32;
    file_: PUTF8Char;
    windowID: Uint32;
  end;

  SDL_SensorEvent = record
    type_: Uint32;
    timestamp: Uint32;
    which: Sint32;
    data: array [0..5] of Single;
  end;

  SDL_QuitEvent = record
    type_: Uint32;
    timestamp: Uint32;
  end;

  SDL_OSEvent = record
    type_: Uint32;
    timestamp: Uint32;
  end;

  SDL_UserEvent = record
    type_: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    code: Sint32;
    data1: Pointer;
    data2: Pointer;
  end;

  PSDL_SysWMmsg = Pointer;
  PPSDL_SysWMmsg = ^PSDL_SysWMmsg;

  SDL_SysWMEvent = record
    type_: Uint32;
    timestamp: Uint32;
    msg: PSDL_SysWMmsg;
  end;

  PSDL_Event = ^SDL_Event;
  SDL_Event = record
    case Integer of
      0: (type_: Uint32);
      1: (common: SDL_CommonEvent);
      2: (display: SDL_DisplayEvent);
      3: (window: SDL_WindowEvent);
      4: (key: SDL_KeyboardEvent);
      5: (edit: SDL_TextEditingEvent);
      6: (editExt: SDL_TextEditingExtEvent);
      7: (text: SDL_TextInputEvent);
      8: (motion: SDL_MouseMotionEvent);
      9: (button: SDL_MouseButtonEvent);
      10: (wheel: SDL_MouseWheelEvent);
      11: (jaxis: SDL_JoyAxisEvent);
      12: (jball: SDL_JoyBallEvent);
      13: (jhat: SDL_JoyHatEvent);
      14: (jbutton: SDL_JoyButtonEvent);
      15: (jdevice: SDL_JoyDeviceEvent);
      16: (caxis: SDL_ControllerAxisEvent);
      17: (cbutton: SDL_ControllerButtonEvent);
      18: (cdevice: SDL_ControllerDeviceEvent);
      19: (ctouchpad: SDL_ControllerTouchpadEvent);
      20: (csensor: SDL_ControllerSensorEvent);
      21: (adevice: SDL_AudioDeviceEvent);
      22: (sensor: SDL_SensorEvent);
      23: (quit: SDL_QuitEvent);
      24: (user: SDL_UserEvent);
      25: (syswm: SDL_SysWMEvent);
      26: (tfinger: SDL_TouchFingerEvent);
      27: (mgesture: SDL_MultiGestureEvent);
      28: (dgesture: SDL_DollarGestureEvent);
      29: (drop: SDL_DropEvent);
      30: (padding: array [0..55] of Uint8);
  end;

  SDL_EventFilter = function(userdata: Pointer; event: PSDL_Event): Integer; cdecl;
  PSDL_EventFilter = ^SDL_EventFilter;
  PSDL_Haptic = Pointer;
  PPSDL_Haptic = ^PSDL_Haptic;

  SDL_HapticDirection = record
    type_: Uint8;
    dir: array [0..2] of Sint32;
  end;

  SDL_HapticConstant = record
    type_: Uint16;
    direction: SDL_HapticDirection;
    length: Uint32;
    delay: Uint16;
    button: Uint16;
    interval: Uint16;
    level: Sint16;
    attack_length: Uint16;
    attack_level: Uint16;
    fade_length: Uint16;
    fade_level: Uint16;
  end;

  PSDL_HapticPeriodic = ^SDL_HapticPeriodic;
  SDL_HapticPeriodic = record
    type_: Uint16;
    direction: SDL_HapticDirection;
    length: Uint32;
    delay: Uint16;
    button: Uint16;
    interval: Uint16;
    period: Uint16;
    magnitude: Sint16;
    offset: Sint16;
    phase: Uint16;
    attack_length: Uint16;
    attack_level: Uint16;
    fade_length: Uint16;
    fade_level: Uint16;
  end;

  SDL_HapticCondition = record
    type_: Uint16;
    direction: SDL_HapticDirection;
    length: Uint32;
    delay: Uint16;
    button: Uint16;
    interval: Uint16;
    right_sat: array [0..2] of Uint16;
    left_sat: array [0..2] of Uint16;
    right_coeff: array [0..2] of Sint16;
    left_coeff: array [0..2] of Sint16;
    deadband: array [0..2] of Uint16;
    center: array [0..2] of Sint16;
  end;

  SDL_HapticRamp = record
    type_: Uint16;
    direction: SDL_HapticDirection;
    length: Uint32;
    delay: Uint16;
    button: Uint16;
    interval: Uint16;
    start: Sint16;
    end_: Sint16;
    attack_length: Uint16;
    attack_level: Uint16;
    fade_length: Uint16;
    fade_level: Uint16;
  end;

  SDL_HapticLeftRight = record
    type_: Uint16;
    length: Uint32;
    large_magnitude: Uint16;
    small_magnitude: Uint16;
  end;

  SDL_HapticCustom = record
    type_: Uint16;
    direction: SDL_HapticDirection;
    length: Uint32;
    delay: Uint16;
    button: Uint16;
    interval: Uint16;
    channels: Uint8;
    period: Uint16;
    samples: Uint16;
    data: PUint16;
    attack_length: Uint16;
    attack_level: Uint16;
    fade_length: Uint16;
    fade_level: Uint16;
  end;

  PSDL_HapticEffect = ^SDL_HapticEffect;
  SDL_HapticEffect = record
    case Integer of
      0: (type_: Uint16);
      1: (constant: SDL_HapticConstant);
      2: (periodic: SDL_HapticPeriodic);
      3: (condition: SDL_HapticCondition);
      4: (ramp: SDL_HapticRamp);
      5: (leftright: SDL_HapticLeftRight);
      6: (custom: SDL_HapticCustom);
  end;

  PSDL_hid_device = Pointer;
  PPSDL_hid_device = ^PSDL_hid_device;

  SDL_hid_device_info = record
    path: PUTF8Char;
    vendor_id: Word;
    product_id: Word;
    serial_number: PWideChar;
    release_number: Word;
    manufacturer_string: PWideChar;
    product_string: PWideChar;
    usage_page: Word;
    usage: Word;
    interface_number: Integer;
    interface_class: Integer;
    interface_subclass: Integer;
    interface_protocol: Integer;
    next: PSDL_hid_device_info;
  end;

  SDL_HintCallback = procedure(userdata: Pointer; const name: PUTF8Char; const oldValue: PUTF8Char; const newValue: PUTF8Char); cdecl;

  SDL_LogOutputFunction = procedure(userdata: Pointer; category: Integer; priority: SDL_LogPriority; const message_: PUTF8Char); cdecl;
  PSDL_LogOutputFunction = ^SDL_LogOutputFunction;

  SDL_MessageBoxButtonData = record
    flags: Uint32;
    buttonid: Integer;
    text: PUTF8Char;
  end;

  SDL_MessageBoxColor = record
    r: Uint8;
    g: Uint8;
    b: Uint8;
  end;

  SDL_MessageBoxColorScheme = record
    colors: array [0..4] of SDL_MessageBoxColor;
  end;

  SDL_MessageBoxData = record
    flags: Uint32;
    window: PSDL_Window;
    title: PUTF8Char;
    message_: PUTF8Char;
    numbuttons: Integer;
    buttons: PSDL_MessageBoxButtonData;
    colorScheme: PSDL_MessageBoxColorScheme;
  end;

  SDL_MetalView = Pointer;

  SDL_RendererInfo = record
    name: PUTF8Char;
    flags: Uint32;
    num_texture_formats: Uint32;
    texture_formats: array [0..15] of Uint32;
    max_texture_width: Integer;
    max_texture_height: Integer;
  end;

  SDL_Vertex = record
    position: SDL_FPoint;
    color: SDL_Color;
    tex_coord: SDL_FPoint;
  end;

  PSDL_Renderer = Pointer;
  PPSDL_Renderer = ^PSDL_Renderer;
  PSDL_Texture = Pointer;
  PPSDL_Texture = ^PSDL_Texture;

  SDL_WindowShapeParams = record
    case Integer of
      0: (binarizationCutoff: Uint8);
      1: (colorKey: SDL_Color);
  end;

  SDL_WindowShapeMode = record
    mode: WindowShapeMode;
    parameters: SDL_WindowShapeParams;
  end;

  SDL_WindowsMessageHook = procedure(userdata: Pointer; hWnd: Pointer; message_: Cardinal; wParam: Uint64; lParam: Sint64); cdecl;
  PIDirect3DDevice9 = Pointer;
  PPIDirect3DDevice9 = ^PIDirect3DDevice9;
  PID3D11Device = Pointer;
  PPID3D11Device = ^PID3D11Device;

  SDL_TimerCallback = function(interval: Uint32; param: Pointer): Uint32; cdecl;
  SDL_TimerID = Integer;

  SDL_version = record
    major: Uint8;
    minor: Uint8;
    patch: Uint8;
  end;

  SDL_Locale = record
    language: PUTF8Char;
    country: PUTF8Char;
  end;

  Mix_Chunk = record
    allocated: Integer;
    abuf: PUint8;
    alen: Uint32;
    volume: Uint8;
  end;

  PMix_Music = Pointer;
  PPMix_Music = ^PMix_Music;

  Mix_EffectFunc_t = procedure(chan: Integer; stream: Pointer; len: Integer; udata: Pointer); cdecl;

  Mix_EffectDone_t = procedure(chan: Integer; udata: Pointer); cdecl;
  SDLNet_version = SDL_version;
  PSDLNet_version = ^SDLNet_version;

  IPaddress = record
    host: Uint32;
    port: Uint16;
  end;

  TCPsocket = Pointer;
  PTCPsocket = ^TCPsocket;
  UDPsocket = Pointer;
  PUDPsocket = ^UDPsocket;

  UDPpacket = record
    channel: Integer;
    data: PUint8;
    len: Integer;
    maxlen: Integer;
    status: Integer;
    address: IPaddress;
  end;

  SDLNet_SocketSet = Pointer;
  PSDLNet_SocketSet = ^SDLNet_SocketSet;

  _SDLNet_GenericSocket = record
    ready: Integer;
  end;

  SDLNet_GenericSocket = P_SDLNet_GenericSocket;
  PTTF_Font = Pointer;
  PPTTF_Font = ^PTTF_Font;

  IMG_Animation = record
    w: Integer;
    h: Integer;
    count: Integer;
    frames: PPSDL_Surface;
    delays: PInteger;
  end;

  SDL_qsort_compare = function(const p1: Pointer; const p2: Pointer): Integer; cdecl;
  SDL_CreateThreadWithStackSize_fn = function(p1: Pointer): Integer; cdecl;
  SDL_TLSSet_destructor = procedure(p1: Pointer); cdecl;
  Mix_SetPostMix_mix_func = procedure(udata: Pointer; stream: PUint8; len: Integer); cdecl;
  Mix_HookMusic_mix_func = procedure(udata: Pointer; stream: PUint8; len: Integer); cdecl;
  Mix_HookMusicFinished_music_finished = procedure(); cdecl;
  Mix_ChannelFinished_channel_finished = procedure(channel: Integer); cdecl;
  Mix_EachSoundFont_function = function(const p1: PUTF8Char; p2: Pointer): Integer; cdecl;

var
  SDL_GetPlatform: function(): PUTF8Char; cdecl;
  SDL_malloc: function(size: NativeUInt): Pointer; cdecl;
  SDL_calloc: function(nmemb: NativeUInt; size: NativeUInt): Pointer; cdecl;
  SDL_realloc: function(mem: Pointer; size: NativeUInt): Pointer; cdecl;
  SDL_free: procedure(mem: Pointer); cdecl;
  SDL_GetMemoryFunctions: procedure(malloc_func: PSDL_malloc_func; calloc_func: PSDL_calloc_func; realloc_func: PSDL_realloc_func; free_func: PSDL_free_func); cdecl;
  SDL_SetMemoryFunctions: function(malloc_func: SDL_malloc_func; calloc_func: SDL_calloc_func; realloc_func: SDL_realloc_func; free_func: SDL_free_func): Integer; cdecl;
  SDL_GetNumAllocations: function(): Integer; cdecl;
  SDL_getenv: function(const name: PUTF8Char): PUTF8Char; cdecl;
  SDL_setenv: function(const name: PUTF8Char; const value: PUTF8Char; overwrite: Integer): Integer; cdecl;
  SDL_qsort: procedure(base: Pointer; nmemb: NativeUInt; size: NativeUInt; compare: SDL_qsort_compare); cdecl;
  SDL_abs: function(x: Integer): Integer; cdecl;
  SDL_isalpha: function(x: Integer): Integer; cdecl;
  SDL_isalnum: function(x: Integer): Integer; cdecl;
  SDL_isblank: function(x: Integer): Integer; cdecl;
  SDL_iscntrl: function(x: Integer): Integer; cdecl;
  SDL_isdigit: function(x: Integer): Integer; cdecl;
  SDL_isxdigit: function(x: Integer): Integer; cdecl;
  SDL_ispunct: function(x: Integer): Integer; cdecl;
  SDL_isspace: function(x: Integer): Integer; cdecl;
  SDL_isupper: function(x: Integer): Integer; cdecl;
  SDL_islower: function(x: Integer): Integer; cdecl;
  SDL_isprint: function(x: Integer): Integer; cdecl;
  SDL_isgraph: function(x: Integer): Integer; cdecl;
  SDL_toupper: function(x: Integer): Integer; cdecl;
  SDL_tolower: function(x: Integer): Integer; cdecl;
  SDL_crc32: function(crc: Uint32; const data: Pointer; len: NativeUInt): Uint32; cdecl;
  SDL_memset: function(dst: Pointer; c: Integer; len: NativeUInt): Pointer; cdecl;
  SDL_memcpy: function(dst: Pointer; const src: Pointer; len: NativeUInt): Pointer; cdecl;
  SDL_memmove: function(dst: Pointer; const src: Pointer; len: NativeUInt): Pointer; cdecl;
  SDL_memcmp: function(const s1: Pointer; const s2: Pointer; len: NativeUInt): Integer; cdecl;
  SDL_wcslen: function(const wstr: PWideChar): NativeUInt; cdecl;
  SDL_wcslcpy: function(dst: PWideChar; const src: PWideChar; maxlen: NativeUInt): NativeUInt; cdecl;
  SDL_wcslcat: function(dst: PWideChar; const src: PWideChar; maxlen: NativeUInt): NativeUInt; cdecl;
  SDL_wcsdup: function(const wstr: PWideChar): PWideChar; cdecl;
  SDL_wcsstr: function(const haystack: PWideChar; const needle: PWideChar): PWideChar; cdecl;
  SDL_wcscmp: function(const str1: PWideChar; const str2: PWideChar): Integer; cdecl;
  SDL_wcsncmp: function(const str1: PWideChar; const str2: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_wcscasecmp: function(const str1: PWideChar; const str2: PWideChar): Integer; cdecl;
  SDL_wcsncasecmp: function(const str1: PWideChar; const str2: PWideChar; len: NativeUInt): Integer; cdecl;
  SDL_strlen: function(const str: PUTF8Char): NativeUInt; cdecl;
  SDL_strlcpy: function(dst: PUTF8Char; const src: PUTF8Char; maxlen: NativeUInt): NativeUInt; cdecl;
  SDL_utf8strlcpy: function(dst: PUTF8Char; const src: PUTF8Char; dst_bytes: NativeUInt): NativeUInt; cdecl;
  SDL_strlcat: function(dst: PUTF8Char; const src: PUTF8Char; maxlen: NativeUInt): NativeUInt; cdecl;
  SDL_strdup: function(const str: PUTF8Char): PUTF8Char; cdecl;
  SDL_strrev: function(str: PUTF8Char): PUTF8Char; cdecl;
  SDL_strupr: function(str: PUTF8Char): PUTF8Char; cdecl;
  SDL_strlwr: function(str: PUTF8Char): PUTF8Char; cdecl;
  SDL_strchr: function(const str: PUTF8Char; c: Integer): PUTF8Char; cdecl;
  SDL_strrchr: function(const str: PUTF8Char; c: Integer): PUTF8Char; cdecl;
  SDL_strstr: function(const haystack: PUTF8Char; const needle: PUTF8Char): PUTF8Char; cdecl;
  SDL_strtokr: function(s1: PUTF8Char; const s2: PUTF8Char; saveptr: PPUTF8Char): PUTF8Char; cdecl;
  SDL_utf8strlen: function(const str: PUTF8Char): NativeUInt; cdecl;
  SDL_itoa: function(value: Integer; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_uitoa: function(value: Cardinal; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_ltoa: function(value: Integer; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_ultoa: function(value: Cardinal; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_lltoa: function(value: Sint64; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_ulltoa: function(value: Uint64; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_atoi: function(const str: PUTF8Char): Integer; cdecl;
  SDL_atof: function(const str: PUTF8Char): Double; cdecl;
  SDL_strtol: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): Integer; cdecl;
  SDL_strtoul: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): Cardinal; cdecl;
  SDL_strtoll: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): Sint64; cdecl;
  SDL_strtoull: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): Uint64; cdecl;
  SDL_strtod: function(const str: PUTF8Char; endp: PPUTF8Char): Double; cdecl;
  SDL_strcmp: function(const str1: PUTF8Char; const str2: PUTF8Char): Integer; cdecl;
  SDL_strncmp: function(const str1: PUTF8Char; const str2: PUTF8Char; maxlen: NativeUInt): Integer; cdecl;
  SDL_strcasecmp: function(const str1: PUTF8Char; const str2: PUTF8Char): Integer; cdecl;
  SDL_strncasecmp: function(const str1: PUTF8Char; const str2: PUTF8Char; len: NativeUInt): Integer; cdecl;
  SDL_sscanf: function(const text: PUTF8Char; const fmt: PUTF8Char): Integer varargs; cdecl;
  SDL_vsscanf: function(const text: PUTF8Char; const fmt: PUTF8Char; ap: Pointer): Integer; cdecl;
  SDL_snprintf: function(text: PUTF8Char; maxlen: NativeUInt; const fmt: PUTF8Char): Integer varargs; cdecl;
  SDL_vsnprintf: function(text: PUTF8Char; maxlen: NativeUInt; const fmt: PUTF8Char; ap: Pointer): Integer; cdecl;
  SDL_asprintf: function(strp: PPUTF8Char; const fmt: PUTF8Char): Integer varargs; cdecl;
  SDL_vasprintf: function(strp: PPUTF8Char; const fmt: PUTF8Char; ap: Pointer): Integer; cdecl;
  SDL_acos: function(x: Double): Double; cdecl;
  SDL_acosf: function(x: Single): Single; cdecl;
  SDL_asin: function(x: Double): Double; cdecl;
  SDL_asinf: function(x: Single): Single; cdecl;
  SDL_atan: function(x: Double): Double; cdecl;
  SDL_atanf: function(x: Single): Single; cdecl;
  SDL_atan2: function(y: Double; x: Double): Double; cdecl;
  SDL_atan2f: function(y: Single; x: Single): Single; cdecl;
  SDL_ceil: function(x: Double): Double; cdecl;
  SDL_ceilf: function(x: Single): Single; cdecl;
  SDL_copysign: function(x: Double; y: Double): Double; cdecl;
  SDL_copysignf: function(x: Single; y: Single): Single; cdecl;
  SDL_cos: function(x: Double): Double; cdecl;
  SDL_cosf: function(x: Single): Single; cdecl;
  SDL_exp: function(x: Double): Double; cdecl;
  SDL_expf: function(x: Single): Single; cdecl;
  SDL_fabs: function(x: Double): Double; cdecl;
  SDL_fabsf: function(x: Single): Single; cdecl;
  SDL_floor: function(x: Double): Double; cdecl;
  SDL_floorf: function(x: Single): Single; cdecl;
  SDL_trunc: function(x: Double): Double; cdecl;
  SDL_truncf: function(x: Single): Single; cdecl;
  SDL_fmod: function(x: Double; y: Double): Double; cdecl;
  SDL_fmodf: function(x: Single; y: Single): Single; cdecl;
  SDL_log: function(x: Double): Double; cdecl;
  SDL_logf: function(x: Single): Single; cdecl;
  SDL_log10: function(x: Double): Double; cdecl;
  SDL_log10f: function(x: Single): Single; cdecl;
  SDL_pow: function(x: Double; y: Double): Double; cdecl;
  SDL_powf: function(x: Single; y: Single): Single; cdecl;
  SDL_round: function(x: Double): Double; cdecl;
  SDL_roundf: function(x: Single): Single; cdecl;
  SDL_lround: function(x: Double): Integer; cdecl;
  SDL_lroundf: function(x: Single): Integer; cdecl;
  SDL_scalbn: function(x: Double; n: Integer): Double; cdecl;
  SDL_scalbnf: function(x: Single; n: Integer): Single; cdecl;
  SDL_sin: function(x: Double): Double; cdecl;
  SDL_sinf: function(x: Single): Single; cdecl;
  SDL_sqrt: function(x: Double): Double; cdecl;
  SDL_sqrtf: function(x: Single): Single; cdecl;
  SDL_tan: function(x: Double): Double; cdecl;
  SDL_tanf: function(x: Single): Single; cdecl;
  SDL_iconv_open: function(const tocode: PUTF8Char; const fromcode: PUTF8Char): SDL_iconv_t; cdecl;
  SDL_iconv_close: function(cd: SDL_iconv_t): Integer; cdecl;
  SDL_iconv: function(cd: SDL_iconv_t; inbuf: PPUTF8Char; inbytesleft: PNativeUInt; outbuf: PPUTF8Char; outbytesleft: PNativeUInt): NativeUInt; cdecl;
  SDL_iconv_string: function(const tocode: PUTF8Char; const fromcode: PUTF8Char; const inbuf: PUTF8Char; inbytesleft: NativeUInt): PUTF8Char; cdecl;
  SDL_main: function(argc: Integer; argv: PPUTF8Char): Integer; cdecl;
  SDL_SetMainReady: procedure(); cdecl;
  SDL_RegisterApp: function(const name: PUTF8Char; style: Uint32; hInst: Pointer): Integer; cdecl;
  SDL_UnregisterApp: procedure(); cdecl;
  SDL_ReportAssertion: function(p1: PSDL_AssertData; const p2: PUTF8Char; const p3: PUTF8Char; p4: Integer): SDL_AssertState; cdecl;
  SDL_SetAssertionHandler: procedure(handler: SDL_AssertionHandler; userdata: Pointer); cdecl;
  SDL_GetDefaultAssertionHandler: function(): SDL_AssertionHandler; cdecl;
  SDL_GetAssertionHandler: function(puserdata: PPointer): SDL_AssertionHandler; cdecl;
  SDL_GetAssertionReport: function(): PSDL_AssertData; cdecl;
  SDL_ResetAssertionReport: procedure(); cdecl;
  SDL_AtomicTryLock: function(lock: PSDL_SpinLock): SDL_bool; cdecl;
  SDL_AtomicLock: procedure(lock: PSDL_SpinLock); cdecl;
  SDL_AtomicUnlock: procedure(lock: PSDL_SpinLock); cdecl;
  SDL_MemoryBarrierReleaseFunction: procedure(); cdecl;
  SDL_MemoryBarrierAcquireFunction: procedure(); cdecl;
  SDL_AtomicCAS: function(a: PSDL_atomic_t; oldval: Integer; newval: Integer): SDL_bool; cdecl;
  SDL_AtomicSet: function(a: PSDL_atomic_t; v: Integer): Integer; cdecl;
  SDL_AtomicGet: function(a: PSDL_atomic_t): Integer; cdecl;
  SDL_AtomicAdd: function(a: PSDL_atomic_t; v: Integer): Integer; cdecl;
  SDL_AtomicCASPtr: function(a: PPointer; oldval: Pointer; newval: Pointer): SDL_bool; cdecl;
  SDL_AtomicSetPtr: function(a: PPointer; v: Pointer): Pointer; cdecl;
  SDL_AtomicGetPtr: function(a: PPointer): Pointer; cdecl;
  SDL_SetError: function(const fmt: PUTF8Char): Integer varargs; cdecl;
  SDL_GetError: function(): PUTF8Char; cdecl;
  SDL_GetErrorMsg: function(errstr: PUTF8Char; maxlen: Integer): PUTF8Char; cdecl;
  SDL_ClearError: procedure(); cdecl;
  SDL_Error: function(code: SDL_errorcode): Integer; cdecl;
  SDL_CreateMutex: function(): PSDL_mutex; cdecl;
  SDL_LockMutex: function(mutex: PSDL_mutex): Integer; cdecl;
  SDL_TryLockMutex: function(mutex: PSDL_mutex): Integer; cdecl;
  SDL_UnlockMutex: function(mutex: PSDL_mutex): Integer; cdecl;
  SDL_DestroyMutex: procedure(mutex: PSDL_mutex); cdecl;
  SDL_CreateSemaphore: function(initial_value: Uint32): PSDL_sem; cdecl;
  SDL_DestroySemaphore: procedure(sem: PSDL_sem); cdecl;
  SDL_SemWait: function(sem: PSDL_sem): Integer; cdecl;
  SDL_SemTryWait: function(sem: PSDL_sem): Integer; cdecl;
  SDL_SemWaitTimeout: function(sem: PSDL_sem; ms: Uint32): Integer; cdecl;
  SDL_SemPost: function(sem: PSDL_sem): Integer; cdecl;
  SDL_SemValue: function(sem: PSDL_sem): Uint32; cdecl;
  SDL_CreateCond: function(): PSDL_cond; cdecl;
  SDL_DestroyCond: procedure(cond: PSDL_cond); cdecl;
  SDL_CondSignal: function(cond: PSDL_cond): Integer; cdecl;
  SDL_CondBroadcast: function(cond: PSDL_cond): Integer; cdecl;
  SDL_CondWait: function(cond: PSDL_cond; mutex: PSDL_mutex): Integer; cdecl;
  SDL_CondWaitTimeout: function(cond: PSDL_cond; mutex: PSDL_mutex; ms: Uint32): Integer; cdecl;
  SDL_CreateThread: function(fn: SDL_ThreadFunction; const name: PUTF8Char; data: Pointer; pfnBeginThread: pfnSDL_CurrentBeginThread; pfnEndThread: pfnSDL_CurrentEndThread): PSDL_Thread; cdecl;
  SDL_CreateThreadWithStackSize: function(fn: SDL_CreateThreadWithStackSize_fn; const name: PUTF8Char; const stacksize: NativeUInt; data: Pointer; pfnBeginThread: pfnSDL_CurrentBeginThread; pfnEndThread: pfnSDL_CurrentEndThread): PSDL_Thread; cdecl;
  SDL_GetThreadName: function(thread: PSDL_Thread): PUTF8Char; cdecl;
  SDL_ThreadID: function(): SDL_threadID_; cdecl;
  SDL_GetThreadID: function(thread: PSDL_Thread): SDL_threadID_; cdecl;
  SDL_SetThreadPriority: function(priority: SDL_ThreadPriority): Integer; cdecl;
  SDL_WaitThread: procedure(thread: PSDL_Thread; status: PInteger); cdecl;
  SDL_DetachThread: procedure(thread: PSDL_Thread); cdecl;
  SDL_TLSCreate: function(): SDL_TLSID; cdecl;
  SDL_TLSGet: function(id: SDL_TLSID): Pointer; cdecl;
  SDL_TLSSet: function(id: SDL_TLSID; const value: Pointer; destructor_: SDL_TLSSet_destructor): Integer; cdecl;
  SDL_TLSCleanup: procedure(); cdecl;
  SDL_RWFromFile: function(const file_: PUTF8Char; const mode: PUTF8Char): PSDL_RWops; cdecl;
  SDL_RWFromFP: function(fp: Pointer; autoclose: SDL_bool): PSDL_RWops; cdecl;
  SDL_RWFromMem: function(mem: Pointer; size: Integer): PSDL_RWops; cdecl;
  SDL_RWFromConstMem: function(const mem: Pointer; size: Integer): PSDL_RWops; cdecl;
  SDL_AllocRW: function(): PSDL_RWops; cdecl;
  SDL_FreeRW: procedure(area: PSDL_RWops); cdecl;
  SDL_RWsize: function(context: PSDL_RWops): Sint64; cdecl;
  SDL_RWseek: function(context: PSDL_RWops; offset: Sint64; whence: Integer): Sint64; cdecl;
  SDL_RWtell: function(context: PSDL_RWops): Sint64; cdecl;
  SDL_RWread: function(context: PSDL_RWops; ptr: Pointer; size: NativeUInt; maxnum: NativeUInt): NativeUInt; cdecl;
  SDL_RWwrite: function(context: PSDL_RWops; const ptr: Pointer; size: NativeUInt; num: NativeUInt): NativeUInt; cdecl;
  SDL_RWclose: function(context: PSDL_RWops): Integer; cdecl;
  SDL_LoadFile_RW: function(src: PSDL_RWops; datasize: PNativeUInt; freesrc: Integer): Pointer; cdecl;
  SDL_LoadFile: function(const file_: PUTF8Char; datasize: PNativeUInt): Pointer; cdecl;
  SDL_ReadU8: function(src: PSDL_RWops): Uint8; cdecl;
  SDL_ReadLE16: function(src: PSDL_RWops): Uint16; cdecl;
  SDL_ReadBE16: function(src: PSDL_RWops): Uint16; cdecl;
  SDL_ReadLE32: function(src: PSDL_RWops): Uint32; cdecl;
  SDL_ReadBE32: function(src: PSDL_RWops): Uint32; cdecl;
  SDL_ReadLE64: function(src: PSDL_RWops): Uint64; cdecl;
  SDL_ReadBE64: function(src: PSDL_RWops): Uint64; cdecl;
  SDL_WriteU8: function(dst: PSDL_RWops; value: Uint8): NativeUInt; cdecl;
  SDL_WriteLE16: function(dst: PSDL_RWops; value: Uint16): NativeUInt; cdecl;
  SDL_WriteBE16: function(dst: PSDL_RWops; value: Uint16): NativeUInt; cdecl;
  SDL_WriteLE32: function(dst: PSDL_RWops; value: Uint32): NativeUInt; cdecl;
  SDL_WriteBE32: function(dst: PSDL_RWops; value: Uint32): NativeUInt; cdecl;
  SDL_WriteLE64: function(dst: PSDL_RWops; value: Uint64): NativeUInt; cdecl;
  SDL_WriteBE64: function(dst: PSDL_RWops; value: Uint64): NativeUInt; cdecl;
  SDL_GetNumAudioDrivers: function(): Integer; cdecl;
  SDL_GetAudioDriver: function(index: Integer): PUTF8Char; cdecl;
  SDL_AudioInit: function(const driver_name: PUTF8Char): Integer; cdecl;
  SDL_AudioQuit: procedure(); cdecl;
  SDL_GetCurrentAudioDriver: function(): PUTF8Char; cdecl;
  SDL_OpenAudio: function(desired: PSDL_AudioSpec; obtained: PSDL_AudioSpec): Integer; cdecl;
  SDL_GetNumAudioDevices: function(iscapture: Integer): Integer; cdecl;
  SDL_GetAudioDeviceName: function(index: Integer; iscapture: Integer): PUTF8Char; cdecl;
  SDL_GetAudioDeviceSpec: function(index: Integer; iscapture: Integer; spec: PSDL_AudioSpec): Integer; cdecl;
  SDL_OpenAudioDevice: function(const device: PUTF8Char; iscapture: Integer; const desired: PSDL_AudioSpec; obtained: PSDL_AudioSpec; allowed_changes: Integer): SDL_AudioDeviceID; cdecl;
  SDL_GetAudioStatus: function(): SDL_AudioStatus; cdecl;
  SDL_GetAudioDeviceStatus: function(dev: SDL_AudioDeviceID): SDL_AudioStatus; cdecl;
  SDL_PauseAudio: procedure(pause_on: Integer); cdecl;
  SDL_PauseAudioDevice: procedure(dev: SDL_AudioDeviceID; pause_on: Integer); cdecl;
  SDL_LoadWAV_RW: function(src: PSDL_RWops; freesrc: Integer; spec: PSDL_AudioSpec; audio_buf: PPUint8; audio_len: PUint32): PSDL_AudioSpec; cdecl;
  SDL_FreeWAV: procedure(audio_buf: PUint8); cdecl;
  SDL_BuildAudioCVT: function(cvt: PSDL_AudioCVT; src_format: SDL_AudioFormat; src_channels: Uint8; src_rate: Integer; dst_format: SDL_AudioFormat; dst_channels: Uint8; dst_rate: Integer): Integer; cdecl;
  SDL_ConvertAudio: function(cvt: PSDL_AudioCVT): Integer; cdecl;
  SDL_NewAudioStream: function(const src_format: SDL_AudioFormat; const src_channels: Uint8; const src_rate: Integer; const dst_format: SDL_AudioFormat; const dst_channels: Uint8; const dst_rate: Integer): PSDL_AudioStream; cdecl;
  SDL_AudioStreamPut: function(stream: PSDL_AudioStream; const buf: Pointer; len: Integer): Integer; cdecl;
  SDL_AudioStreamGet: function(stream: PSDL_AudioStream; buf: Pointer; len: Integer): Integer; cdecl;
  SDL_AudioStreamAvailable: function(stream: PSDL_AudioStream): Integer; cdecl;
  SDL_AudioStreamFlush: function(stream: PSDL_AudioStream): Integer; cdecl;
  SDL_AudioStreamClear: procedure(stream: PSDL_AudioStream); cdecl;
  SDL_FreeAudioStream: procedure(stream: PSDL_AudioStream); cdecl;
  SDL_MixAudio: procedure(dst: PUint8; const src: PUint8; len: Uint32; volume: Integer); cdecl;
  SDL_MixAudioFormat: procedure(dst: PUint8; const src: PUint8; format: SDL_AudioFormat; len: Uint32; volume: Integer); cdecl;
  SDL_QueueAudio: function(dev: SDL_AudioDeviceID; const data: Pointer; len: Uint32): Integer; cdecl;
  SDL_DequeueAudio: function(dev: SDL_AudioDeviceID; data: Pointer; len: Uint32): Uint32; cdecl;
  SDL_GetQueuedAudioSize: function(dev: SDL_AudioDeviceID): Uint32; cdecl;
  SDL_ClearQueuedAudio: procedure(dev: SDL_AudioDeviceID); cdecl;
  SDL_LockAudio: procedure(); cdecl;
  SDL_LockAudioDevice: procedure(dev: SDL_AudioDeviceID); cdecl;
  SDL_UnlockAudio: procedure(); cdecl;
  SDL_UnlockAudioDevice: procedure(dev: SDL_AudioDeviceID); cdecl;
  SDL_CloseAudio: procedure(); cdecl;
  SDL_CloseAudioDevice: procedure(dev: SDL_AudioDeviceID); cdecl;
  SDL_SetClipboardText: function(const text: PUTF8Char): Integer; cdecl;
  SDL_GetClipboardText: function(): PUTF8Char; cdecl;
  SDL_HasClipboardText: function(): SDL_bool; cdecl;
  SDL_GetCPUCount: function(): Integer; cdecl;
  SDL_GetCPUCacheLineSize: function(): Integer; cdecl;
  SDL_HasRDTSC: function(): SDL_bool; cdecl;
  SDL_HasAltiVec: function(): SDL_bool; cdecl;
  SDL_HasMMX: function(): SDL_bool; cdecl;
  SDL_Has3DNow: function(): SDL_bool; cdecl;
  SDL_HasSSE: function(): SDL_bool; cdecl;
  SDL_HasSSE2: function(): SDL_bool; cdecl;
  SDL_HasSSE3: function(): SDL_bool; cdecl;
  SDL_HasSSE41: function(): SDL_bool; cdecl;
  SDL_HasSSE42: function(): SDL_bool; cdecl;
  SDL_HasAVX: function(): SDL_bool; cdecl;
  SDL_HasAVX2: function(): SDL_bool; cdecl;
  SDL_HasAVX512F: function(): SDL_bool; cdecl;
  SDL_HasARMSIMD: function(): SDL_bool; cdecl;
  SDL_HasNEON: function(): SDL_bool; cdecl;
  SDL_GetSystemRAM: function(): Integer; cdecl;
  SDL_SIMDGetAlignment: function(): NativeUInt; cdecl;
  SDL_SIMDAlloc: function(const len: NativeUInt): Pointer; cdecl;
  SDL_SIMDRealloc: function(mem: Pointer; const len: NativeUInt): Pointer; cdecl;
  SDL_SIMDFree: procedure(ptr: Pointer); cdecl;
  SDL_GetPixelFormatName: function(format: Uint32): PUTF8Char; cdecl;
  SDL_PixelFormatEnumToMasks: function(format: Uint32; bpp: PInteger; Rmask: PUint32; Gmask: PUint32; Bmask: PUint32; Amask: PUint32): SDL_bool; cdecl;
  SDL_MasksToPixelFormatEnum: function(bpp: Integer; Rmask: Uint32; Gmask: Uint32; Bmask: Uint32; Amask: Uint32): Uint32; cdecl;
  SDL_AllocFormat: function(pixel_format: Uint32): PSDL_PixelFormat; cdecl;
  SDL_FreeFormat: procedure(format: PSDL_PixelFormat); cdecl;
  SDL_AllocPalette: function(ncolors: Integer): PSDL_Palette; cdecl;
  SDL_SetPixelFormatPalette: function(format: PSDL_PixelFormat; palette: PSDL_Palette): Integer; cdecl;
  SDL_SetPaletteColors: function(palette: PSDL_Palette; const colors: PSDL_Color; firstcolor: Integer; ncolors: Integer): Integer; cdecl;
  SDL_FreePalette: procedure(palette: PSDL_Palette); cdecl;
  SDL_MapRGB: function(const format: PSDL_PixelFormat; r: Uint8; g: Uint8; b: Uint8): Uint32; cdecl;
  SDL_MapRGBA: function(const format: PSDL_PixelFormat; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Uint32; cdecl;
  SDL_GetRGB: procedure(pixel: Uint32; const format: PSDL_PixelFormat; r: PUint8; g: PUint8; b: PUint8); cdecl;
  SDL_GetRGBA: procedure(pixel: Uint32; const format: PSDL_PixelFormat; r: PUint8; g: PUint8; b: PUint8; a: PUint8); cdecl;
  SDL_CalculateGammaRamp: procedure(gamma: Single; ramp: PUint16); cdecl;
  SDL_HasIntersection: function(const A: PSDL_Rect; const B: PSDL_Rect): SDL_bool; cdecl;
  SDL_IntersectRect: function(const A: PSDL_Rect; const B: PSDL_Rect; result: PSDL_Rect): SDL_bool; cdecl;
  SDL_UnionRect: procedure(const A: PSDL_Rect; const B: PSDL_Rect; result: PSDL_Rect); cdecl;
  SDL_EnclosePoints: function(const points: PSDL_Point; count: Integer; const clip: PSDL_Rect; result: PSDL_Rect): SDL_bool; cdecl;
  SDL_IntersectRectAndLine: function(const rect: PSDL_Rect; X1: PInteger; Y1: PInteger; X2: PInteger; Y2: PInteger): SDL_bool; cdecl;
  SDL_HasIntersectionF: function(const A: PSDL_FRect; const B: PSDL_FRect): SDL_bool; cdecl;
  SDL_IntersectFRect: function(const A: PSDL_FRect; const B: PSDL_FRect; result: PSDL_FRect): SDL_bool; cdecl;
  SDL_UnionFRect: procedure(const A: PSDL_FRect; const B: PSDL_FRect; result: PSDL_FRect); cdecl;
  SDL_EncloseFPoints: function(const points: PSDL_FPoint; count: Integer; const clip: PSDL_FRect; result: PSDL_FRect): SDL_bool; cdecl;
  SDL_IntersectFRectAndLine: function(const rect: PSDL_FRect; X1: PSingle; Y1: PSingle; X2: PSingle; Y2: PSingle): SDL_bool; cdecl;
  SDL_ComposeCustomBlendMode: function(srcColorFactor: SDL_BlendFactor; dstColorFactor: SDL_BlendFactor; colorOperation: SDL_BlendOperation; srcAlphaFactor: SDL_BlendFactor; dstAlphaFactor: SDL_BlendFactor; alphaOperation: SDL_BlendOperation): SDL_BlendMode; cdecl;
  SDL_CreateRGBSurface: function(flags: Uint32; width: Integer; height: Integer; depth: Integer; Rmask: Uint32; Gmask: Uint32; Bmask: Uint32; Amask: Uint32): PSDL_Surface; cdecl;
  SDL_CreateRGBSurfaceWithFormat: function(flags: Uint32; width: Integer; height: Integer; depth: Integer; format: Uint32): PSDL_Surface; cdecl;
  SDL_CreateRGBSurfaceFrom: function(pixels: Pointer; width: Integer; height: Integer; depth: Integer; pitch: Integer; Rmask: Uint32; Gmask: Uint32; Bmask: Uint32; Amask: Uint32): PSDL_Surface; cdecl;
  SDL_CreateRGBSurfaceWithFormatFrom: function(pixels: Pointer; width: Integer; height: Integer; depth: Integer; pitch: Integer; format: Uint32): PSDL_Surface; cdecl;
  SDL_FreeSurface: procedure(surface: PSDL_Surface); cdecl;
  SDL_SetSurfacePalette: function(surface: PSDL_Surface; palette: PSDL_Palette): Integer; cdecl;
  SDL_LockSurface: function(surface: PSDL_Surface): Integer; cdecl;
  SDL_UnlockSurface: procedure(surface: PSDL_Surface); cdecl;
  SDL_LoadBMP_RW: function(src: PSDL_RWops; freesrc: Integer): PSDL_Surface; cdecl;
  SDL_SaveBMP_RW: function(surface: PSDL_Surface; dst: PSDL_RWops; freedst: Integer): Integer; cdecl;
  SDL_SetSurfaceRLE: function(surface: PSDL_Surface; flag: Integer): Integer; cdecl;
  SDL_HasSurfaceRLE: function(surface: PSDL_Surface): SDL_bool; cdecl;
  SDL_SetColorKey: function(surface: PSDL_Surface; flag: Integer; key: Uint32): Integer; cdecl;
  SDL_HasColorKey: function(surface: PSDL_Surface): SDL_bool; cdecl;
  SDL_GetColorKey: function(surface: PSDL_Surface; key: PUint32): Integer; cdecl;
  SDL_SetSurfaceColorMod: function(surface: PSDL_Surface; r: Uint8; g: Uint8; b: Uint8): Integer; cdecl;
  SDL_GetSurfaceColorMod: function(surface: PSDL_Surface; r: PUint8; g: PUint8; b: PUint8): Integer; cdecl;
  SDL_SetSurfaceAlphaMod: function(surface: PSDL_Surface; alpha: Uint8): Integer; cdecl;
  SDL_GetSurfaceAlphaMod: function(surface: PSDL_Surface; alpha: PUint8): Integer; cdecl;
  SDL_SetSurfaceBlendMode: function(surface: PSDL_Surface; blendMode: SDL_BlendMode): Integer; cdecl;
  SDL_GetSurfaceBlendMode: function(surface: PSDL_Surface; blendMode: PSDL_BlendMode): Integer; cdecl;
  SDL_SetClipRect: function(surface: PSDL_Surface; const rect: PSDL_Rect): SDL_bool; cdecl;
  SDL_GetClipRect: procedure(surface: PSDL_Surface; rect: PSDL_Rect); cdecl;
  SDL_DuplicateSurface: function(surface: PSDL_Surface): PSDL_Surface; cdecl;
  SDL_ConvertSurface: function(src: PSDL_Surface; const fmt: PSDL_PixelFormat; flags: Uint32): PSDL_Surface; cdecl;
  SDL_ConvertSurfaceFormat: function(src: PSDL_Surface; pixel_format: Uint32; flags: Uint32): PSDL_Surface; cdecl;
  SDL_ConvertPixels: function(width: Integer; height: Integer; src_format: Uint32; const src: Pointer; src_pitch: Integer; dst_format: Uint32; dst: Pointer; dst_pitch: Integer): Integer; cdecl;
  SDL_PremultiplyAlpha: function(width: Integer; height: Integer; src_format: Uint32; const src: Pointer; src_pitch: Integer; dst_format: Uint32; dst: Pointer; dst_pitch: Integer): Integer; cdecl;
  SDL_FillRect: function(dst: PSDL_Surface; const rect: PSDL_Rect; color: Uint32): Integer; cdecl;
  SDL_FillRects: function(dst: PSDL_Surface; const rects: PSDL_Rect; count: Integer; color: Uint32): Integer; cdecl;
  SDL_UpperBlit: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; dstrect: PSDL_Rect): Integer; cdecl;
  SDL_LowerBlit: function(src: PSDL_Surface; srcrect: PSDL_Rect; dst: PSDL_Surface; dstrect: PSDL_Rect): Integer; cdecl;
  SDL_SoftStretch: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; const dstrect: PSDL_Rect): Integer; cdecl;
  SDL_SoftStretchLinear: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; const dstrect: PSDL_Rect): Integer; cdecl;
  SDL_UpperBlitScaled: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; dstrect: PSDL_Rect): Integer; cdecl;
  SDL_LowerBlitScaled: function(src: PSDL_Surface; srcrect: PSDL_Rect; dst: PSDL_Surface; dstrect: PSDL_Rect): Integer; cdecl;
  SDL_SetYUVConversionMode: procedure(mode: SDL_YUV_CONVERSION_MODE); cdecl;
  SDL_GetYUVConversionMode: function(): SDL_YUV_CONVERSION_MODE; cdecl;
  SDL_GetYUVConversionModeForResolution: function(width: Integer; height: Integer): SDL_YUV_CONVERSION_MODE; cdecl;
  SDL_GetNumVideoDrivers: function(): Integer; cdecl;
  SDL_GetVideoDriver: function(index: Integer): PUTF8Char; cdecl;
  SDL_VideoInit: function(const driver_name: PUTF8Char): Integer; cdecl;
  SDL_VideoQuit: procedure(); cdecl;
  SDL_GetCurrentVideoDriver: function(): PUTF8Char; cdecl;
  SDL_GetNumVideoDisplays: function(): Integer; cdecl;
  SDL_GetDisplayName: function(displayIndex: Integer): PUTF8Char; cdecl;
  SDL_GetDisplayBounds: function(displayIndex: Integer; rect: PSDL_Rect): Integer; cdecl;
  SDL_GetDisplayUsableBounds: function(displayIndex: Integer; rect: PSDL_Rect): Integer; cdecl;
  SDL_GetDisplayDPI: function(displayIndex: Integer; ddpi: PSingle; hdpi: PSingle; vdpi: PSingle): Integer; cdecl;
  SDL_GetDisplayOrientation: function(displayIndex: Integer): SDL_DisplayOrientation; cdecl;
  SDL_GetNumDisplayModes: function(displayIndex: Integer): Integer; cdecl;
  SDL_GetDisplayMode: function(displayIndex: Integer; modeIndex: Integer; mode: PSDL_DisplayMode): Integer; cdecl;
  SDL_GetDesktopDisplayMode: function(displayIndex: Integer; mode: PSDL_DisplayMode): Integer; cdecl;
  SDL_GetCurrentDisplayMode: function(displayIndex: Integer; mode: PSDL_DisplayMode): Integer; cdecl;
  SDL_GetClosestDisplayMode: function(displayIndex: Integer; const mode: PSDL_DisplayMode; closest: PSDL_DisplayMode): PSDL_DisplayMode; cdecl;
  SDL_GetWindowDisplayIndex: function(window: PSDL_Window): Integer; cdecl;
  SDL_SetWindowDisplayMode: function(window: PSDL_Window; const mode: PSDL_DisplayMode): Integer; cdecl;
  SDL_GetWindowDisplayMode: function(window: PSDL_Window; mode: PSDL_DisplayMode): Integer; cdecl;
  SDL_GetWindowICCProfile: function(window: PSDL_Window; size: PNativeUInt): Pointer; cdecl;
  SDL_GetWindowPixelFormat: function(window: PSDL_Window): Uint32; cdecl;
  SDL_CreateWindow: function(const title: PUTF8Char; x: Integer; y: Integer; w: Integer; h: Integer; flags: Uint32): PSDL_Window; cdecl;
  SDL_CreateWindowFrom: function(const data: Pointer): PSDL_Window; cdecl;
  SDL_GetWindowID: function(window: PSDL_Window): Uint32; cdecl;
  SDL_GetWindowFromID: function(id: Uint32): PSDL_Window; cdecl;
  SDL_GetWindowFlags: function(window: PSDL_Window): Uint32; cdecl;
  SDL_SetWindowTitle: procedure(window: PSDL_Window; const title: PUTF8Char); cdecl;
  SDL_GetWindowTitle: function(window: PSDL_Window): PUTF8Char; cdecl;
  SDL_SetWindowIcon: procedure(window: PSDL_Window; icon: PSDL_Surface); cdecl;
  SDL_SetWindowData: function(window: PSDL_Window; const name: PUTF8Char; userdata: Pointer): Pointer; cdecl;
  SDL_GetWindowData: function(window: PSDL_Window; const name: PUTF8Char): Pointer; cdecl;
  SDL_SetWindowPosition: procedure(window: PSDL_Window; x: Integer; y: Integer); cdecl;
  SDL_GetWindowPosition: procedure(window: PSDL_Window; x: PInteger; y: PInteger); cdecl;
  SDL_SetWindowSize: procedure(window: PSDL_Window; w: Integer; h: Integer); cdecl;
  SDL_GetWindowSize: procedure(window: PSDL_Window; w: PInteger; h: PInteger); cdecl;
  SDL_GetWindowBordersSize: function(window: PSDL_Window; top: PInteger; left: PInteger; bottom: PInteger; right: PInteger): Integer; cdecl;
  SDL_SetWindowMinimumSize: procedure(window: PSDL_Window; min_w: Integer; min_h: Integer); cdecl;
  SDL_GetWindowMinimumSize: procedure(window: PSDL_Window; w: PInteger; h: PInteger); cdecl;
  SDL_SetWindowMaximumSize: procedure(window: PSDL_Window; max_w: Integer; max_h: Integer); cdecl;
  SDL_GetWindowMaximumSize: procedure(window: PSDL_Window; w: PInteger; h: PInteger); cdecl;
  SDL_SetWindowBordered: procedure(window: PSDL_Window; bordered: SDL_bool); cdecl;
  SDL_SetWindowResizable: procedure(window: PSDL_Window; resizable: SDL_bool); cdecl;
  SDL_SetWindowAlwaysOnTop: procedure(window: PSDL_Window; on_top: SDL_bool); cdecl;
  SDL_ShowWindow: procedure(window: PSDL_Window); cdecl;
  SDL_HideWindow: procedure(window: PSDL_Window); cdecl;
  SDL_RaiseWindow: procedure(window: PSDL_Window); cdecl;
  SDL_MaximizeWindow: procedure(window: PSDL_Window); cdecl;
  SDL_MinimizeWindow: procedure(window: PSDL_Window); cdecl;
  SDL_RestoreWindow: procedure(window: PSDL_Window); cdecl;
  SDL_SetWindowFullscreen: function(window: PSDL_Window; flags: Uint32): Integer; cdecl;
  SDL_GetWindowSurface: function(window: PSDL_Window): PSDL_Surface; cdecl;
  SDL_UpdateWindowSurface: function(window: PSDL_Window): Integer; cdecl;
  SDL_UpdateWindowSurfaceRects: function(window: PSDL_Window; const rects: PSDL_Rect; numrects: Integer): Integer; cdecl;
  SDL_SetWindowGrab: procedure(window: PSDL_Window; grabbed: SDL_bool); cdecl;
  SDL_SetWindowKeyboardGrab: procedure(window: PSDL_Window; grabbed: SDL_bool); cdecl;
  SDL_SetWindowMouseGrab: procedure(window: PSDL_Window; grabbed: SDL_bool); cdecl;
  SDL_GetWindowGrab: function(window: PSDL_Window): SDL_bool; cdecl;
  SDL_GetWindowKeyboardGrab: function(window: PSDL_Window): SDL_bool; cdecl;
  SDL_GetWindowMouseGrab: function(window: PSDL_Window): SDL_bool; cdecl;
  SDL_GetGrabbedWindow: function(): PSDL_Window; cdecl;
  SDL_SetWindowMouseRect: function(window: PSDL_Window; const rect: PSDL_Rect): Integer; cdecl;
  SDL_GetWindowMouseRect: function(window: PSDL_Window): PSDL_Rect; cdecl;
  SDL_SetWindowBrightness: function(window: PSDL_Window; brightness: Single): Integer; cdecl;
  SDL_GetWindowBrightness: function(window: PSDL_Window): Single; cdecl;
  SDL_SetWindowOpacity: function(window: PSDL_Window; opacity: Single): Integer; cdecl;
  SDL_GetWindowOpacity: function(window: PSDL_Window; out_opacity: PSingle): Integer; cdecl;
  SDL_SetWindowModalFor: function(modal_window: PSDL_Window; parent_window: PSDL_Window): Integer; cdecl;
  SDL_SetWindowInputFocus: function(window: PSDL_Window): Integer; cdecl;
  SDL_SetWindowGammaRamp: function(window: PSDL_Window; const red: PUint16; const green: PUint16; const blue: PUint16): Integer; cdecl;
  SDL_GetWindowGammaRamp: function(window: PSDL_Window; red: PUint16; green: PUint16; blue: PUint16): Integer; cdecl;
  SDL_SetWindowHitTest: function(window: PSDL_Window; callback: SDL_HitTest; callback_data: Pointer): Integer; cdecl;
  SDL_FlashWindow: function(window: PSDL_Window; operation: SDL_FlashOperation): Integer; cdecl;
  SDL_DestroyWindow: procedure(window: PSDL_Window); cdecl;
  SDL_IsScreenSaverEnabled: function(): SDL_bool; cdecl;
  SDL_EnableScreenSaver: procedure(); cdecl;
  SDL_DisableScreenSaver: procedure(); cdecl;
  SDL_GL_LoadLibrary: function(const path: PUTF8Char): Integer; cdecl;
  SDL_GL_GetProcAddress: function(const proc: PUTF8Char): Pointer; cdecl;
  SDL_GL_UnloadLibrary: procedure(); cdecl;
  SDL_GL_ExtensionSupported: function(const extension: PUTF8Char): SDL_bool; cdecl;
  SDL_GL_ResetAttributes: procedure(); cdecl;
  SDL_GL_SetAttribute: function(attr: SDL_GLattr; value: Integer): Integer; cdecl;
  SDL_GL_GetAttribute: function(attr: SDL_GLattr; value: PInteger): Integer; cdecl;
  SDL_GL_CreateContext: function(window: PSDL_Window): SDL_GLContext; cdecl;
  SDL_GL_MakeCurrent: function(window: PSDL_Window; context: SDL_GLContext): Integer; cdecl;
  SDL_GL_GetCurrentWindow: function(): PSDL_Window; cdecl;
  SDL_GL_GetCurrentContext: function(): SDL_GLContext; cdecl;
  SDL_GL_GetDrawableSize: procedure(window: PSDL_Window; w: PInteger; h: PInteger); cdecl;
  SDL_GL_SetSwapInterval: function(interval: Integer): Integer; cdecl;
  SDL_GL_GetSwapInterval: function(): Integer; cdecl;
  SDL_GL_SwapWindow: procedure(window: PSDL_Window); cdecl;
  SDL_GL_DeleteContext: procedure(context: SDL_GLContext); cdecl;
  SDL_GetKeyboardFocus: function(): PSDL_Window; cdecl;
  SDL_GetKeyboardState: function(numkeys: PInteger): PUint8; cdecl;
  SDL_GetModState: function(): SDL_Keymod; cdecl;
  SDL_SetModState: procedure(modstate: SDL_Keymod); cdecl;
  SDL_GetKeyFromScancode: function(scancode: SDL_Scancode): SDL_Keycode; cdecl;
  SDL_GetScancodeFromKey: function(key: SDL_Keycode): SDL_Scancode; cdecl;
  SDL_GetScancodeName: function(scancode: SDL_Scancode): PUTF8Char; cdecl;
  SDL_GetScancodeFromName: function(const name: PUTF8Char): SDL_Scancode; cdecl;
  SDL_GetKeyName: function(key: SDL_Keycode): PUTF8Char; cdecl;
  SDL_GetKeyFromName: function(const name: PUTF8Char): SDL_Keycode; cdecl;
  SDL_StartTextInput: procedure(); cdecl;
  SDL_IsTextInputActive: function(): SDL_bool; cdecl;
  SDL_StopTextInput: procedure(); cdecl;
  SDL_ClearComposition: procedure(); cdecl;
  SDL_IsTextInputShown: function(): SDL_bool; cdecl;
  SDL_SetTextInputRect: procedure(rect: PSDL_Rect); cdecl;
  SDL_HasScreenKeyboardSupport: function(): SDL_bool; cdecl;
  SDL_IsScreenKeyboardShown: function(window: PSDL_Window): SDL_bool; cdecl;
  SDL_GetMouseFocus: function(): PSDL_Window; cdecl;
  SDL_GetMouseState: function(x: PInteger; y: PInteger): Uint32; cdecl;
  SDL_GetGlobalMouseState: function(x: PInteger; y: PInteger): Uint32; cdecl;
  SDL_GetRelativeMouseState: function(x: PInteger; y: PInteger): Uint32; cdecl;
  SDL_WarpMouseInWindow: procedure(window: PSDL_Window; x: Integer; y: Integer); cdecl;
  SDL_WarpMouseGlobal: function(x: Integer; y: Integer): Integer; cdecl;
  SDL_SetRelativeMouseMode: function(enabled: SDL_bool): Integer; cdecl;
  SDL_CaptureMouse: function(enabled: SDL_bool): Integer; cdecl;
  SDL_GetRelativeMouseMode: function(): SDL_bool; cdecl;
  SDL_CreateCursor: function(const data: PUint8; const mask: PUint8; w: Integer; h: Integer; hot_x: Integer; hot_y: Integer): PSDL_Cursor; cdecl;
  SDL_CreateColorCursor: function(surface: PSDL_Surface; hot_x: Integer; hot_y: Integer): PSDL_Cursor; cdecl;
  SDL_CreateSystemCursor: function(id: SDL_SystemCursor): PSDL_Cursor; cdecl;
  SDL_SetCursor: procedure(cursor: PSDL_Cursor); cdecl;
  SDL_GetCursor: function(): PSDL_Cursor; cdecl;
  SDL_GetDefaultCursor: function(): PSDL_Cursor; cdecl;
  SDL_FreeCursor: procedure(cursor: PSDL_Cursor); cdecl;
  SDL_ShowCursor: function(toggle: Integer): Integer; cdecl;
  SDL_LockJoysticks: procedure(); cdecl;
  SDL_UnlockJoysticks: procedure(); cdecl;
  SDL_NumJoysticks: function(): Integer; cdecl;
  SDL_JoystickNameForIndex: function(device_index: Integer): PUTF8Char; cdecl;
  SDL_JoystickGetDevicePlayerIndex: function(device_index: Integer): Integer; cdecl;
  SDL_JoystickGetDeviceGUID: function(device_index: Integer): SDL_JoystickGUID; cdecl;
  SDL_JoystickGetDeviceVendor: function(device_index: Integer): Uint16; cdecl;
  SDL_JoystickGetDeviceProduct: function(device_index: Integer): Uint16; cdecl;
  SDL_JoystickGetDeviceProductVersion: function(device_index: Integer): Uint16; cdecl;
  SDL_JoystickGetDeviceType: function(device_index: Integer): SDL_JoystickType; cdecl;
  SDL_JoystickGetDeviceInstanceID: function(device_index: Integer): SDL_JoystickID; cdecl;
  SDL_JoystickOpen: function(device_index: Integer): PSDL_Joystick; cdecl;
  SDL_JoystickFromInstanceID: function(instance_id: SDL_JoystickID): PSDL_Joystick; cdecl;
  SDL_JoystickFromPlayerIndex: function(player_index: Integer): PSDL_Joystick; cdecl;
  SDL_JoystickAttachVirtual: function(type_: SDL_JoystickType; naxes: Integer; nbuttons: Integer; nhats: Integer): Integer; cdecl;
  SDL_JoystickDetachVirtual: function(device_index: Integer): Integer; cdecl;
  SDL_JoystickIsVirtual: function(device_index: Integer): SDL_bool; cdecl;
  SDL_JoystickSetVirtualAxis: function(joystick: PSDL_Joystick; axis: Integer; value: Sint16): Integer; cdecl;
  SDL_JoystickSetVirtualButton: function(joystick: PSDL_Joystick; button: Integer; value: Uint8): Integer; cdecl;
  SDL_JoystickSetVirtualHat: function(joystick: PSDL_Joystick; hat: Integer; value: Uint8): Integer; cdecl;
  SDL_JoystickName: function(joystick: PSDL_Joystick): PUTF8Char; cdecl;
  SDL_JoystickGetPlayerIndex: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_JoystickSetPlayerIndex: procedure(joystick: PSDL_Joystick; player_index: Integer); cdecl;
  SDL_JoystickGetGUID: function(joystick: PSDL_Joystick): SDL_JoystickGUID; cdecl;
  SDL_JoystickGetVendor: function(joystick: PSDL_Joystick): Uint16; cdecl;
  SDL_JoystickGetProduct: function(joystick: PSDL_Joystick): Uint16; cdecl;
  SDL_JoystickGetProductVersion: function(joystick: PSDL_Joystick): Uint16; cdecl;
  SDL_JoystickGetSerial: function(joystick: PSDL_Joystick): PUTF8Char; cdecl;
  SDL_JoystickGetType: function(joystick: PSDL_Joystick): SDL_JoystickType; cdecl;
  SDL_JoystickGetGUIDString: procedure(guid: SDL_JoystickGUID; pszGUID: PUTF8Char; cbGUID: Integer); cdecl;
  SDL_JoystickGetGUIDFromString: function(const pchGUID: PUTF8Char): SDL_JoystickGUID; cdecl;
  SDL_JoystickGetAttached: function(joystick: PSDL_Joystick): SDL_bool; cdecl;
  SDL_JoystickInstanceID: function(joystick: PSDL_Joystick): SDL_JoystickID; cdecl;
  SDL_JoystickNumAxes: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_JoystickNumBalls: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_JoystickNumHats: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_JoystickNumButtons: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_JoystickUpdate: procedure(); cdecl;
  SDL_JoystickEventState: function(state: Integer): Integer; cdecl;
  SDL_JoystickGetAxis: function(joystick: PSDL_Joystick; axis: Integer): Sint16; cdecl;
  SDL_JoystickGetAxisInitialState: function(joystick: PSDL_Joystick; axis: Integer; state: PSint16): SDL_bool; cdecl;
  SDL_JoystickGetHat: function(joystick: PSDL_Joystick; hat: Integer): Uint8; cdecl;
  SDL_JoystickGetBall: function(joystick: PSDL_Joystick; ball: Integer; dx: PInteger; dy: PInteger): Integer; cdecl;
  SDL_JoystickGetButton: function(joystick: PSDL_Joystick; button: Integer): Uint8; cdecl;
  SDL_JoystickRumble: function(joystick: PSDL_Joystick; low_frequency_rumble: Uint16; high_frequency_rumble: Uint16; duration_ms: Uint32): Integer; cdecl;
  SDL_JoystickRumbleTriggers: function(joystick: PSDL_Joystick; left_rumble: Uint16; right_rumble: Uint16; duration_ms: Uint32): Integer; cdecl;
  SDL_JoystickHasLED: function(joystick: PSDL_Joystick): SDL_bool; cdecl;
  SDL_JoystickHasRumble: function(joystick: PSDL_Joystick): SDL_bool; cdecl;
  SDL_JoystickHasRumbleTriggers: function(joystick: PSDL_Joystick): SDL_bool; cdecl;
  SDL_JoystickSetLED: function(joystick: PSDL_Joystick; red: Uint8; green: Uint8; blue: Uint8): Integer; cdecl;
  SDL_JoystickSendEffect: function(joystick: PSDL_Joystick; const data: Pointer; size: Integer): Integer; cdecl;
  SDL_JoystickClose: procedure(joystick: PSDL_Joystick); cdecl;
  SDL_JoystickCurrentPowerLevel: function(joystick: PSDL_Joystick): SDL_JoystickPowerLevel; cdecl;
  SDL_LockSensors: procedure(); cdecl;
  SDL_UnlockSensors: procedure(); cdecl;
  SDL_NumSensors: function(): Integer; cdecl;
  SDL_SensorGetDeviceName: function(device_index: Integer): PUTF8Char; cdecl;
  SDL_SensorGetDeviceType: function(device_index: Integer): SDL_SensorType; cdecl;
  SDL_SensorGetDeviceNonPortableType: function(device_index: Integer): Integer; cdecl;
  SDL_SensorGetDeviceInstanceID: function(device_index: Integer): SDL_SensorID; cdecl;
  SDL_SensorOpen: function(device_index: Integer): PSDL_Sensor; cdecl;
  SDL_SensorFromInstanceID: function(instance_id: SDL_SensorID): PSDL_Sensor; cdecl;
  SDL_SensorGetName: function(sensor: PSDL_Sensor): PUTF8Char; cdecl;
  SDL_SensorGetType: function(sensor: PSDL_Sensor): SDL_SensorType; cdecl;
  SDL_SensorGetNonPortableType: function(sensor: PSDL_Sensor): Integer; cdecl;
  SDL_SensorGetInstanceID: function(sensor: PSDL_Sensor): SDL_SensorID; cdecl;
  SDL_SensorGetData: function(sensor: PSDL_Sensor; data: PSingle; num_values: Integer): Integer; cdecl;
  SDL_SensorClose: procedure(sensor: PSDL_Sensor); cdecl;
  SDL_SensorUpdate: procedure(); cdecl;
  SDL_GameControllerAddMappingsFromRW: function(rw: PSDL_RWops; freerw: Integer): Integer; cdecl;
  SDL_GameControllerAddMapping: function(const mappingString: PUTF8Char): Integer; cdecl;
  SDL_GameControllerNumMappings: function(): Integer; cdecl;
  SDL_GameControllerMappingForIndex: function(mapping_index: Integer): PUTF8Char; cdecl;
  SDL_GameControllerMappingForGUID: function(guid: SDL_JoystickGUID): PUTF8Char; cdecl;
  SDL_GameControllerMapping: function(gamecontroller: PSDL_GameController): PUTF8Char; cdecl;
  SDL_IsGameController: function(joystick_index: Integer): SDL_bool; cdecl;
  SDL_GameControllerNameForIndex: function(joystick_index: Integer): PUTF8Char; cdecl;
  SDL_GameControllerTypeForIndex: function(joystick_index: Integer): SDL_GameControllerType; cdecl;
  SDL_GameControllerMappingForDeviceIndex: function(joystick_index: Integer): PUTF8Char; cdecl;
  SDL_GameControllerOpen: function(joystick_index: Integer): PSDL_GameController; cdecl;
  SDL_GameControllerFromInstanceID: function(joyid: SDL_JoystickID): PSDL_GameController; cdecl;
  SDL_GameControllerFromPlayerIndex: function(player_index: Integer): PSDL_GameController; cdecl;
  SDL_GameControllerName: function(gamecontroller: PSDL_GameController): PUTF8Char; cdecl;
  SDL_GameControllerGetType: function(gamecontroller: PSDL_GameController): SDL_GameControllerType; cdecl;
  SDL_GameControllerGetPlayerIndex: function(gamecontroller: PSDL_GameController): Integer; cdecl;
  SDL_GameControllerSetPlayerIndex: procedure(gamecontroller: PSDL_GameController; player_index: Integer); cdecl;
  SDL_GameControllerGetVendor: function(gamecontroller: PSDL_GameController): Uint16; cdecl;
  SDL_GameControllerGetProduct: function(gamecontroller: PSDL_GameController): Uint16; cdecl;
  SDL_GameControllerGetProductVersion: function(gamecontroller: PSDL_GameController): Uint16; cdecl;
  SDL_GameControllerGetSerial: function(gamecontroller: PSDL_GameController): PUTF8Char; cdecl;
  SDL_GameControllerGetAttached: function(gamecontroller: PSDL_GameController): SDL_bool; cdecl;
  SDL_GameControllerGetJoystick: function(gamecontroller: PSDL_GameController): PSDL_Joystick; cdecl;
  SDL_GameControllerEventState: function(state: Integer): Integer; cdecl;
  SDL_GameControllerUpdate: procedure(); cdecl;
  SDL_GameControllerGetAxisFromString: function(const str: PUTF8Char): SDL_GameControllerAxis; cdecl;
  SDL_GameControllerGetStringForAxis: function(axis: SDL_GameControllerAxis): PUTF8Char; cdecl;
  SDL_GameControllerGetBindForAxis: function(gamecontroller: PSDL_GameController; axis: SDL_GameControllerAxis): SDL_GameControllerButtonBind; cdecl;
  SDL_GameControllerHasAxis: function(gamecontroller: PSDL_GameController; axis: SDL_GameControllerAxis): SDL_bool; cdecl;
  SDL_GameControllerGetAxis: function(gamecontroller: PSDL_GameController; axis: SDL_GameControllerAxis): Sint16; cdecl;
  SDL_GameControllerGetButtonFromString: function(const str: PUTF8Char): SDL_GameControllerButton; cdecl;
  SDL_GameControllerGetStringForButton: function(button: SDL_GameControllerButton): PUTF8Char; cdecl;
  SDL_GameControllerGetBindForButton: function(gamecontroller: PSDL_GameController; button: SDL_GameControllerButton): SDL_GameControllerButtonBind; cdecl;
  SDL_GameControllerHasButton: function(gamecontroller: PSDL_GameController; button: SDL_GameControllerButton): SDL_bool; cdecl;
  SDL_GameControllerGetButton: function(gamecontroller: PSDL_GameController; button: SDL_GameControllerButton): Uint8; cdecl;
  SDL_GameControllerGetNumTouchpads: function(gamecontroller: PSDL_GameController): Integer; cdecl;
  SDL_GameControllerGetNumTouchpadFingers: function(gamecontroller: PSDL_GameController; touchpad: Integer): Integer; cdecl;
  SDL_GameControllerGetTouchpadFinger: function(gamecontroller: PSDL_GameController; touchpad: Integer; finger: Integer; state: PUint8; x: PSingle; y: PSingle; pressure: PSingle): Integer; cdecl;
  SDL_GameControllerHasSensor: function(gamecontroller: PSDL_GameController; type_: SDL_SensorType): SDL_bool; cdecl;
  SDL_GameControllerSetSensorEnabled: function(gamecontroller: PSDL_GameController; type_: SDL_SensorType; enabled: SDL_bool): Integer; cdecl;
  SDL_GameControllerIsSensorEnabled: function(gamecontroller: PSDL_GameController; type_: SDL_SensorType): SDL_bool; cdecl;
  SDL_GameControllerGetSensorDataRate: function(gamecontroller: PSDL_GameController; type_: SDL_SensorType): Single; cdecl;
  SDL_GameControllerGetSensorData: function(gamecontroller: PSDL_GameController; type_: SDL_SensorType; data: PSingle; num_values: Integer): Integer; cdecl;
  SDL_GameControllerRumble: function(gamecontroller: PSDL_GameController; low_frequency_rumble: Uint16; high_frequency_rumble: Uint16; duration_ms: Uint32): Integer; cdecl;
  SDL_GameControllerRumbleTriggers: function(gamecontroller: PSDL_GameController; left_rumble: Uint16; right_rumble: Uint16; duration_ms: Uint32): Integer; cdecl;
  SDL_GameControllerHasLED: function(gamecontroller: PSDL_GameController): SDL_bool; cdecl;
  SDL_GameControllerHasRumble: function(gamecontroller: PSDL_GameController): SDL_bool; cdecl;
  SDL_GameControllerHasRumbleTriggers: function(gamecontroller: PSDL_GameController): SDL_bool; cdecl;
  SDL_GameControllerSetLED: function(gamecontroller: PSDL_GameController; red: Uint8; green: Uint8; blue: Uint8): Integer; cdecl;
  SDL_GameControllerSendEffect: function(gamecontroller: PSDL_GameController; const data: Pointer; size: Integer): Integer; cdecl;
  SDL_GameControllerClose: procedure(gamecontroller: PSDL_GameController); cdecl;
  SDL_GameControllerGetAppleSFSymbolsNameForButton: function(gamecontroller: PSDL_GameController; button: SDL_GameControllerButton): PUTF8Char; cdecl;
  SDL_GameControllerGetAppleSFSymbolsNameForAxis: function(gamecontroller: PSDL_GameController; axis: SDL_GameControllerAxis): PUTF8Char; cdecl;
  SDL_GetNumTouchDevices: function(): Integer; cdecl;
  SDL_GetTouchDevice: function(index: Integer): SDL_TouchID; cdecl;
  SDL_GetTouchName: function(index: Integer): PUTF8Char; cdecl;
  SDL_GetTouchDeviceType: function(touchID: SDL_TouchID): SDL_TouchDeviceType; cdecl;
  SDL_GetNumTouchFingers: function(touchID: SDL_TouchID): Integer; cdecl;
  SDL_GetTouchFinger: function(touchID: SDL_TouchID; index: Integer): PSDL_Finger; cdecl;
  SDL_RecordGesture: function(touchId: SDL_TouchID): Integer; cdecl;
  SDL_SaveAllDollarTemplates: function(dst: PSDL_RWops): Integer; cdecl;
  SDL_SaveDollarTemplate: function(gestureId: SDL_GestureID; dst: PSDL_RWops): Integer; cdecl;
  SDL_LoadDollarTemplates: function(touchId: SDL_TouchID; src: PSDL_RWops): Integer; cdecl;
  SDL_PumpEvents: procedure(); cdecl;
  SDL_PeepEvents: function(events: PSDL_Event; numevents: Integer; action: SDL_eventaction; minType: Uint32; maxType: Uint32): Integer; cdecl;
  SDL_HasEvent: function(type_: Uint32): SDL_bool; cdecl;
  SDL_HasEvents: function(minType: Uint32; maxType: Uint32): SDL_bool; cdecl;
  SDL_FlushEvent: procedure(type_: Uint32); cdecl;
  SDL_FlushEvents: procedure(minType: Uint32; maxType: Uint32); cdecl;
  SDL_PollEvent: function(event: PSDL_Event): Integer; cdecl;
  SDL_WaitEvent: function(event: PSDL_Event): Integer; cdecl;
  SDL_WaitEventTimeout: function(event: PSDL_Event; timeout: Integer): Integer; cdecl;
  SDL_PushEvent: function(event: PSDL_Event): Integer; cdecl;
  SDL_SetEventFilter: procedure(filter: SDL_EventFilter; userdata: Pointer); cdecl;
  SDL_GetEventFilter: function(filter: PSDL_EventFilter; userdata: PPointer): SDL_bool; cdecl;
  SDL_AddEventWatch: procedure(filter: SDL_EventFilter; userdata: Pointer); cdecl;
  SDL_DelEventWatch: procedure(filter: SDL_EventFilter; userdata: Pointer); cdecl;
  SDL_FilterEvents: procedure(filter: SDL_EventFilter; userdata: Pointer); cdecl;
  SDL_EventState: function(type_: Uint32; state: Integer): Uint8; cdecl;
  SDL_RegisterEvents: function(numevents: Integer): Uint32; cdecl;
  SDL_GetBasePath: function(): PUTF8Char; cdecl;
  SDL_GetPrefPath: function(const org: PUTF8Char; const app: PUTF8Char): PUTF8Char; cdecl;
  SDL_NumHaptics: function(): Integer; cdecl;
  SDL_HapticName: function(device_index: Integer): PUTF8Char; cdecl;
  SDL_HapticOpen: function(device_index: Integer): PSDL_Haptic; cdecl;
  SDL_HapticOpened: function(device_index: Integer): Integer; cdecl;
  SDL_HapticIndex: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_MouseIsHaptic: function(): Integer; cdecl;
  SDL_HapticOpenFromMouse: function(): PSDL_Haptic; cdecl;
  SDL_JoystickIsHaptic: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_HapticOpenFromJoystick: function(joystick: PSDL_Joystick): PSDL_Haptic; cdecl;
  SDL_HapticClose: procedure(haptic: PSDL_Haptic); cdecl;
  SDL_HapticNumEffects: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticNumEffectsPlaying: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticQuery: function(haptic: PSDL_Haptic): Cardinal; cdecl;
  SDL_HapticNumAxes: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticEffectSupported: function(haptic: PSDL_Haptic; effect: PSDL_HapticEffect): Integer; cdecl;
  SDL_HapticNewEffect: function(haptic: PSDL_Haptic; effect: PSDL_HapticEffect): Integer; cdecl;
  SDL_HapticUpdateEffect: function(haptic: PSDL_Haptic; effect: Integer; data: PSDL_HapticEffect): Integer; cdecl;
  SDL_HapticRunEffect: function(haptic: PSDL_Haptic; effect: Integer; iterations: Uint32): Integer; cdecl;
  SDL_HapticStopEffect: function(haptic: PSDL_Haptic; effect: Integer): Integer; cdecl;
  SDL_HapticDestroyEffect: procedure(haptic: PSDL_Haptic; effect: Integer); cdecl;
  SDL_HapticGetEffectStatus: function(haptic: PSDL_Haptic; effect: Integer): Integer; cdecl;
  SDL_HapticSetGain: function(haptic: PSDL_Haptic; gain: Integer): Integer; cdecl;
  SDL_HapticSetAutocenter: function(haptic: PSDL_Haptic; autocenter: Integer): Integer; cdecl;
  SDL_HapticPause: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticUnpause: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticStopAll: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticRumbleSupported: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticRumbleInit: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticRumblePlay: function(haptic: PSDL_Haptic; strength: Single; length: Uint32): Integer; cdecl;
  SDL_HapticRumbleStop: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_hid_init: function(): Integer; cdecl;
  SDL_hid_exit: function(): Integer; cdecl;
  SDL_hid_device_change_count: function(): Uint32; cdecl;
  SDL_hid_enumerate: function(vendor_id: Word; product_id: Word): PSDL_hid_device_info; cdecl;
  SDL_hid_free_enumeration: procedure(devs: PSDL_hid_device_info); cdecl;
  SDL_hid_open: function(vendor_id: Word; product_id: Word; const serial_number: PWideChar): PSDL_hid_device; cdecl;
  SDL_hid_open_path: function(const path: PUTF8Char; bExclusive: Integer): PSDL_hid_device; cdecl;
  SDL_hid_write: function(dev: PSDL_hid_device; const data: PByte; length: NativeUInt): Integer; cdecl;
  SDL_hid_read_timeout: function(dev: PSDL_hid_device; data: PByte; length: NativeUInt; milliseconds: Integer): Integer; cdecl;
  SDL_hid_read: function(dev: PSDL_hid_device; data: PByte; length: NativeUInt): Integer; cdecl;
  SDL_hid_set_nonblocking: function(dev: PSDL_hid_device; nonblock: Integer): Integer; cdecl;
  SDL_hid_send_feature_report: function(dev: PSDL_hid_device; const data: PByte; length: NativeUInt): Integer; cdecl;
  SDL_hid_get_feature_report: function(dev: PSDL_hid_device; data: PByte; length: NativeUInt): Integer; cdecl;
  SDL_hid_close: procedure(dev: PSDL_hid_device); cdecl;
  SDL_hid_get_manufacturer_string: function(dev: PSDL_hid_device; string_: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_hid_get_product_string: function(dev: PSDL_hid_device; string_: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_hid_get_serial_number_string: function(dev: PSDL_hid_device; string_: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_hid_get_indexed_string: function(dev: PSDL_hid_device; string_index: Integer; string_: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_hid_ble_scan: procedure(active: SDL_bool); cdecl;
  SDL_SetHintWithPriority: function(const name: PUTF8Char; const value: PUTF8Char; priority: SDL_HintPriority): SDL_bool; cdecl;
  SDL_SetHint: function(const name: PUTF8Char; const value: PUTF8Char): SDL_bool; cdecl;
  SDL_GetHint: function(const name: PUTF8Char): PUTF8Char; cdecl;
  SDL_GetHintBoolean: function(const name: PUTF8Char; default_value: SDL_bool): SDL_bool; cdecl;
  SDL_AddHintCallback: procedure(const name: PUTF8Char; callback: SDL_HintCallback; userdata: Pointer); cdecl;
  SDL_DelHintCallback: procedure(const name: PUTF8Char; callback: SDL_HintCallback; userdata: Pointer); cdecl;
  SDL_ClearHints: procedure(); cdecl;
  SDL_LoadObject: function(const sofile: PUTF8Char): Pointer; cdecl;
  SDL_LoadFunction: function(handle: Pointer; const name: PUTF8Char): Pointer; cdecl;
  SDL_UnloadObject: procedure(handle: Pointer); cdecl;
  SDL_LogSetAllPriority: procedure(priority: SDL_LogPriority); cdecl;
  SDL_LogSetPriority: procedure(category: Integer; priority: SDL_LogPriority); cdecl;
  SDL_LogGetPriority: function(category: Integer): SDL_LogPriority; cdecl;
  SDL_LogResetPriorities: procedure(); cdecl;
  SDL_Log_: procedure(const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogVerbose: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogDebug: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogInfo: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogWarn: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogError: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogCritical: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogMessage: procedure(category: Integer; priority: SDL_LogPriority; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogMessageV: procedure(category: Integer; priority: SDL_LogPriority; const fmt: PUTF8Char; ap: Pointer); cdecl;
  SDL_LogGetOutputFunction: procedure(callback: PSDL_LogOutputFunction; userdata: PPointer); cdecl;
  SDL_LogSetOutputFunction: procedure(callback: SDL_LogOutputFunction; userdata: Pointer); cdecl;
  SDL_ShowMessageBox: function(const messageboxdata: PSDL_MessageBoxData; buttonid: PInteger): Integer; cdecl;
  SDL_ShowSimpleMessageBox: function(flags: Uint32; const title: PUTF8Char; const message_: PUTF8Char; window: PSDL_Window): Integer; cdecl;
  SDL_Metal_CreateView: function(window: PSDL_Window): SDL_MetalView; cdecl;
  SDL_Metal_DestroyView: procedure(view: SDL_MetalView); cdecl;
  SDL_Metal_GetLayer: function(view: SDL_MetalView): Pointer; cdecl;
  SDL_Metal_GetDrawableSize: procedure(window: PSDL_Window; w: PInteger; h: PInteger); cdecl;
  SDL_GetPowerInfo: function(secs: PInteger; pct: PInteger): SDL_PowerState; cdecl;
  SDL_GetNumRenderDrivers: function(): Integer; cdecl;
  SDL_GetRenderDriverInfo: function(index: Integer; info: PSDL_RendererInfo): Integer; cdecl;
  SDL_CreateWindowAndRenderer: function(width: Integer; height: Integer; window_flags: Uint32; window: PPSDL_Window; renderer: PPSDL_Renderer): Integer; cdecl;
  SDL_CreateRenderer: function(window: PSDL_Window; index: Integer; flags: Uint32): PSDL_Renderer; cdecl;
  SDL_CreateSoftwareRenderer: function(surface: PSDL_Surface): PSDL_Renderer; cdecl;
  SDL_GetRenderer: function(window: PSDL_Window): PSDL_Renderer; cdecl;
  SDL_RenderGetWindow: function(renderer: PSDL_Renderer): PSDL_Window; cdecl;
  SDL_GetRendererInfo: function(renderer: PSDL_Renderer; info: PSDL_RendererInfo): Integer; cdecl;
  SDL_GetRendererOutputSize: function(renderer: PSDL_Renderer; w: PInteger; h: PInteger): Integer; cdecl;
  SDL_CreateTexture: function(renderer: PSDL_Renderer; format: Uint32; access: Integer; w: Integer; h: Integer): PSDL_Texture; cdecl;
  SDL_CreateTextureFromSurface: function(renderer: PSDL_Renderer; surface: PSDL_Surface): PSDL_Texture; cdecl;
  SDL_QueryTexture: function(texture: PSDL_Texture; format: PUint32; access: PInteger; w: PInteger; h: PInteger): Integer; cdecl;
  SDL_SetTextureColorMod: function(texture: PSDL_Texture; r: Uint8; g: Uint8; b: Uint8): Integer; cdecl;
  SDL_GetTextureColorMod: function(texture: PSDL_Texture; r: PUint8; g: PUint8; b: PUint8): Integer; cdecl;
  SDL_SetTextureAlphaMod: function(texture: PSDL_Texture; alpha: Uint8): Integer; cdecl;
  SDL_GetTextureAlphaMod: function(texture: PSDL_Texture; alpha: PUint8): Integer; cdecl;
  SDL_SetTextureBlendMode: function(texture: PSDL_Texture; blendMode: SDL_BlendMode): Integer; cdecl;
  SDL_GetTextureBlendMode: function(texture: PSDL_Texture; blendMode: PSDL_BlendMode): Integer; cdecl;
  SDL_SetTextureScaleMode: function(texture: PSDL_Texture; scaleMode: SDL_ScaleMode): Integer; cdecl;
  SDL_GetTextureScaleMode: function(texture: PSDL_Texture; scaleMode: PSDL_ScaleMode): Integer; cdecl;
  SDL_SetTextureUserData: function(texture: PSDL_Texture; userdata: Pointer): Integer; cdecl;
  SDL_GetTextureUserData: function(texture: PSDL_Texture): Pointer; cdecl;
  SDL_UpdateTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; const pixels: Pointer; pitch: Integer): Integer; cdecl;
  SDL_UpdateYUVTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; const Yplane: PUint8; Ypitch: Integer; const Uplane: PUint8; Upitch: Integer; const Vplane: PUint8; Vpitch: Integer): Integer; cdecl;
  SDL_UpdateNVTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; const Yplane: PUint8; Ypitch: Integer; const UVplane: PUint8; UVpitch: Integer): Integer; cdecl;
  SDL_LockTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; pixels: PPointer; pitch: PInteger): Integer; cdecl;
  SDL_LockTextureToSurface: function(texture: PSDL_Texture; const rect: PSDL_Rect; surface: PPSDL_Surface): Integer; cdecl;
  SDL_UnlockTexture: procedure(texture: PSDL_Texture); cdecl;
  SDL_RenderTargetSupported: function(renderer: PSDL_Renderer): SDL_bool; cdecl;
  SDL_SetRenderTarget: function(renderer: PSDL_Renderer; texture: PSDL_Texture): Integer; cdecl;
  SDL_GetRenderTarget: function(renderer: PSDL_Renderer): PSDL_Texture; cdecl;
  SDL_RenderSetLogicalSize: function(renderer: PSDL_Renderer; w: Integer; h: Integer): Integer; cdecl;
  SDL_RenderGetLogicalSize: procedure(renderer: PSDL_Renderer; w: PInteger; h: PInteger); cdecl;
  SDL_RenderSetIntegerScale: function(renderer: PSDL_Renderer; enable: SDL_bool): Integer; cdecl;
  SDL_RenderGetIntegerScale: function(renderer: PSDL_Renderer): SDL_bool; cdecl;
  SDL_RenderSetViewport: function(renderer: PSDL_Renderer; const rect: PSDL_Rect): Integer; cdecl;
  SDL_RenderGetViewport: procedure(renderer: PSDL_Renderer; rect: PSDL_Rect); cdecl;
  SDL_RenderSetClipRect: function(renderer: PSDL_Renderer; const rect: PSDL_Rect): Integer; cdecl;
  SDL_RenderGetClipRect: procedure(renderer: PSDL_Renderer; rect: PSDL_Rect); cdecl;
  SDL_RenderIsClipEnabled: function(renderer: PSDL_Renderer): SDL_bool; cdecl;
  SDL_RenderSetScale: function(renderer: PSDL_Renderer; scaleX: Single; scaleY: Single): Integer; cdecl;
  SDL_RenderGetScale: procedure(renderer: PSDL_Renderer; scaleX: PSingle; scaleY: PSingle); cdecl;
  SDL_RenderWindowToLogical: procedure(renderer: PSDL_Renderer; windowX: Integer; windowY: Integer; logicalX: PSingle; logicalY: PSingle); cdecl;
  SDL_RenderLogicalToWindow: procedure(renderer: PSDL_Renderer; logicalX: Single; logicalY: Single; windowX: PInteger; windowY: PInteger); cdecl;
  SDL_SetRenderDrawColor: function(renderer: PSDL_Renderer; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  SDL_GetRenderDrawColor: function(renderer: PSDL_Renderer; r: PUint8; g: PUint8; b: PUint8; a: PUint8): Integer; cdecl;
  SDL_SetRenderDrawBlendMode: function(renderer: PSDL_Renderer; blendMode: SDL_BlendMode): Integer; cdecl;
  SDL_GetRenderDrawBlendMode: function(renderer: PSDL_Renderer; blendMode: PSDL_BlendMode): Integer; cdecl;
  SDL_RenderClear: function(renderer: PSDL_Renderer): Integer; cdecl;
  SDL_RenderDrawPoint: function(renderer: PSDL_Renderer; x: Integer; y: Integer): Integer; cdecl;
  SDL_RenderDrawPoints: function(renderer: PSDL_Renderer; const points: PSDL_Point; count: Integer): Integer; cdecl;
  SDL_RenderDrawLine: function(renderer: PSDL_Renderer; x1: Integer; y1: Integer; x2: Integer; y2: Integer): Integer; cdecl;
  SDL_RenderDrawLines: function(renderer: PSDL_Renderer; const points: PSDL_Point; count: Integer): Integer; cdecl;
  SDL_RenderDrawRect: function(renderer: PSDL_Renderer; const rect: PSDL_Rect): Integer; cdecl;
  SDL_RenderDrawRects: function(renderer: PSDL_Renderer; const rects: PSDL_Rect; count: Integer): Integer; cdecl;
  SDL_RenderFillRect: function(renderer: PSDL_Renderer; const rect: PSDL_Rect): Integer; cdecl;
  SDL_RenderFillRects: function(renderer: PSDL_Renderer; const rects: PSDL_Rect; count: Integer): Integer; cdecl;
  SDL_RenderCopy: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_Rect; const dstrect: PSDL_Rect): Integer; cdecl;
  SDL_RenderCopyEx: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_Rect; const dstrect: PSDL_Rect; const angle: Double; const center: PSDL_Point; const flip: SDL_RendererFlip): Integer; cdecl;
  SDL_RenderDrawPointF: function(renderer: PSDL_Renderer; x: Single; y: Single): Integer; cdecl;
  SDL_RenderDrawPointsF: function(renderer: PSDL_Renderer; const points: PSDL_FPoint; count: Integer): Integer; cdecl;
  SDL_RenderDrawLineF: function(renderer: PSDL_Renderer; x1: Single; y1: Single; x2: Single; y2: Single): Integer; cdecl;
  SDL_RenderDrawLinesF: function(renderer: PSDL_Renderer; const points: PSDL_FPoint; count: Integer): Integer; cdecl;
  SDL_RenderDrawRectF: function(renderer: PSDL_Renderer; const rect: PSDL_FRect): Integer; cdecl;
  SDL_RenderDrawRectsF: function(renderer: PSDL_Renderer; const rects: PSDL_FRect; count: Integer): Integer; cdecl;
  SDL_RenderFillRectF: function(renderer: PSDL_Renderer; const rect: PSDL_FRect): Integer; cdecl;
  SDL_RenderFillRectsF: function(renderer: PSDL_Renderer; const rects: PSDL_FRect; count: Integer): Integer; cdecl;
  SDL_RenderCopyF: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_Rect; const dstrect: PSDL_FRect): Integer; cdecl;
  SDL_RenderCopyExF: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_Rect; const dstrect: PSDL_FRect; const angle: Double; const center: PSDL_FPoint; const flip: SDL_RendererFlip): Integer; cdecl;
  SDL_RenderGeometry: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const vertices: PSDL_Vertex; num_vertices: Integer; const indices: PInteger; num_indices: Integer): Integer; cdecl;
  SDL_RenderGeometryRaw: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const xy: PSingle; xy_stride: Integer; const color: PSDL_Color; color_stride: Integer; const uv: PSingle; uv_stride: Integer; num_vertices: Integer; const indices: Pointer; num_indices: Integer; size_indices: Integer): Integer; cdecl;
  SDL_RenderReadPixels: function(renderer: PSDL_Renderer; const rect: PSDL_Rect; format: Uint32; pixels: Pointer; pitch: Integer): Integer; cdecl;
  SDL_RenderPresent: procedure(renderer: PSDL_Renderer); cdecl;
  SDL_DestroyTexture: procedure(texture: PSDL_Texture); cdecl;
  SDL_DestroyRenderer: procedure(renderer: PSDL_Renderer); cdecl;
  SDL_RenderFlush: function(renderer: PSDL_Renderer): Integer; cdecl;
  SDL_GL_BindTexture: function(texture: PSDL_Texture; texw: PSingle; texh: PSingle): Integer; cdecl;
  SDL_GL_UnbindTexture: function(texture: PSDL_Texture): Integer; cdecl;
  SDL_RenderGetMetalLayer: function(renderer: PSDL_Renderer): Pointer; cdecl;
  SDL_RenderGetMetalCommandEncoder: function(renderer: PSDL_Renderer): Pointer; cdecl;
  SDL_RenderSetVSync: function(renderer: PSDL_Renderer; vsync: Integer): Integer; cdecl;
  SDL_CreateShapedWindow: function(const title: PUTF8Char; x: Cardinal; y: Cardinal; w: Cardinal; h: Cardinal; flags: Uint32): PSDL_Window; cdecl;
  SDL_IsShapedWindow: function(const window: PSDL_Window): SDL_bool; cdecl;
  SDL_SetWindowShape: function(window: PSDL_Window; shape: PSDL_Surface; shape_mode: PSDL_WindowShapeMode): Integer; cdecl;
  SDL_GetShapedWindowMode: function(window: PSDL_Window; shape_mode: PSDL_WindowShapeMode): Integer; cdecl;
  SDL_SetWindowsMessageHook: procedure(callback: SDL_WindowsMessageHook; userdata: Pointer); cdecl;
  SDL_Direct3D9GetAdapterIndex: function(displayIndex: Integer): Integer; cdecl;
  SDL_RenderGetD3D9Device: function(renderer: PSDL_Renderer): PIDirect3DDevice9; cdecl;
  SDL_RenderGetD3D11Device: function(renderer: PSDL_Renderer): PID3D11Device; cdecl;
  SDL_DXGIGetOutputInfo: function(displayIndex: Integer; adapterIndex: PInteger; outputIndex: PInteger): SDL_bool; cdecl;
  SDL_IsTablet: function(): SDL_bool; cdecl;
  SDL_OnApplicationWillTerminate: procedure(); cdecl;
  SDL_OnApplicationDidReceiveMemoryWarning: procedure(); cdecl;
  SDL_OnApplicationWillResignActive: procedure(); cdecl;
  SDL_OnApplicationDidEnterBackground: procedure(); cdecl;
  SDL_OnApplicationWillEnterForeground: procedure(); cdecl;
  SDL_OnApplicationDidBecomeActive: procedure(); cdecl;
  SDL_GetTicks: function(): Uint32; cdecl;
  SDL_GetTicks64: function(): Uint64; cdecl;
  SDL_GetPerformanceCounter: function(): Uint64; cdecl;
  SDL_GetPerformanceFrequency: function(): Uint64; cdecl;
  SDL_Delay: procedure(ms: Uint32); cdecl;
  SDL_AddTimer: function(interval: Uint32; callback: SDL_TimerCallback; param: Pointer): SDL_TimerID; cdecl;
  SDL_RemoveTimer: function(id: SDL_TimerID): SDL_bool; cdecl;
  SDL_GetVersion: procedure(ver: PSDL_version); cdecl;
  SDL_GetRevision: function(): PUTF8Char; cdecl;
  SDL_GetRevisionNumber: function(): Integer; cdecl;
  SDL_GetPreferredLocales: function(): PSDL_Locale; cdecl;
  SDL_OpenURL: function(const url: PUTF8Char): Integer; cdecl;
  SDL_Init: function(flags: Uint32): Integer; cdecl;
  SDL_InitSubSystem: function(flags: Uint32): Integer; cdecl;
  SDL_QuitSubSystem: procedure(flags: Uint32); cdecl;
  SDL_WasInit: function(flags: Uint32): Uint32; cdecl;
  SDL_Quit: procedure(); cdecl;
  Mix_Linked_Version: function(): PSDL_version; cdecl;
  Mix_Init: function(flags: Integer): Integer; cdecl;
  Mix_Quit: procedure(); cdecl;
  Mix_OpenAudio: function(frequency: Integer; format: Uint16; channels: Integer; chunksize: Integer): Integer; cdecl;
  Mix_OpenAudioDevice: function(frequency: Integer; format: Uint16; channels: Integer; chunksize: Integer; const device: PUTF8Char; allowed_changes: Integer): Integer; cdecl;
  Mix_QuerySpec: function(frequency: PInteger; format: PUint16; channels: PInteger): Integer; cdecl;
  Mix_AllocateChannels: function(numchans: Integer): Integer; cdecl;
  Mix_LoadWAV_RW: function(src: PSDL_RWops; freesrc: Integer): PMix_Chunk; cdecl;
  Mix_LoadWAV: function(const file_: PUTF8Char): PMix_Chunk; cdecl;
  Mix_LoadMUS: function(const file_: PUTF8Char): PMix_Music; cdecl;
  Mix_LoadMUS_RW: function(src: PSDL_RWops; freesrc: Integer): PMix_Music; cdecl;
  Mix_LoadMUSType_RW: function(src: PSDL_RWops; type_: Mix_MusicType; freesrc: Integer): PMix_Music; cdecl;
  Mix_QuickLoad_WAV: function(mem: PUint8): PMix_Chunk; cdecl;
  Mix_QuickLoad_RAW: function(mem: PUint8; len: Uint32): PMix_Chunk; cdecl;
  Mix_FreeChunk: procedure(chunk: PMix_Chunk); cdecl;
  Mix_FreeMusic: procedure(music: PMix_Music); cdecl;
  Mix_GetNumChunkDecoders: function(): Integer; cdecl;
  Mix_GetChunkDecoder: function(index: Integer): PUTF8Char; cdecl;
  Mix_HasChunkDecoder: function(const name: PUTF8Char): SDL_bool; cdecl;
  Mix_GetNumMusicDecoders: function(): Integer; cdecl;
  Mix_GetMusicDecoder: function(index: Integer): PUTF8Char; cdecl;
  Mix_HasMusicDecoder: function(const name: PUTF8Char): SDL_bool; cdecl;
  Mix_GetMusicType: function(const music: PMix_Music): Mix_MusicType; cdecl;
  Mix_GetMusicTitle: function(const music: PMix_Music): PUTF8Char; cdecl;
  Mix_GetMusicTitleTag: function(const music: PMix_Music): PUTF8Char; cdecl;
  Mix_GetMusicArtistTag: function(const music: PMix_Music): PUTF8Char; cdecl;
  Mix_GetMusicAlbumTag: function(const music: PMix_Music): PUTF8Char; cdecl;
  Mix_GetMusicCopyrightTag: function(const music: PMix_Music): PUTF8Char; cdecl;
  Mix_SetPostMix: procedure(mix_func: Mix_SetPostMix_mix_func; arg: Pointer); cdecl;
  Mix_HookMusic: procedure(mix_func: Mix_HookMusic_mix_func; arg: Pointer); cdecl;
  Mix_HookMusicFinished: procedure(music_finished: Mix_HookMusicFinished_music_finished); cdecl;
  Mix_GetMusicHookData: function(): Pointer; cdecl;
  Mix_ChannelFinished: procedure(channel_finished: Mix_ChannelFinished_channel_finished); cdecl;
  Mix_RegisterEffect: function(chan: Integer; f: Mix_EffectFunc_t; d: Mix_EffectDone_t; arg: Pointer): Integer; cdecl;
  Mix_UnregisterEffect: function(channel: Integer; f: Mix_EffectFunc_t): Integer; cdecl;
  Mix_UnregisterAllEffects: function(channel: Integer): Integer; cdecl;
  Mix_SetPanning: function(channel: Integer; left: Uint8; right: Uint8): Integer; cdecl;
  Mix_SetPosition: function(channel: Integer; angle: Sint16; distance: Uint8): Integer; cdecl;
  Mix_SetDistance: function(channel: Integer; distance: Uint8): Integer; cdecl;
  Mix_SetReverseStereo: function(channel: Integer; flip: Integer): Integer; cdecl;
  Mix_ReserveChannels: function(num: Integer): Integer; cdecl;
  Mix_GroupChannel: function(which: Integer; tag: Integer): Integer; cdecl;
  Mix_GroupChannels: function(from: Integer; to_: Integer; tag: Integer): Integer; cdecl;
  Mix_GroupAvailable: function(tag: Integer): Integer; cdecl;
  Mix_GroupCount: function(tag: Integer): Integer; cdecl;
  Mix_GroupOldest: function(tag: Integer): Integer; cdecl;
  Mix_GroupNewer: function(tag: Integer): Integer; cdecl;
  Mix_PlayChannel: function(channel: Integer; chunk: PMix_Chunk; loops: Integer): Integer; cdecl;
  Mix_PlayChannelTimed: function(channel: Integer; chunk: PMix_Chunk; loops: Integer; ticks: Integer): Integer; cdecl;
  Mix_PlayMusic: function(music: PMix_Music; loops: Integer): Integer; cdecl;
  Mix_FadeInMusic: function(music: PMix_Music; loops: Integer; ms: Integer): Integer; cdecl;
  Mix_FadeInMusicPos: function(music: PMix_Music; loops: Integer; ms: Integer; position: Double): Integer; cdecl;
  Mix_FadeInChannel: function(channel: Integer; chunk: PMix_Chunk; loops: Integer; ms: Integer): Integer; cdecl;
  Mix_FadeInChannelTimed: function(channel: Integer; chunk: PMix_Chunk; loops: Integer; ms: Integer; ticks: Integer): Integer; cdecl;
  Mix_Volume: function(channel: Integer; volume: Integer): Integer; cdecl;
  Mix_VolumeChunk: function(chunk: PMix_Chunk; volume: Integer): Integer; cdecl;
  Mix_VolumeMusic: function(volume: Integer): Integer; cdecl;
  Mix_GetMusicVolume: function(music: PMix_Music): Integer; cdecl;
  Mix_MasterVolume: function(volume: Integer): Integer; cdecl;
  Mix_HaltChannel: function(channel: Integer): Integer; cdecl;
  Mix_HaltGroup: function(tag: Integer): Integer; cdecl;
  Mix_HaltMusic: function(): Integer; cdecl;
  Mix_ExpireChannel: function(channel: Integer; ticks: Integer): Integer; cdecl;
  Mix_FadeOutChannel: function(which: Integer; ms: Integer): Integer; cdecl;
  Mix_FadeOutGroup: function(tag: Integer; ms: Integer): Integer; cdecl;
  Mix_FadeOutMusic: function(ms: Integer): Integer; cdecl;
  Mix_FadingMusic: function(): Mix_Fading; cdecl;
  Mix_FadingChannel: function(which: Integer): Mix_Fading; cdecl;
  Mix_Pause: procedure(channel: Integer); cdecl;
  Mix_Resume: procedure(channel: Integer); cdecl;
  Mix_Paused: function(channel: Integer): Integer; cdecl;
  Mix_PauseMusic: procedure(); cdecl;
  Mix_ResumeMusic: procedure(); cdecl;
  Mix_RewindMusic: procedure(); cdecl;
  Mix_PausedMusic: function(): Integer; cdecl;
  Mix_ModMusicJumpToOrder: function(order: Integer): Integer; cdecl;
  Mix_SetMusicPosition: function(position: Double): Integer; cdecl;
  Mix_GetMusicPosition: function(music: PMix_Music): Double; cdecl;
  Mix_MusicDuration: function(music: PMix_Music): Double; cdecl;
  Mix_GetMusicLoopStartTime: function(music: PMix_Music): Double; cdecl;
  Mix_GetMusicLoopEndTime: function(music: PMix_Music): Double; cdecl;
  Mix_GetMusicLoopLengthTime: function(music: PMix_Music): Double; cdecl;
  Mix_Playing: function(channel: Integer): Integer; cdecl;
  Mix_PlayingMusic: function(): Integer; cdecl;
  Mix_SetMusicCMD: function(const command: PUTF8Char): Integer; cdecl;
  Mix_SetSynchroValue: function(value: Integer): Integer; cdecl;
  Mix_GetSynchroValue: function(): Integer; cdecl;
  Mix_SetSoundFonts: function(const paths: PUTF8Char): Integer; cdecl;
  Mix_GetSoundFonts: function(): PUTF8Char; cdecl;
  Mix_EachSoundFont: function(function_: Mix_EachSoundFont_function; data: Pointer): Integer; cdecl;
  Mix_SetTimidityCfg: function(const path: PUTF8Char): Integer; cdecl;
  Mix_GetTimidityCfg: function(): PUTF8Char; cdecl;
  Mix_GetChunk: function(channel: Integer): PMix_Chunk; cdecl;
  Mix_CloseAudio: procedure(); cdecl;
  SDLNet_Linked_Version: function(): PSDLNet_version; cdecl;
  SDLNet_Init: function(): Integer; cdecl;
  SDLNet_Quit: procedure(); cdecl;
  SDLNet_ResolveHost: function(address: PIPaddress; const host: PUTF8Char; port: Uint16): Integer; cdecl;
  SDLNet_ResolveIP: function(const ip: PIPaddress): PUTF8Char; cdecl;
  SDLNet_GetLocalAddresses: function(addresses: PIPaddress; maxcount: Integer): Integer; cdecl;
  SDLNet_TCP_Open: function(ip: PIPaddress): TCPsocket; cdecl;
  SDLNet_TCP_Accept: function(server: TCPsocket): TCPsocket; cdecl;
  SDLNet_TCP_GetPeerAddress: function(sock: TCPsocket): PIPaddress; cdecl;
  SDLNet_TCP_Send: function(sock: TCPsocket; const data: Pointer; len: Integer): Integer; cdecl;
  SDLNet_TCP_Recv: function(sock: TCPsocket; data: Pointer; maxlen: Integer): Integer; cdecl;
  SDLNet_TCP_Close: procedure(sock: TCPsocket); cdecl;
  SDLNet_AllocPacket: function(size: Integer): PUDPpacket; cdecl;
  SDLNet_ResizePacket: function(packet: PUDPpacket; newsize: Integer): Integer; cdecl;
  SDLNet_FreePacket: procedure(packet: PUDPpacket); cdecl;
  SDLNet_AllocPacketV: function(howmany: Integer; size: Integer): PPUDPpacket; cdecl;
  SDLNet_FreePacketV: procedure(packetV: PPUDPpacket); cdecl;
  SDLNet_UDP_Open: function(port: Uint16): UDPsocket; cdecl;
  SDLNet_UDP_SetPacketLoss: procedure(sock: UDPsocket; percent: Integer); cdecl;
  SDLNet_UDP_Bind: function(sock: UDPsocket; channel: Integer; const address: PIPaddress): Integer; cdecl;
  SDLNet_UDP_Unbind: procedure(sock: UDPsocket; channel: Integer); cdecl;
  SDLNet_UDP_GetPeerAddress: function(sock: UDPsocket; channel: Integer): PIPaddress; cdecl;
  SDLNet_UDP_SendV: function(sock: UDPsocket; packets: PPUDPpacket; npackets: Integer): Integer; cdecl;
  SDLNet_UDP_Send: function(sock: UDPsocket; channel: Integer; packet: PUDPpacket): Integer; cdecl;
  SDLNet_UDP_RecvV: function(sock: UDPsocket; packets: PPUDPpacket): Integer; cdecl;
  SDLNet_UDP_Recv: function(sock: UDPsocket; packet: PUDPpacket): Integer; cdecl;
  SDLNet_UDP_Close: procedure(sock: UDPsocket); cdecl;
  SDLNet_AllocSocketSet: function(maxsockets: Integer): SDLNet_SocketSet; cdecl;
  SDLNet_AddSocket: function(set_: SDLNet_SocketSet; sock: SDLNet_GenericSocket): Integer; cdecl;
  SDLNet_DelSocket: function(set_: SDLNet_SocketSet; sock: SDLNet_GenericSocket): Integer; cdecl;
  SDLNet_CheckSockets: function(set_: SDLNet_SocketSet; timeout: Uint32): Integer; cdecl;
  SDLNet_FreeSocketSet: procedure(set_: SDLNet_SocketSet); cdecl;
  SDLNet_SetError: procedure(const fmt: PUTF8Char) varargs; cdecl;
  SDLNet_GetError: function(): PUTF8Char; cdecl;
  TTF_Linked_Version: function(): PSDL_version; cdecl;
  TTF_GetFreeTypeVersion: procedure(major: PInteger; minor: PInteger; patch: PInteger); cdecl;
  TTF_GetHarfBuzzVersion: procedure(major: PInteger; minor: PInteger; patch: PInteger); cdecl;
  TTF_ByteSwappedUNICODE: procedure(swapped: SDL_bool); cdecl;
  TTF_Init: function(): Integer; cdecl;
  TTF_OpenFont: function(const file_: PUTF8Char; ptsize: Integer): PTTF_Font; cdecl;
  TTF_OpenFontIndex: function(const file_: PUTF8Char; ptsize: Integer; index: Integer): PTTF_Font; cdecl;
  TTF_OpenFontRW: function(src: PSDL_RWops; freesrc: Integer; ptsize: Integer): PTTF_Font; cdecl;
  TTF_OpenFontIndexRW: function(src: PSDL_RWops; freesrc: Integer; ptsize: Integer; index: Integer): PTTF_Font; cdecl;
  TTF_OpenFontDPI: function(const file_: PUTF8Char; ptsize: Integer; hdpi: Cardinal; vdpi: Cardinal): PTTF_Font; cdecl;
  TTF_OpenFontIndexDPI: function(const file_: PUTF8Char; ptsize: Integer; index: Integer; hdpi: Cardinal; vdpi: Cardinal): PTTF_Font; cdecl;
  TTF_OpenFontDPIRW: function(src: PSDL_RWops; freesrc: Integer; ptsize: Integer; hdpi: Cardinal; vdpi: Cardinal): PTTF_Font; cdecl;
  TTF_OpenFontIndexDPIRW: function(src: PSDL_RWops; freesrc: Integer; ptsize: Integer; index: Integer; hdpi: Cardinal; vdpi: Cardinal): PTTF_Font; cdecl;
  TTF_SetFontSize: function(font: PTTF_Font; ptsize: Integer): Integer; cdecl;
  TTF_SetFontSizeDPI: function(font: PTTF_Font; ptsize: Integer; hdpi: Cardinal; vdpi: Cardinal): Integer; cdecl;
  TTF_GetFontStyle: function(const font: PTTF_Font): Integer; cdecl;
  TTF_SetFontStyle: procedure(font: PTTF_Font; style: Integer); cdecl;
  TTF_GetFontOutline: function(const font: PTTF_Font): Integer; cdecl;
  TTF_SetFontOutline: procedure(font: PTTF_Font; outline: Integer); cdecl;
  TTF_GetFontHinting: function(const font: PTTF_Font): Integer; cdecl;
  TTF_SetFontHinting: procedure(font: PTTF_Font; hinting: Integer); cdecl;
  TTF_GetFontWrappedAlign: function(const font: PTTF_Font): Integer; cdecl;
  TTF_SetFontWrappedAlign: procedure(font: PTTF_Font; align: Integer); cdecl;
  TTF_FontHeight: function(const font: PTTF_Font): Integer; cdecl;
  TTF_FontAscent: function(const font: PTTF_Font): Integer; cdecl;
  TTF_FontDescent: function(const font: PTTF_Font): Integer; cdecl;
  TTF_FontLineSkip: function(const font: PTTF_Font): Integer; cdecl;
  TTF_GetFontKerning: function(const font: PTTF_Font): Integer; cdecl;
  TTF_SetFontKerning: procedure(font: PTTF_Font; allowed: Integer); cdecl;
  TTF_FontFaces: function(const font: PTTF_Font): Integer; cdecl;
  TTF_FontFaceIsFixedWidth: function(const font: PTTF_Font): Integer; cdecl;
  TTF_FontFaceFamilyName: function(const font: PTTF_Font): PUTF8Char; cdecl;
  TTF_FontFaceStyleName: function(const font: PTTF_Font): PUTF8Char; cdecl;
  TTF_GlyphIsProvided: function(font: PTTF_Font; ch: Uint16): Integer; cdecl;
  TTF_GlyphIsProvided32: function(font: PTTF_Font; ch: Uint32): Integer; cdecl;
  TTF_GlyphMetrics: function(font: PTTF_Font; ch: Uint16; minx: PInteger; maxx: PInteger; miny: PInteger; maxy: PInteger; advance: PInteger): Integer; cdecl;
  TTF_GlyphMetrics32: function(font: PTTF_Font; ch: Uint32; minx: PInteger; maxx: PInteger; miny: PInteger; maxy: PInteger; advance: PInteger): Integer; cdecl;
  TTF_SizeText: function(font: PTTF_Font; const text: PUTF8Char; w: PInteger; h: PInteger): Integer; cdecl;
  TTF_SizeUTF8: function(font: PTTF_Font; const text: PUTF8Char; w: PInteger; h: PInteger): Integer; cdecl;
  TTF_SizeUNICODE: function(font: PTTF_Font; const text: PUint16; w: PInteger; h: PInteger): Integer; cdecl;
  TTF_MeasureText: function(font: PTTF_Font; const text: PUTF8Char; measure_width: Integer; extent: PInteger; count: PInteger): Integer; cdecl;
  TTF_MeasureUTF8: function(font: PTTF_Font; const text: PUTF8Char; measure_width: Integer; extent: PInteger; count: PInteger): Integer; cdecl;
  TTF_MeasureUNICODE: function(font: PTTF_Font; const text: PUint16; measure_width: Integer; extent: PInteger; count: PInteger): Integer; cdecl;
  TTF_RenderText_Solid: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderUTF8_Solid: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderUNICODE_Solid: function(font: PTTF_Font; const text: PUint16; fg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderText_Solid_Wrapped: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; wrapLength: Uint32): PSDL_Surface; cdecl;
  TTF_RenderUTF8_Solid_Wrapped: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; wrapLength: Uint32): PSDL_Surface; cdecl;
  TTF_RenderUNICODE_Solid_Wrapped: function(font: PTTF_Font; const text: PUint16; fg: SDL_Color; wrapLength: Uint32): PSDL_Surface; cdecl;
  TTF_RenderGlyph_Solid: function(font: PTTF_Font; ch: Uint16; fg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderGlyph32_Solid: function(font: PTTF_Font; ch: Uint32; fg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderText_Shaded: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderUTF8_Shaded: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderUNICODE_Shaded: function(font: PTTF_Font; const text: PUint16; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderText_Shaded_Wrapped: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; bg: SDL_Color; wrapLength: Uint32): PSDL_Surface; cdecl;
  TTF_RenderUTF8_Shaded_Wrapped: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; bg: SDL_Color; wrapLength: Uint32): PSDL_Surface; cdecl;
  TTF_RenderUNICODE_Shaded_Wrapped: function(font: PTTF_Font; const text: PUint16; fg: SDL_Color; bg: SDL_Color; wrapLength: Uint32): PSDL_Surface; cdecl;
  TTF_RenderGlyph_Shaded: function(font: PTTF_Font; ch: Uint16; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderGlyph32_Shaded: function(font: PTTF_Font; ch: Uint32; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderText_Blended: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderUTF8_Blended: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderUNICODE_Blended: function(font: PTTF_Font; const text: PUint16; fg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderText_Blended_Wrapped: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; wrapLength: Uint32): PSDL_Surface; cdecl;
  TTF_RenderUTF8_Blended_Wrapped: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; wrapLength: Uint32): PSDL_Surface; cdecl;
  TTF_RenderUNICODE_Blended_Wrapped: function(font: PTTF_Font; const text: PUint16; fg: SDL_Color; wrapLength: Uint32): PSDL_Surface; cdecl;
  TTF_RenderGlyph_Blended: function(font: PTTF_Font; ch: Uint16; fg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderGlyph32_Blended: function(font: PTTF_Font; ch: Uint32; fg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderText_LCD: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderUTF8_LCD: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderUNICODE_LCD: function(font: PTTF_Font; const text: PUint16; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderText_LCD_Wrapped: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; bg: SDL_Color; wrapLength: Uint32): PSDL_Surface; cdecl;
  TTF_RenderUTF8_LCD_Wrapped: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; bg: SDL_Color; wrapLength: Uint32): PSDL_Surface; cdecl;
  TTF_RenderUNICODE_LCD_Wrapped: function(font: PTTF_Font; const text: PUint16; fg: SDL_Color; bg: SDL_Color; wrapLength: Uint32): PSDL_Surface; cdecl;
  TTF_RenderGlyph_LCD: function(font: PTTF_Font; ch: Uint16; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderGlyph32_LCD: function(font: PTTF_Font; ch: Uint32; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;
  TTF_CloseFont: procedure(font: PTTF_Font); cdecl;
  TTF_Quit: procedure(); cdecl;
  TTF_WasInit: function(): Integer; cdecl;
  TTF_GetFontKerningSize: function(font: PTTF_Font; prev_index: Integer; index: Integer): Integer; cdecl;
  TTF_GetFontKerningSizeGlyphs: function(font: PTTF_Font; previous_ch: Uint16; ch: Uint16): Integer; cdecl;
  TTF_GetFontKerningSizeGlyphs32: function(font: PTTF_Font; previous_ch: Uint32; ch: Uint32): Integer; cdecl;
  TTF_SetFontSDF: function(font: PTTF_Font; on_off: SDL_bool): Integer; cdecl;
  TTF_GetFontSDF: function(const font: PTTF_Font): SDL_bool; cdecl;
  TTF_SetDirection: function(direction: Integer): Integer; cdecl;
  TTF_SetScript: function(script: Integer): Integer; cdecl;
  TTF_SetFontDirection: function(font: PTTF_Font; direction: TTF_Direction): Integer; cdecl;
  TTF_SetFontScriptName: function(font: PTTF_Font; const script: PUTF8Char): Integer; cdecl;
  IMG_Linked_Version: function(): PSDL_version; cdecl;
  IMG_Init: function(flags: Integer): Integer; cdecl;
  IMG_Quit: procedure(); cdecl;
  IMG_LoadTyped_RW: function(src: PSDL_RWops; freesrc: Integer; const type_: PUTF8Char): PSDL_Surface; cdecl;
  IMG_Load: function(const file_: PUTF8Char): PSDL_Surface; cdecl;
  IMG_Load_RW: function(src: PSDL_RWops; freesrc: Integer): PSDL_Surface; cdecl;
  IMG_LoadTexture: function(renderer: PSDL_Renderer; const file_: PUTF8Char): PSDL_Texture; cdecl;
  IMG_LoadTexture_RW: function(renderer: PSDL_Renderer; src: PSDL_RWops; freesrc: Integer): PSDL_Texture; cdecl;
  IMG_LoadTextureTyped_RW: function(renderer: PSDL_Renderer; src: PSDL_RWops; freesrc: Integer; const type_: PUTF8Char): PSDL_Texture; cdecl;
  IMG_isAVIF: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isICO: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isCUR: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isBMP: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isGIF: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isJPG: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isJXL: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isLBM: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isPCX: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isPNG: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isPNM: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isSVG: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isQOI: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isTIF: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isXCF: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isXPM: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isXV: function(src: PSDL_RWops): Integer; cdecl;
  IMG_isWEBP: function(src: PSDL_RWops): Integer; cdecl;
  IMG_LoadAVIF_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadICO_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadCUR_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadBMP_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadGIF_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadJPG_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadJXL_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadLBM_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadPCX_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadPNG_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadPNM_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadSVG_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadQOI_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadTGA_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadTIF_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadXCF_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadXPM_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadXV_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadWEBP_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;
  IMG_LoadSizedSVG_RW: function(src: PSDL_RWops; width: Integer; height: Integer): PSDL_Surface; cdecl;
  IMG_ReadXPMFromArray: function(xpm: PPUTF8Char): PSDL_Surface; cdecl;
  IMG_ReadXPMFromArrayToRGB888: function(xpm: PPUTF8Char): PSDL_Surface; cdecl;
  IMG_SavePNG: function(surface: PSDL_Surface; const file_: PUTF8Char): Integer; cdecl;
  IMG_SavePNG_RW: function(surface: PSDL_Surface; dst: PSDL_RWops; freedst: Integer): Integer; cdecl;
  IMG_SaveJPG: function(surface: PSDL_Surface; const file_: PUTF8Char; quality: Integer): Integer; cdecl;
  IMG_SaveJPG_RW: function(surface: PSDL_Surface; dst: PSDL_RWops; freedst: Integer; quality: Integer): Integer; cdecl;
  IMG_LoadAnimation: function(const file_: PUTF8Char): PIMG_Animation; cdecl;
  IMG_LoadAnimation_RW: function(src: PSDL_RWops; freesrc: Integer): PIMG_Animation; cdecl;
  IMG_LoadAnimationTyped_RW: function(src: PSDL_RWops; freesrc: Integer; const type_: PUTF8Char): PIMG_Animation; cdecl;
  IMG_FreeAnimation: procedure(anim: PIMG_Animation); cdecl;
  IMG_LoadGIFAnimation_RW: function(src: PSDL_RWops): PIMG_Animation; cdecl;

implementation

{$R SDL.res}

uses
  System.SysUtils,
  System.Classes,
  System.IOUtils,
  WinApi.Windows;

procedure GetExports(const aDLLHandle: THandle);
begin
{$REGION 'Exports'}
  if aDllHandle = 0 then Exit;
  IMG_FreeAnimation := GetProcAddress(aDLLHandle, 'IMG_FreeAnimation');
  IMG_Init := GetProcAddress(aDLLHandle, 'IMG_Init');
  IMG_isAVIF := GetProcAddress(aDLLHandle, 'IMG_isAVIF');
  IMG_isBMP := GetProcAddress(aDLLHandle, 'IMG_isBMP');
  IMG_isCUR := GetProcAddress(aDLLHandle, 'IMG_isCUR');
  IMG_isGIF := GetProcAddress(aDLLHandle, 'IMG_isGIF');
  IMG_isICO := GetProcAddress(aDLLHandle, 'IMG_isICO');
  IMG_isJPG := GetProcAddress(aDLLHandle, 'IMG_isJPG');
  IMG_isJXL := GetProcAddress(aDLLHandle, 'IMG_isJXL');
  IMG_isLBM := GetProcAddress(aDLLHandle, 'IMG_isLBM');
  IMG_isPCX := GetProcAddress(aDLLHandle, 'IMG_isPCX');
  IMG_isPNG := GetProcAddress(aDLLHandle, 'IMG_isPNG');
  IMG_isPNM := GetProcAddress(aDLLHandle, 'IMG_isPNM');
  IMG_isQOI := GetProcAddress(aDLLHandle, 'IMG_isQOI');
  IMG_isSVG := GetProcAddress(aDLLHandle, 'IMG_isSVG');
  IMG_isTIF := GetProcAddress(aDLLHandle, 'IMG_isTIF');
  IMG_isWEBP := GetProcAddress(aDLLHandle, 'IMG_isWEBP');
  IMG_isXCF := GetProcAddress(aDLLHandle, 'IMG_isXCF');
  IMG_isXPM := GetProcAddress(aDLLHandle, 'IMG_isXPM');
  IMG_isXV := GetProcAddress(aDLLHandle, 'IMG_isXV');
  IMG_Linked_Version := GetProcAddress(aDLLHandle, 'IMG_Linked_Version');
  IMG_Load := GetProcAddress(aDLLHandle, 'IMG_Load');
  IMG_Load_RW := GetProcAddress(aDLLHandle, 'IMG_Load_RW');
  IMG_LoadAnimation := GetProcAddress(aDLLHandle, 'IMG_LoadAnimation');
  IMG_LoadAnimation_RW := GetProcAddress(aDLLHandle, 'IMG_LoadAnimation_RW');
  IMG_LoadAnimationTyped_RW := GetProcAddress(aDLLHandle, 'IMG_LoadAnimationTyped_RW');
  IMG_LoadAVIF_RW := GetProcAddress(aDLLHandle, 'IMG_LoadAVIF_RW');
  IMG_LoadBMP_RW := GetProcAddress(aDLLHandle, 'IMG_LoadBMP_RW');
  IMG_LoadCUR_RW := GetProcAddress(aDLLHandle, 'IMG_LoadCUR_RW');
  IMG_LoadGIF_RW := GetProcAddress(aDLLHandle, 'IMG_LoadGIF_RW');
  IMG_LoadGIFAnimation_RW := GetProcAddress(aDLLHandle, 'IMG_LoadGIFAnimation_RW');
  IMG_LoadICO_RW := GetProcAddress(aDLLHandle, 'IMG_LoadICO_RW');
  IMG_LoadJPG_RW := GetProcAddress(aDLLHandle, 'IMG_LoadJPG_RW');
  IMG_LoadJXL_RW := GetProcAddress(aDLLHandle, 'IMG_LoadJXL_RW');
  IMG_LoadLBM_RW := GetProcAddress(aDLLHandle, 'IMG_LoadLBM_RW');
  IMG_LoadPCX_RW := GetProcAddress(aDLLHandle, 'IMG_LoadPCX_RW');
  IMG_LoadPNG_RW := GetProcAddress(aDLLHandle, 'IMG_LoadPNG_RW');
  IMG_LoadPNM_RW := GetProcAddress(aDLLHandle, 'IMG_LoadPNM_RW');
  IMG_LoadQOI_RW := GetProcAddress(aDLLHandle, 'IMG_LoadQOI_RW');
  IMG_LoadSizedSVG_RW := GetProcAddress(aDLLHandle, 'IMG_LoadSizedSVG_RW');
  IMG_LoadSVG_RW := GetProcAddress(aDLLHandle, 'IMG_LoadSVG_RW');
  IMG_LoadTexture := GetProcAddress(aDLLHandle, 'IMG_LoadTexture');
  IMG_LoadTexture_RW := GetProcAddress(aDLLHandle, 'IMG_LoadTexture_RW');
  IMG_LoadTextureTyped_RW := GetProcAddress(aDLLHandle, 'IMG_LoadTextureTyped_RW');
  IMG_LoadTGA_RW := GetProcAddress(aDLLHandle, 'IMG_LoadTGA_RW');
  IMG_LoadTIF_RW := GetProcAddress(aDLLHandle, 'IMG_LoadTIF_RW');
  IMG_LoadTyped_RW := GetProcAddress(aDLLHandle, 'IMG_LoadTyped_RW');
  IMG_LoadWEBP_RW := GetProcAddress(aDLLHandle, 'IMG_LoadWEBP_RW');
  IMG_LoadXCF_RW := GetProcAddress(aDLLHandle, 'IMG_LoadXCF_RW');
  IMG_LoadXPM_RW := GetProcAddress(aDLLHandle, 'IMG_LoadXPM_RW');
  IMG_LoadXV_RW := GetProcAddress(aDLLHandle, 'IMG_LoadXV_RW');
  IMG_Quit := GetProcAddress(aDLLHandle, 'IMG_Quit');
  IMG_ReadXPMFromArray := GetProcAddress(aDLLHandle, 'IMG_ReadXPMFromArray');
  IMG_ReadXPMFromArrayToRGB888 := GetProcAddress(aDLLHandle, 'IMG_ReadXPMFromArrayToRGB888');
  IMG_SaveJPG := GetProcAddress(aDLLHandle, 'IMG_SaveJPG');
  IMG_SaveJPG_RW := GetProcAddress(aDLLHandle, 'IMG_SaveJPG_RW');
  IMG_SavePNG := GetProcAddress(aDLLHandle, 'IMG_SavePNG');
  IMG_SavePNG_RW := GetProcAddress(aDLLHandle, 'IMG_SavePNG_RW');
  Mix_AllocateChannels := GetProcAddress(aDLLHandle, 'Mix_AllocateChannels');
  Mix_ChannelFinished := GetProcAddress(aDLLHandle, 'Mix_ChannelFinished');
  Mix_CloseAudio := GetProcAddress(aDLLHandle, 'Mix_CloseAudio');
  Mix_EachSoundFont := GetProcAddress(aDLLHandle, 'Mix_EachSoundFont');
  Mix_ExpireChannel := GetProcAddress(aDLLHandle, 'Mix_ExpireChannel');
  Mix_FadeInChannel := GetProcAddress(aDLLHandle, 'Mix_FadeInChannel');
  Mix_FadeInChannelTimed := GetProcAddress(aDLLHandle, 'Mix_FadeInChannelTimed');
  Mix_FadeInMusic := GetProcAddress(aDLLHandle, 'Mix_FadeInMusic');
  Mix_FadeInMusicPos := GetProcAddress(aDLLHandle, 'Mix_FadeInMusicPos');
  Mix_FadeOutChannel := GetProcAddress(aDLLHandle, 'Mix_FadeOutChannel');
  Mix_FadeOutGroup := GetProcAddress(aDLLHandle, 'Mix_FadeOutGroup');
  Mix_FadeOutMusic := GetProcAddress(aDLLHandle, 'Mix_FadeOutMusic');
  Mix_FadingChannel := GetProcAddress(aDLLHandle, 'Mix_FadingChannel');
  Mix_FadingMusic := GetProcAddress(aDLLHandle, 'Mix_FadingMusic');
  Mix_FreeChunk := GetProcAddress(aDLLHandle, 'Mix_FreeChunk');
  Mix_FreeMusic := GetProcAddress(aDLLHandle, 'Mix_FreeMusic');
  Mix_GetChunk := GetProcAddress(aDLLHandle, 'Mix_GetChunk');
  Mix_GetChunkDecoder := GetProcAddress(aDLLHandle, 'Mix_GetChunkDecoder');
  Mix_GetMusicAlbumTag := GetProcAddress(aDLLHandle, 'Mix_GetMusicAlbumTag');
  Mix_GetMusicArtistTag := GetProcAddress(aDLLHandle, 'Mix_GetMusicArtistTag');
  Mix_GetMusicCopyrightTag := GetProcAddress(aDLLHandle, 'Mix_GetMusicCopyrightTag');
  Mix_GetMusicDecoder := GetProcAddress(aDLLHandle, 'Mix_GetMusicDecoder');
  Mix_GetMusicHookData := GetProcAddress(aDLLHandle, 'Mix_GetMusicHookData');
  Mix_GetMusicLoopEndTime := GetProcAddress(aDLLHandle, 'Mix_GetMusicLoopEndTime');
  Mix_GetMusicLoopLengthTime := GetProcAddress(aDLLHandle, 'Mix_GetMusicLoopLengthTime');
  Mix_GetMusicLoopStartTime := GetProcAddress(aDLLHandle, 'Mix_GetMusicLoopStartTime');
  Mix_GetMusicPosition := GetProcAddress(aDLLHandle, 'Mix_GetMusicPosition');
  Mix_GetMusicTitle := GetProcAddress(aDLLHandle, 'Mix_GetMusicTitle');
  Mix_GetMusicTitleTag := GetProcAddress(aDLLHandle, 'Mix_GetMusicTitleTag');
  Mix_GetMusicType := GetProcAddress(aDLLHandle, 'Mix_GetMusicType');
  Mix_GetMusicVolume := GetProcAddress(aDLLHandle, 'Mix_GetMusicVolume');
  Mix_GetNumChunkDecoders := GetProcAddress(aDLLHandle, 'Mix_GetNumChunkDecoders');
  Mix_GetNumMusicDecoders := GetProcAddress(aDLLHandle, 'Mix_GetNumMusicDecoders');
  Mix_GetSoundFonts := GetProcAddress(aDLLHandle, 'Mix_GetSoundFonts');
  Mix_GetSynchroValue := GetProcAddress(aDLLHandle, 'Mix_GetSynchroValue');
  Mix_GetTimidityCfg := GetProcAddress(aDLLHandle, 'Mix_GetTimidityCfg');
  Mix_GroupAvailable := GetProcAddress(aDLLHandle, 'Mix_GroupAvailable');
  Mix_GroupChannel := GetProcAddress(aDLLHandle, 'Mix_GroupChannel');
  Mix_GroupChannels := GetProcAddress(aDLLHandle, 'Mix_GroupChannels');
  Mix_GroupCount := GetProcAddress(aDLLHandle, 'Mix_GroupCount');
  Mix_GroupNewer := GetProcAddress(aDLLHandle, 'Mix_GroupNewer');
  Mix_GroupOldest := GetProcAddress(aDLLHandle, 'Mix_GroupOldest');
  Mix_HaltChannel := GetProcAddress(aDLLHandle, 'Mix_HaltChannel');
  Mix_HaltGroup := GetProcAddress(aDLLHandle, 'Mix_HaltGroup');
  Mix_HaltMusic := GetProcAddress(aDLLHandle, 'Mix_HaltMusic');
  Mix_HasChunkDecoder := GetProcAddress(aDLLHandle, 'Mix_HasChunkDecoder');
  Mix_HasMusicDecoder := GetProcAddress(aDLLHandle, 'Mix_HasMusicDecoder');
  Mix_HookMusic := GetProcAddress(aDLLHandle, 'Mix_HookMusic');
  Mix_HookMusicFinished := GetProcAddress(aDLLHandle, 'Mix_HookMusicFinished');
  Mix_Init := GetProcAddress(aDLLHandle, 'Mix_Init');
  Mix_Linked_Version := GetProcAddress(aDLLHandle, 'Mix_Linked_Version');
  Mix_LoadMUS := GetProcAddress(aDLLHandle, 'Mix_LoadMUS');
  Mix_LoadMUS_RW := GetProcAddress(aDLLHandle, 'Mix_LoadMUS_RW');
  Mix_LoadMUSType_RW := GetProcAddress(aDLLHandle, 'Mix_LoadMUSType_RW');
  Mix_LoadWAV := GetProcAddress(aDLLHandle, 'Mix_LoadWAV');
  Mix_LoadWAV_RW := GetProcAddress(aDLLHandle, 'Mix_LoadWAV_RW');
  Mix_MasterVolume := GetProcAddress(aDLLHandle, 'Mix_MasterVolume');
  Mix_ModMusicJumpToOrder := GetProcAddress(aDLLHandle, 'Mix_ModMusicJumpToOrder');
  Mix_MusicDuration := GetProcAddress(aDLLHandle, 'Mix_MusicDuration');
  Mix_OpenAudio := GetProcAddress(aDLLHandle, 'Mix_OpenAudio');
  Mix_OpenAudioDevice := GetProcAddress(aDLLHandle, 'Mix_OpenAudioDevice');
  Mix_Pause := GetProcAddress(aDLLHandle, 'Mix_Pause');
  Mix_Paused := GetProcAddress(aDLLHandle, 'Mix_Paused');
  Mix_PausedMusic := GetProcAddress(aDLLHandle, 'Mix_PausedMusic');
  Mix_PauseMusic := GetProcAddress(aDLLHandle, 'Mix_PauseMusic');
  Mix_PlayChannel := GetProcAddress(aDLLHandle, 'Mix_PlayChannel');
  Mix_PlayChannelTimed := GetProcAddress(aDLLHandle, 'Mix_PlayChannelTimed');
  Mix_Playing := GetProcAddress(aDLLHandle, 'Mix_Playing');
  Mix_PlayingMusic := GetProcAddress(aDLLHandle, 'Mix_PlayingMusic');
  Mix_PlayMusic := GetProcAddress(aDLLHandle, 'Mix_PlayMusic');
  Mix_QuerySpec := GetProcAddress(aDLLHandle, 'Mix_QuerySpec');
  Mix_QuickLoad_RAW := GetProcAddress(aDLLHandle, 'Mix_QuickLoad_RAW');
  Mix_QuickLoad_WAV := GetProcAddress(aDLLHandle, 'Mix_QuickLoad_WAV');
  Mix_Quit := GetProcAddress(aDLLHandle, 'Mix_Quit');
  Mix_RegisterEffect := GetProcAddress(aDLLHandle, 'Mix_RegisterEffect');
  Mix_ReserveChannels := GetProcAddress(aDLLHandle, 'Mix_ReserveChannels');
  Mix_Resume := GetProcAddress(aDLLHandle, 'Mix_Resume');
  Mix_ResumeMusic := GetProcAddress(aDLLHandle, 'Mix_ResumeMusic');
  Mix_RewindMusic := GetProcAddress(aDLLHandle, 'Mix_RewindMusic');
  Mix_SetDistance := GetProcAddress(aDLLHandle, 'Mix_SetDistance');
  Mix_SetMusicCMD := GetProcAddress(aDLLHandle, 'Mix_SetMusicCMD');
  Mix_SetMusicPosition := GetProcAddress(aDLLHandle, 'Mix_SetMusicPosition');
  Mix_SetPanning := GetProcAddress(aDLLHandle, 'Mix_SetPanning');
  Mix_SetPosition := GetProcAddress(aDLLHandle, 'Mix_SetPosition');
  Mix_SetPostMix := GetProcAddress(aDLLHandle, 'Mix_SetPostMix');
  Mix_SetReverseStereo := GetProcAddress(aDLLHandle, 'Mix_SetReverseStereo');
  Mix_SetSoundFonts := GetProcAddress(aDLLHandle, 'Mix_SetSoundFonts');
  Mix_SetSynchroValue := GetProcAddress(aDLLHandle, 'Mix_SetSynchroValue');
  Mix_SetTimidityCfg := GetProcAddress(aDLLHandle, 'Mix_SetTimidityCfg');
  Mix_UnregisterAllEffects := GetProcAddress(aDLLHandle, 'Mix_UnregisterAllEffects');
  Mix_UnregisterEffect := GetProcAddress(aDLLHandle, 'Mix_UnregisterEffect');
  Mix_Volume := GetProcAddress(aDLLHandle, 'Mix_Volume');
  Mix_VolumeChunk := GetProcAddress(aDLLHandle, 'Mix_VolumeChunk');
  Mix_VolumeMusic := GetProcAddress(aDLLHandle, 'Mix_VolumeMusic');
  SDL_abs := GetProcAddress(aDLLHandle, 'SDL_abs');
  SDL_acos := GetProcAddress(aDLLHandle, 'SDL_acos');
  SDL_acosf := GetProcAddress(aDLLHandle, 'SDL_acosf');
  SDL_AddEventWatch := GetProcAddress(aDLLHandle, 'SDL_AddEventWatch');
  SDL_AddHintCallback := GetProcAddress(aDLLHandle, 'SDL_AddHintCallback');
  SDL_AddTimer := GetProcAddress(aDLLHandle, 'SDL_AddTimer');
  SDL_AllocFormat := GetProcAddress(aDLLHandle, 'SDL_AllocFormat');
  SDL_AllocPalette := GetProcAddress(aDLLHandle, 'SDL_AllocPalette');
  SDL_AllocRW := GetProcAddress(aDLLHandle, 'SDL_AllocRW');
  SDL_asin := GetProcAddress(aDLLHandle, 'SDL_asin');
  SDL_asinf := GetProcAddress(aDLLHandle, 'SDL_asinf');
  SDL_asprintf := GetProcAddress(aDLLHandle, 'SDL_asprintf');
  SDL_atan := GetProcAddress(aDLLHandle, 'SDL_atan');
  SDL_atan2 := GetProcAddress(aDLLHandle, 'SDL_atan2');
  SDL_atan2f := GetProcAddress(aDLLHandle, 'SDL_atan2f');
  SDL_atanf := GetProcAddress(aDLLHandle, 'SDL_atanf');
  SDL_atof := GetProcAddress(aDLLHandle, 'SDL_atof');
  SDL_atoi := GetProcAddress(aDLLHandle, 'SDL_atoi');
  SDL_AtomicAdd := GetProcAddress(aDLLHandle, 'SDL_AtomicAdd');
  SDL_AtomicCAS := GetProcAddress(aDLLHandle, 'SDL_AtomicCAS');
  SDL_AtomicCASPtr := GetProcAddress(aDLLHandle, 'SDL_AtomicCASPtr');
  SDL_AtomicGet := GetProcAddress(aDLLHandle, 'SDL_AtomicGet');
  SDL_AtomicGetPtr := GetProcAddress(aDLLHandle, 'SDL_AtomicGetPtr');
  SDL_AtomicLock := GetProcAddress(aDLLHandle, 'SDL_AtomicLock');
  SDL_AtomicSet := GetProcAddress(aDLLHandle, 'SDL_AtomicSet');
  SDL_AtomicSetPtr := GetProcAddress(aDLLHandle, 'SDL_AtomicSetPtr');
  SDL_AtomicTryLock := GetProcAddress(aDLLHandle, 'SDL_AtomicTryLock');
  SDL_AtomicUnlock := GetProcAddress(aDLLHandle, 'SDL_AtomicUnlock');
  SDL_AudioInit := GetProcAddress(aDLLHandle, 'SDL_AudioInit');
  SDL_AudioQuit := GetProcAddress(aDLLHandle, 'SDL_AudioQuit');
  SDL_AudioStreamAvailable := GetProcAddress(aDLLHandle, 'SDL_AudioStreamAvailable');
  SDL_AudioStreamClear := GetProcAddress(aDLLHandle, 'SDL_AudioStreamClear');
  SDL_AudioStreamFlush := GetProcAddress(aDLLHandle, 'SDL_AudioStreamFlush');
  SDL_AudioStreamGet := GetProcAddress(aDLLHandle, 'SDL_AudioStreamGet');
  SDL_AudioStreamPut := GetProcAddress(aDLLHandle, 'SDL_AudioStreamPut');
  SDL_BuildAudioCVT := GetProcAddress(aDLLHandle, 'SDL_BuildAudioCVT');
  SDL_CalculateGammaRamp := GetProcAddress(aDLLHandle, 'SDL_CalculateGammaRamp');
  SDL_calloc := GetProcAddress(aDLLHandle, 'SDL_calloc');
  SDL_CaptureMouse := GetProcAddress(aDLLHandle, 'SDL_CaptureMouse');
  SDL_ceil := GetProcAddress(aDLLHandle, 'SDL_ceil');
  SDL_ceilf := GetProcAddress(aDLLHandle, 'SDL_ceilf');
  SDL_ClearComposition := GetProcAddress(aDLLHandle, 'SDL_ClearComposition');
  SDL_ClearError := GetProcAddress(aDLLHandle, 'SDL_ClearError');
  SDL_ClearHints := GetProcAddress(aDLLHandle, 'SDL_ClearHints');
  SDL_ClearQueuedAudio := GetProcAddress(aDLLHandle, 'SDL_ClearQueuedAudio');
  SDL_CloseAudio := GetProcAddress(aDLLHandle, 'SDL_CloseAudio');
  SDL_CloseAudioDevice := GetProcAddress(aDLLHandle, 'SDL_CloseAudioDevice');
  SDL_ComposeCustomBlendMode := GetProcAddress(aDLLHandle, 'SDL_ComposeCustomBlendMode');
  SDL_CondBroadcast := GetProcAddress(aDLLHandle, 'SDL_CondBroadcast');
  SDL_CondSignal := GetProcAddress(aDLLHandle, 'SDL_CondSignal');
  SDL_CondWait := GetProcAddress(aDLLHandle, 'SDL_CondWait');
  SDL_CondWaitTimeout := GetProcAddress(aDLLHandle, 'SDL_CondWaitTimeout');
  SDL_ConvertAudio := GetProcAddress(aDLLHandle, 'SDL_ConvertAudio');
  SDL_ConvertPixels := GetProcAddress(aDLLHandle, 'SDL_ConvertPixels');
  SDL_ConvertSurface := GetProcAddress(aDLLHandle, 'SDL_ConvertSurface');
  SDL_ConvertSurfaceFormat := GetProcAddress(aDLLHandle, 'SDL_ConvertSurfaceFormat');
  SDL_copysign := GetProcAddress(aDLLHandle, 'SDL_copysign');
  SDL_copysignf := GetProcAddress(aDLLHandle, 'SDL_copysignf');
  SDL_cos := GetProcAddress(aDLLHandle, 'SDL_cos');
  SDL_cosf := GetProcAddress(aDLLHandle, 'SDL_cosf');
  SDL_crc32 := GetProcAddress(aDLLHandle, 'SDL_crc32');
  SDL_CreateColorCursor := GetProcAddress(aDLLHandle, 'SDL_CreateColorCursor');
  SDL_CreateCond := GetProcAddress(aDLLHandle, 'SDL_CreateCond');
  SDL_CreateCursor := GetProcAddress(aDLLHandle, 'SDL_CreateCursor');
  SDL_CreateMutex := GetProcAddress(aDLLHandle, 'SDL_CreateMutex');
  SDL_CreateRenderer := GetProcAddress(aDLLHandle, 'SDL_CreateRenderer');
  SDL_CreateRGBSurface := GetProcAddress(aDLLHandle, 'SDL_CreateRGBSurface');
  SDL_CreateRGBSurfaceFrom := GetProcAddress(aDLLHandle, 'SDL_CreateRGBSurfaceFrom');
  SDL_CreateRGBSurfaceWithFormat := GetProcAddress(aDLLHandle, 'SDL_CreateRGBSurfaceWithFormat');
  SDL_CreateRGBSurfaceWithFormatFrom := GetProcAddress(aDLLHandle, 'SDL_CreateRGBSurfaceWithFormatFrom');
  SDL_CreateSemaphore := GetProcAddress(aDLLHandle, 'SDL_CreateSemaphore');
  SDL_CreateShapedWindow := GetProcAddress(aDLLHandle, 'SDL_CreateShapedWindow');
  SDL_CreateSoftwareRenderer := GetProcAddress(aDLLHandle, 'SDL_CreateSoftwareRenderer');
  SDL_CreateSystemCursor := GetProcAddress(aDLLHandle, 'SDL_CreateSystemCursor');
  SDL_CreateTexture := GetProcAddress(aDLLHandle, 'SDL_CreateTexture');
  SDL_CreateTextureFromSurface := GetProcAddress(aDLLHandle, 'SDL_CreateTextureFromSurface');
  SDL_CreateThread := GetProcAddress(aDLLHandle, 'SDL_CreateThread');
  SDL_CreateThreadWithStackSize := GetProcAddress(aDLLHandle, 'SDL_CreateThreadWithStackSize');
  SDL_CreateWindow := GetProcAddress(aDLLHandle, 'SDL_CreateWindow');
  SDL_CreateWindowAndRenderer := GetProcAddress(aDLLHandle, 'SDL_CreateWindowAndRenderer');
  SDL_CreateWindowFrom := GetProcAddress(aDLLHandle, 'SDL_CreateWindowFrom');
  SDL_Delay := GetProcAddress(aDLLHandle, 'SDL_Delay');
  SDL_DelEventWatch := GetProcAddress(aDLLHandle, 'SDL_DelEventWatch');
  SDL_DelHintCallback := GetProcAddress(aDLLHandle, 'SDL_DelHintCallback');
  SDL_DequeueAudio := GetProcAddress(aDLLHandle, 'SDL_DequeueAudio');
  SDL_DestroyCond := GetProcAddress(aDLLHandle, 'SDL_DestroyCond');
  SDL_DestroyMutex := GetProcAddress(aDLLHandle, 'SDL_DestroyMutex');
  SDL_DestroyRenderer := GetProcAddress(aDLLHandle, 'SDL_DestroyRenderer');
  SDL_DestroySemaphore := GetProcAddress(aDLLHandle, 'SDL_DestroySemaphore');
  SDL_DestroyTexture := GetProcAddress(aDLLHandle, 'SDL_DestroyTexture');
  SDL_DestroyWindow := GetProcAddress(aDLLHandle, 'SDL_DestroyWindow');
  SDL_DetachThread := GetProcAddress(aDLLHandle, 'SDL_DetachThread');
  SDL_Direct3D9GetAdapterIndex := GetProcAddress(aDLLHandle, 'SDL_Direct3D9GetAdapterIndex');
  SDL_DisableScreenSaver := GetProcAddress(aDLLHandle, 'SDL_DisableScreenSaver');
  SDL_DuplicateSurface := GetProcAddress(aDLLHandle, 'SDL_DuplicateSurface');
  SDL_DXGIGetOutputInfo := GetProcAddress(aDLLHandle, 'SDL_DXGIGetOutputInfo');
  SDL_EnableScreenSaver := GetProcAddress(aDLLHandle, 'SDL_EnableScreenSaver');
  SDL_EncloseFPoints := GetProcAddress(aDLLHandle, 'SDL_EncloseFPoints');
  SDL_EnclosePoints := GetProcAddress(aDLLHandle, 'SDL_EnclosePoints');
  SDL_Error := GetProcAddress(aDLLHandle, 'SDL_Error');
  SDL_EventState := GetProcAddress(aDLLHandle, 'SDL_EventState');
  SDL_exp := GetProcAddress(aDLLHandle, 'SDL_exp');
  SDL_expf := GetProcAddress(aDLLHandle, 'SDL_expf');
  SDL_fabs := GetProcAddress(aDLLHandle, 'SDL_fabs');
  SDL_fabsf := GetProcAddress(aDLLHandle, 'SDL_fabsf');
  SDL_FillRect := GetProcAddress(aDLLHandle, 'SDL_FillRect');
  SDL_FillRects := GetProcAddress(aDLLHandle, 'SDL_FillRects');
  SDL_FilterEvents := GetProcAddress(aDLLHandle, 'SDL_FilterEvents');
  SDL_FlashWindow := GetProcAddress(aDLLHandle, 'SDL_FlashWindow');
  SDL_floor := GetProcAddress(aDLLHandle, 'SDL_floor');
  SDL_floorf := GetProcAddress(aDLLHandle, 'SDL_floorf');
  SDL_FlushEvent := GetProcAddress(aDLLHandle, 'SDL_FlushEvent');
  SDL_FlushEvents := GetProcAddress(aDLLHandle, 'SDL_FlushEvents');
  SDL_fmod := GetProcAddress(aDLLHandle, 'SDL_fmod');
  SDL_fmodf := GetProcAddress(aDLLHandle, 'SDL_fmodf');
  SDL_free := GetProcAddress(aDLLHandle, 'SDL_free');
  SDL_FreeAudioStream := GetProcAddress(aDLLHandle, 'SDL_FreeAudioStream');
  SDL_FreeCursor := GetProcAddress(aDLLHandle, 'SDL_FreeCursor');
  SDL_FreeFormat := GetProcAddress(aDLLHandle, 'SDL_FreeFormat');
  SDL_FreePalette := GetProcAddress(aDLLHandle, 'SDL_FreePalette');
  SDL_FreeRW := GetProcAddress(aDLLHandle, 'SDL_FreeRW');
  SDL_FreeSurface := GetProcAddress(aDLLHandle, 'SDL_FreeSurface');
  SDL_FreeWAV := GetProcAddress(aDLLHandle, 'SDL_FreeWAV');
  SDL_GameControllerAddMapping := GetProcAddress(aDLLHandle, 'SDL_GameControllerAddMapping');
  SDL_GameControllerAddMappingsFromRW := GetProcAddress(aDLLHandle, 'SDL_GameControllerAddMappingsFromRW');
  SDL_GameControllerClose := GetProcAddress(aDLLHandle, 'SDL_GameControllerClose');
  SDL_GameControllerEventState := GetProcAddress(aDLLHandle, 'SDL_GameControllerEventState');
  SDL_GameControllerFromInstanceID := GetProcAddress(aDLLHandle, 'SDL_GameControllerFromInstanceID');
  SDL_GameControllerFromPlayerIndex := GetProcAddress(aDLLHandle, 'SDL_GameControllerFromPlayerIndex');
  SDL_GameControllerGetAppleSFSymbolsNameForAxis := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetAppleSFSymbolsNameForAxis');
  SDL_GameControllerGetAppleSFSymbolsNameForButton := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetAppleSFSymbolsNameForButton');
  SDL_GameControllerGetAttached := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetAttached');
  SDL_GameControllerGetAxis := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetAxis');
  SDL_GameControllerGetAxisFromString := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetAxisFromString');
  SDL_GameControllerGetBindForAxis := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetBindForAxis');
  SDL_GameControllerGetBindForButton := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetBindForButton');
  SDL_GameControllerGetButton := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetButton');
  SDL_GameControllerGetButtonFromString := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetButtonFromString');
  SDL_GameControllerGetJoystick := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetJoystick');
  SDL_GameControllerGetNumTouchpadFingers := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetNumTouchpadFingers');
  SDL_GameControllerGetNumTouchpads := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetNumTouchpads');
  SDL_GameControllerGetPlayerIndex := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetPlayerIndex');
  SDL_GameControllerGetProduct := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetProduct');
  SDL_GameControllerGetProductVersion := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetProductVersion');
  SDL_GameControllerGetSensorData := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetSensorData');
  SDL_GameControllerGetSensorDataRate := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetSensorDataRate');
  SDL_GameControllerGetSerial := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetSerial');
  SDL_GameControllerGetStringForAxis := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetStringForAxis');
  SDL_GameControllerGetStringForButton := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetStringForButton');
  SDL_GameControllerGetTouchpadFinger := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetTouchpadFinger');
  SDL_GameControllerGetType := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetType');
  SDL_GameControllerGetVendor := GetProcAddress(aDLLHandle, 'SDL_GameControllerGetVendor');
  SDL_GameControllerHasAxis := GetProcAddress(aDLLHandle, 'SDL_GameControllerHasAxis');
  SDL_GameControllerHasButton := GetProcAddress(aDLLHandle, 'SDL_GameControllerHasButton');
  SDL_GameControllerHasLED := GetProcAddress(aDLLHandle, 'SDL_GameControllerHasLED');
  SDL_GameControllerHasRumble := GetProcAddress(aDLLHandle, 'SDL_GameControllerHasRumble');
  SDL_GameControllerHasRumbleTriggers := GetProcAddress(aDLLHandle, 'SDL_GameControllerHasRumbleTriggers');
  SDL_GameControllerHasSensor := GetProcAddress(aDLLHandle, 'SDL_GameControllerHasSensor');
  SDL_GameControllerIsSensorEnabled := GetProcAddress(aDLLHandle, 'SDL_GameControllerIsSensorEnabled');
  SDL_GameControllerMapping := GetProcAddress(aDLLHandle, 'SDL_GameControllerMapping');
  SDL_GameControllerMappingForDeviceIndex := GetProcAddress(aDLLHandle, 'SDL_GameControllerMappingForDeviceIndex');
  SDL_GameControllerMappingForGUID := GetProcAddress(aDLLHandle, 'SDL_GameControllerMappingForGUID');
  SDL_GameControllerMappingForIndex := GetProcAddress(aDLLHandle, 'SDL_GameControllerMappingForIndex');
  SDL_GameControllerName := GetProcAddress(aDLLHandle, 'SDL_GameControllerName');
  SDL_GameControllerNameForIndex := GetProcAddress(aDLLHandle, 'SDL_GameControllerNameForIndex');
  SDL_GameControllerNumMappings := GetProcAddress(aDLLHandle, 'SDL_GameControllerNumMappings');
  SDL_GameControllerOpen := GetProcAddress(aDLLHandle, 'SDL_GameControllerOpen');
  SDL_GameControllerRumble := GetProcAddress(aDLLHandle, 'SDL_GameControllerRumble');
  SDL_GameControllerRumbleTriggers := GetProcAddress(aDLLHandle, 'SDL_GameControllerRumbleTriggers');
  SDL_GameControllerSendEffect := GetProcAddress(aDLLHandle, 'SDL_GameControllerSendEffect');
  SDL_GameControllerSetLED := GetProcAddress(aDLLHandle, 'SDL_GameControllerSetLED');
  SDL_GameControllerSetPlayerIndex := GetProcAddress(aDLLHandle, 'SDL_GameControllerSetPlayerIndex');
  SDL_GameControllerSetSensorEnabled := GetProcAddress(aDLLHandle, 'SDL_GameControllerSetSensorEnabled');
  SDL_GameControllerTypeForIndex := GetProcAddress(aDLLHandle, 'SDL_GameControllerTypeForIndex');
  SDL_GameControllerUpdate := GetProcAddress(aDLLHandle, 'SDL_GameControllerUpdate');
  SDL_GetAssertionHandler := GetProcAddress(aDLLHandle, 'SDL_GetAssertionHandler');
  SDL_GetAssertionReport := GetProcAddress(aDLLHandle, 'SDL_GetAssertionReport');
  SDL_GetAudioDeviceName := GetProcAddress(aDLLHandle, 'SDL_GetAudioDeviceName');
  SDL_GetAudioDeviceSpec := GetProcAddress(aDLLHandle, 'SDL_GetAudioDeviceSpec');
  SDL_GetAudioDeviceStatus := GetProcAddress(aDLLHandle, 'SDL_GetAudioDeviceStatus');
  SDL_GetAudioDriver := GetProcAddress(aDLLHandle, 'SDL_GetAudioDriver');
  SDL_GetAudioStatus := GetProcAddress(aDLLHandle, 'SDL_GetAudioStatus');
  SDL_GetBasePath := GetProcAddress(aDLLHandle, 'SDL_GetBasePath');
  SDL_GetClipboardText := GetProcAddress(aDLLHandle, 'SDL_GetClipboardText');
  SDL_GetClipRect := GetProcAddress(aDLLHandle, 'SDL_GetClipRect');
  SDL_GetClosestDisplayMode := GetProcAddress(aDLLHandle, 'SDL_GetClosestDisplayMode');
  SDL_GetColorKey := GetProcAddress(aDLLHandle, 'SDL_GetColorKey');
  SDL_GetCPUCacheLineSize := GetProcAddress(aDLLHandle, 'SDL_GetCPUCacheLineSize');
  SDL_GetCPUCount := GetProcAddress(aDLLHandle, 'SDL_GetCPUCount');
  SDL_GetCurrentAudioDriver := GetProcAddress(aDLLHandle, 'SDL_GetCurrentAudioDriver');
  SDL_GetCurrentDisplayMode := GetProcAddress(aDLLHandle, 'SDL_GetCurrentDisplayMode');
  SDL_GetCurrentVideoDriver := GetProcAddress(aDLLHandle, 'SDL_GetCurrentVideoDriver');
  SDL_GetCursor := GetProcAddress(aDLLHandle, 'SDL_GetCursor');
  SDL_GetDefaultAssertionHandler := GetProcAddress(aDLLHandle, 'SDL_GetDefaultAssertionHandler');
  SDL_GetDefaultCursor := GetProcAddress(aDLLHandle, 'SDL_GetDefaultCursor');
  SDL_GetDesktopDisplayMode := GetProcAddress(aDLLHandle, 'SDL_GetDesktopDisplayMode');
  SDL_GetDisplayBounds := GetProcAddress(aDLLHandle, 'SDL_GetDisplayBounds');
  SDL_GetDisplayDPI := GetProcAddress(aDLLHandle, 'SDL_GetDisplayDPI');
  SDL_GetDisplayMode := GetProcAddress(aDLLHandle, 'SDL_GetDisplayMode');
  SDL_GetDisplayName := GetProcAddress(aDLLHandle, 'SDL_GetDisplayName');
  SDL_GetDisplayOrientation := GetProcAddress(aDLLHandle, 'SDL_GetDisplayOrientation');
  SDL_GetDisplayUsableBounds := GetProcAddress(aDLLHandle, 'SDL_GetDisplayUsableBounds');
  SDL_getenv := GetProcAddress(aDLLHandle, 'SDL_getenv');
  SDL_GetError := GetProcAddress(aDLLHandle, 'SDL_GetError');
  SDL_GetErrorMsg := GetProcAddress(aDLLHandle, 'SDL_GetErrorMsg');
  SDL_GetEventFilter := GetProcAddress(aDLLHandle, 'SDL_GetEventFilter');
  SDL_GetGlobalMouseState := GetProcAddress(aDLLHandle, 'SDL_GetGlobalMouseState');
  SDL_GetGrabbedWindow := GetProcAddress(aDLLHandle, 'SDL_GetGrabbedWindow');
  SDL_GetHint := GetProcAddress(aDLLHandle, 'SDL_GetHint');
  SDL_GetHintBoolean := GetProcAddress(aDLLHandle, 'SDL_GetHintBoolean');
  SDL_GetKeyboardFocus := GetProcAddress(aDLLHandle, 'SDL_GetKeyboardFocus');
  SDL_GetKeyboardState := GetProcAddress(aDLLHandle, 'SDL_GetKeyboardState');
  SDL_GetKeyFromName := GetProcAddress(aDLLHandle, 'SDL_GetKeyFromName');
  SDL_GetKeyFromScancode := GetProcAddress(aDLLHandle, 'SDL_GetKeyFromScancode');
  SDL_GetKeyName := GetProcAddress(aDLLHandle, 'SDL_GetKeyName');
  SDL_GetMemoryFunctions := GetProcAddress(aDLLHandle, 'SDL_GetMemoryFunctions');
  SDL_GetModState := GetProcAddress(aDLLHandle, 'SDL_GetModState');
  SDL_GetMouseFocus := GetProcAddress(aDLLHandle, 'SDL_GetMouseFocus');
  SDL_GetMouseState := GetProcAddress(aDLLHandle, 'SDL_GetMouseState');
  SDL_GetNumAllocations := GetProcAddress(aDLLHandle, 'SDL_GetNumAllocations');
  SDL_GetNumAudioDevices := GetProcAddress(aDLLHandle, 'SDL_GetNumAudioDevices');
  SDL_GetNumAudioDrivers := GetProcAddress(aDLLHandle, 'SDL_GetNumAudioDrivers');
  SDL_GetNumDisplayModes := GetProcAddress(aDLLHandle, 'SDL_GetNumDisplayModes');
  SDL_GetNumRenderDrivers := GetProcAddress(aDLLHandle, 'SDL_GetNumRenderDrivers');
  SDL_GetNumTouchDevices := GetProcAddress(aDLLHandle, 'SDL_GetNumTouchDevices');
  SDL_GetNumTouchFingers := GetProcAddress(aDLLHandle, 'SDL_GetNumTouchFingers');
  SDL_GetNumVideoDisplays := GetProcAddress(aDLLHandle, 'SDL_GetNumVideoDisplays');
  SDL_GetNumVideoDrivers := GetProcAddress(aDLLHandle, 'SDL_GetNumVideoDrivers');
  SDL_GetPerformanceCounter := GetProcAddress(aDLLHandle, 'SDL_GetPerformanceCounter');
  SDL_GetPerformanceFrequency := GetProcAddress(aDLLHandle, 'SDL_GetPerformanceFrequency');
  SDL_GetPixelFormatName := GetProcAddress(aDLLHandle, 'SDL_GetPixelFormatName');
  SDL_GetPlatform := GetProcAddress(aDLLHandle, 'SDL_GetPlatform');
  SDL_GetPowerInfo := GetProcAddress(aDLLHandle, 'SDL_GetPowerInfo');
  SDL_GetPreferredLocales := GetProcAddress(aDLLHandle, 'SDL_GetPreferredLocales');
  SDL_GetPrefPath := GetProcAddress(aDLLHandle, 'SDL_GetPrefPath');
  SDL_GetQueuedAudioSize := GetProcAddress(aDLLHandle, 'SDL_GetQueuedAudioSize');
  SDL_GetRelativeMouseMode := GetProcAddress(aDLLHandle, 'SDL_GetRelativeMouseMode');
  SDL_GetRelativeMouseState := GetProcAddress(aDLLHandle, 'SDL_GetRelativeMouseState');
  SDL_GetRenderDrawBlendMode := GetProcAddress(aDLLHandle, 'SDL_GetRenderDrawBlendMode');
  SDL_GetRenderDrawColor := GetProcAddress(aDLLHandle, 'SDL_GetRenderDrawColor');
  SDL_GetRenderDriverInfo := GetProcAddress(aDLLHandle, 'SDL_GetRenderDriverInfo');
  SDL_GetRenderer := GetProcAddress(aDLLHandle, 'SDL_GetRenderer');
  SDL_GetRendererInfo := GetProcAddress(aDLLHandle, 'SDL_GetRendererInfo');
  SDL_GetRendererOutputSize := GetProcAddress(aDLLHandle, 'SDL_GetRendererOutputSize');
  SDL_GetRenderTarget := GetProcAddress(aDLLHandle, 'SDL_GetRenderTarget');
  SDL_GetRevision := GetProcAddress(aDLLHandle, 'SDL_GetRevision');
  SDL_GetRevisionNumber := GetProcAddress(aDLLHandle, 'SDL_GetRevisionNumber');
  SDL_GetRGB := GetProcAddress(aDLLHandle, 'SDL_GetRGB');
  SDL_GetRGBA := GetProcAddress(aDLLHandle, 'SDL_GetRGBA');
  SDL_GetScancodeFromKey := GetProcAddress(aDLLHandle, 'SDL_GetScancodeFromKey');
  SDL_GetScancodeFromName := GetProcAddress(aDLLHandle, 'SDL_GetScancodeFromName');
  SDL_GetScancodeName := GetProcAddress(aDLLHandle, 'SDL_GetScancodeName');
  SDL_GetShapedWindowMode := GetProcAddress(aDLLHandle, 'SDL_GetShapedWindowMode');
  SDL_GetSurfaceAlphaMod := GetProcAddress(aDLLHandle, 'SDL_GetSurfaceAlphaMod');
  SDL_GetSurfaceBlendMode := GetProcAddress(aDLLHandle, 'SDL_GetSurfaceBlendMode');
  SDL_GetSurfaceColorMod := GetProcAddress(aDLLHandle, 'SDL_GetSurfaceColorMod');
  SDL_GetSystemRAM := GetProcAddress(aDLLHandle, 'SDL_GetSystemRAM');
  SDL_GetTextureAlphaMod := GetProcAddress(aDLLHandle, 'SDL_GetTextureAlphaMod');
  SDL_GetTextureBlendMode := GetProcAddress(aDLLHandle, 'SDL_GetTextureBlendMode');
  SDL_GetTextureColorMod := GetProcAddress(aDLLHandle, 'SDL_GetTextureColorMod');
  SDL_GetTextureScaleMode := GetProcAddress(aDLLHandle, 'SDL_GetTextureScaleMode');
  SDL_GetTextureUserData := GetProcAddress(aDLLHandle, 'SDL_GetTextureUserData');
  SDL_GetThreadID := GetProcAddress(aDLLHandle, 'SDL_GetThreadID');
  SDL_GetThreadName := GetProcAddress(aDLLHandle, 'SDL_GetThreadName');
  SDL_GetTicks := GetProcAddress(aDLLHandle, 'SDL_GetTicks');
  SDL_GetTicks64 := GetProcAddress(aDLLHandle, 'SDL_GetTicks64');
  SDL_GetTouchDevice := GetProcAddress(aDLLHandle, 'SDL_GetTouchDevice');
  SDL_GetTouchDeviceType := GetProcAddress(aDLLHandle, 'SDL_GetTouchDeviceType');
  SDL_GetTouchFinger := GetProcAddress(aDLLHandle, 'SDL_GetTouchFinger');
  SDL_GetTouchName := GetProcAddress(aDLLHandle, 'SDL_GetTouchName');
  SDL_GetVersion := GetProcAddress(aDLLHandle, 'SDL_GetVersion');
  SDL_GetVideoDriver := GetProcAddress(aDLLHandle, 'SDL_GetVideoDriver');
  SDL_GetWindowBordersSize := GetProcAddress(aDLLHandle, 'SDL_GetWindowBordersSize');
  SDL_GetWindowBrightness := GetProcAddress(aDLLHandle, 'SDL_GetWindowBrightness');
  SDL_GetWindowData := GetProcAddress(aDLLHandle, 'SDL_GetWindowData');
  SDL_GetWindowDisplayIndex := GetProcAddress(aDLLHandle, 'SDL_GetWindowDisplayIndex');
  SDL_GetWindowDisplayMode := GetProcAddress(aDLLHandle, 'SDL_GetWindowDisplayMode');
  SDL_GetWindowFlags := GetProcAddress(aDLLHandle, 'SDL_GetWindowFlags');
  SDL_GetWindowFromID := GetProcAddress(aDLLHandle, 'SDL_GetWindowFromID');
  SDL_GetWindowGammaRamp := GetProcAddress(aDLLHandle, 'SDL_GetWindowGammaRamp');
  SDL_GetWindowGrab := GetProcAddress(aDLLHandle, 'SDL_GetWindowGrab');
  SDL_GetWindowICCProfile := GetProcAddress(aDLLHandle, 'SDL_GetWindowICCProfile');
  SDL_GetWindowID := GetProcAddress(aDLLHandle, 'SDL_GetWindowID');
  SDL_GetWindowKeyboardGrab := GetProcAddress(aDLLHandle, 'SDL_GetWindowKeyboardGrab');
  SDL_GetWindowMaximumSize := GetProcAddress(aDLLHandle, 'SDL_GetWindowMaximumSize');
  SDL_GetWindowMinimumSize := GetProcAddress(aDLLHandle, 'SDL_GetWindowMinimumSize');
  SDL_GetWindowMouseGrab := GetProcAddress(aDLLHandle, 'SDL_GetWindowMouseGrab');
  SDL_GetWindowMouseRect := GetProcAddress(aDLLHandle, 'SDL_GetWindowMouseRect');
  SDL_GetWindowOpacity := GetProcAddress(aDLLHandle, 'SDL_GetWindowOpacity');
  SDL_GetWindowPixelFormat := GetProcAddress(aDLLHandle, 'SDL_GetWindowPixelFormat');
  SDL_GetWindowPosition := GetProcAddress(aDLLHandle, 'SDL_GetWindowPosition');
  SDL_GetWindowSize := GetProcAddress(aDLLHandle, 'SDL_GetWindowSize');
  SDL_GetWindowSurface := GetProcAddress(aDLLHandle, 'SDL_GetWindowSurface');
  SDL_GetWindowTitle := GetProcAddress(aDLLHandle, 'SDL_GetWindowTitle');
  SDL_GetYUVConversionMode := GetProcAddress(aDLLHandle, 'SDL_GetYUVConversionMode');
  SDL_GetYUVConversionModeForResolution := GetProcAddress(aDLLHandle, 'SDL_GetYUVConversionModeForResolution');
  SDL_GL_BindTexture := GetProcAddress(aDLLHandle, 'SDL_GL_BindTexture');
  SDL_GL_CreateContext := GetProcAddress(aDLLHandle, 'SDL_GL_CreateContext');
  SDL_GL_DeleteContext := GetProcAddress(aDLLHandle, 'SDL_GL_DeleteContext');
  SDL_GL_ExtensionSupported := GetProcAddress(aDLLHandle, 'SDL_GL_ExtensionSupported');
  SDL_GL_GetAttribute := GetProcAddress(aDLLHandle, 'SDL_GL_GetAttribute');
  SDL_GL_GetCurrentContext := GetProcAddress(aDLLHandle, 'SDL_GL_GetCurrentContext');
  SDL_GL_GetCurrentWindow := GetProcAddress(aDLLHandle, 'SDL_GL_GetCurrentWindow');
  SDL_GL_GetDrawableSize := GetProcAddress(aDLLHandle, 'SDL_GL_GetDrawableSize');
  SDL_GL_GetProcAddress := GetProcAddress(aDLLHandle, 'SDL_GL_GetProcAddress');
  SDL_GL_GetSwapInterval := GetProcAddress(aDLLHandle, 'SDL_GL_GetSwapInterval');
  SDL_GL_LoadLibrary := GetProcAddress(aDLLHandle, 'SDL_GL_LoadLibrary');
  SDL_GL_MakeCurrent := GetProcAddress(aDLLHandle, 'SDL_GL_MakeCurrent');
  SDL_GL_ResetAttributes := GetProcAddress(aDLLHandle, 'SDL_GL_ResetAttributes');
  SDL_GL_SetAttribute := GetProcAddress(aDLLHandle, 'SDL_GL_SetAttribute');
  SDL_GL_SetSwapInterval := GetProcAddress(aDLLHandle, 'SDL_GL_SetSwapInterval');
  SDL_GL_SwapWindow := GetProcAddress(aDLLHandle, 'SDL_GL_SwapWindow');
  SDL_GL_UnbindTexture := GetProcAddress(aDLLHandle, 'SDL_GL_UnbindTexture');
  SDL_GL_UnloadLibrary := GetProcAddress(aDLLHandle, 'SDL_GL_UnloadLibrary');
  SDL_HapticClose := GetProcAddress(aDLLHandle, 'SDL_HapticClose');
  SDL_HapticDestroyEffect := GetProcAddress(aDLLHandle, 'SDL_HapticDestroyEffect');
  SDL_HapticEffectSupported := GetProcAddress(aDLLHandle, 'SDL_HapticEffectSupported');
  SDL_HapticGetEffectStatus := GetProcAddress(aDLLHandle, 'SDL_HapticGetEffectStatus');
  SDL_HapticIndex := GetProcAddress(aDLLHandle, 'SDL_HapticIndex');
  SDL_HapticName := GetProcAddress(aDLLHandle, 'SDL_HapticName');
  SDL_HapticNewEffect := GetProcAddress(aDLLHandle, 'SDL_HapticNewEffect');
  SDL_HapticNumAxes := GetProcAddress(aDLLHandle, 'SDL_HapticNumAxes');
  SDL_HapticNumEffects := GetProcAddress(aDLLHandle, 'SDL_HapticNumEffects');
  SDL_HapticNumEffectsPlaying := GetProcAddress(aDLLHandle, 'SDL_HapticNumEffectsPlaying');
  SDL_HapticOpen := GetProcAddress(aDLLHandle, 'SDL_HapticOpen');
  SDL_HapticOpened := GetProcAddress(aDLLHandle, 'SDL_HapticOpened');
  SDL_HapticOpenFromJoystick := GetProcAddress(aDLLHandle, 'SDL_HapticOpenFromJoystick');
  SDL_HapticOpenFromMouse := GetProcAddress(aDLLHandle, 'SDL_HapticOpenFromMouse');
  SDL_HapticPause := GetProcAddress(aDLLHandle, 'SDL_HapticPause');
  SDL_HapticQuery := GetProcAddress(aDLLHandle, 'SDL_HapticQuery');
  SDL_HapticRumbleInit := GetProcAddress(aDLLHandle, 'SDL_HapticRumbleInit');
  SDL_HapticRumblePlay := GetProcAddress(aDLLHandle, 'SDL_HapticRumblePlay');
  SDL_HapticRumbleStop := GetProcAddress(aDLLHandle, 'SDL_HapticRumbleStop');
  SDL_HapticRumbleSupported := GetProcAddress(aDLLHandle, 'SDL_HapticRumbleSupported');
  SDL_HapticRunEffect := GetProcAddress(aDLLHandle, 'SDL_HapticRunEffect');
  SDL_HapticSetAutocenter := GetProcAddress(aDLLHandle, 'SDL_HapticSetAutocenter');
  SDL_HapticSetGain := GetProcAddress(aDLLHandle, 'SDL_HapticSetGain');
  SDL_HapticStopAll := GetProcAddress(aDLLHandle, 'SDL_HapticStopAll');
  SDL_HapticStopEffect := GetProcAddress(aDLLHandle, 'SDL_HapticStopEffect');
  SDL_HapticUnpause := GetProcAddress(aDLLHandle, 'SDL_HapticUnpause');
  SDL_HapticUpdateEffect := GetProcAddress(aDLLHandle, 'SDL_HapticUpdateEffect');
  SDL_Has3DNow := GetProcAddress(aDLLHandle, 'SDL_Has3DNow');
  SDL_HasAltiVec := GetProcAddress(aDLLHandle, 'SDL_HasAltiVec');
  SDL_HasARMSIMD := GetProcAddress(aDLLHandle, 'SDL_HasARMSIMD');
  SDL_HasAVX := GetProcAddress(aDLLHandle, 'SDL_HasAVX');
  SDL_HasAVX2 := GetProcAddress(aDLLHandle, 'SDL_HasAVX2');
  SDL_HasAVX512F := GetProcAddress(aDLLHandle, 'SDL_HasAVX512F');
  SDL_HasClipboardText := GetProcAddress(aDLLHandle, 'SDL_HasClipboardText');
  SDL_HasColorKey := GetProcAddress(aDLLHandle, 'SDL_HasColorKey');
  SDL_HasEvent := GetProcAddress(aDLLHandle, 'SDL_HasEvent');
  SDL_HasEvents := GetProcAddress(aDLLHandle, 'SDL_HasEvents');
  SDL_HasIntersection := GetProcAddress(aDLLHandle, 'SDL_HasIntersection');
  SDL_HasIntersectionF := GetProcAddress(aDLLHandle, 'SDL_HasIntersectionF');
  SDL_HasMMX := GetProcAddress(aDLLHandle, 'SDL_HasMMX');
  SDL_HasNEON := GetProcAddress(aDLLHandle, 'SDL_HasNEON');
  SDL_HasRDTSC := GetProcAddress(aDLLHandle, 'SDL_HasRDTSC');
  SDL_HasScreenKeyboardSupport := GetProcAddress(aDLLHandle, 'SDL_HasScreenKeyboardSupport');
  SDL_HasSSE := GetProcAddress(aDLLHandle, 'SDL_HasSSE');
  SDL_HasSSE2 := GetProcAddress(aDLLHandle, 'SDL_HasSSE2');
  SDL_HasSSE3 := GetProcAddress(aDLLHandle, 'SDL_HasSSE3');
  SDL_HasSSE41 := GetProcAddress(aDLLHandle, 'SDL_HasSSE41');
  SDL_HasSSE42 := GetProcAddress(aDLLHandle, 'SDL_HasSSE42');
  SDL_HasSurfaceRLE := GetProcAddress(aDLLHandle, 'SDL_HasSurfaceRLE');
  SDL_hid_ble_scan := GetProcAddress(aDLLHandle, 'SDL_hid_ble_scan');
  SDL_hid_close := GetProcAddress(aDLLHandle, 'SDL_hid_close');
  SDL_hid_device_change_count := GetProcAddress(aDLLHandle, 'SDL_hid_device_change_count');
  SDL_hid_enumerate := GetProcAddress(aDLLHandle, 'SDL_hid_enumerate');
  SDL_hid_exit := GetProcAddress(aDLLHandle, 'SDL_hid_exit');
  SDL_hid_free_enumeration := GetProcAddress(aDLLHandle, 'SDL_hid_free_enumeration');
  SDL_hid_get_feature_report := GetProcAddress(aDLLHandle, 'SDL_hid_get_feature_report');
  SDL_hid_get_indexed_string := GetProcAddress(aDLLHandle, 'SDL_hid_get_indexed_string');
  SDL_hid_get_manufacturer_string := GetProcAddress(aDLLHandle, 'SDL_hid_get_manufacturer_string');
  SDL_hid_get_product_string := GetProcAddress(aDLLHandle, 'SDL_hid_get_product_string');
  SDL_hid_get_serial_number_string := GetProcAddress(aDLLHandle, 'SDL_hid_get_serial_number_string');
  SDL_hid_init := GetProcAddress(aDLLHandle, 'SDL_hid_init');
  SDL_hid_open := GetProcAddress(aDLLHandle, 'SDL_hid_open');
  SDL_hid_open_path := GetProcAddress(aDLLHandle, 'SDL_hid_open_path');
  SDL_hid_read := GetProcAddress(aDLLHandle, 'SDL_hid_read');
  SDL_hid_read_timeout := GetProcAddress(aDLLHandle, 'SDL_hid_read_timeout');
  SDL_hid_send_feature_report := GetProcAddress(aDLLHandle, 'SDL_hid_send_feature_report');
  SDL_hid_set_nonblocking := GetProcAddress(aDLLHandle, 'SDL_hid_set_nonblocking');
  SDL_hid_write := GetProcAddress(aDLLHandle, 'SDL_hid_write');
  SDL_HideWindow := GetProcAddress(aDLLHandle, 'SDL_HideWindow');
  SDL_iconv := GetProcAddress(aDLLHandle, 'SDL_iconv');
  SDL_iconv_close := GetProcAddress(aDLLHandle, 'SDL_iconv_close');
  SDL_iconv_open := GetProcAddress(aDLLHandle, 'SDL_iconv_open');
  SDL_iconv_string := GetProcAddress(aDLLHandle, 'SDL_iconv_string');
  SDL_Init := GetProcAddress(aDLLHandle, 'SDL_Init');
  SDL_InitSubSystem := GetProcAddress(aDLLHandle, 'SDL_InitSubSystem');
  SDL_IntersectFRect := GetProcAddress(aDLLHandle, 'SDL_IntersectFRect');
  SDL_IntersectFRectAndLine := GetProcAddress(aDLLHandle, 'SDL_IntersectFRectAndLine');
  SDL_IntersectRect := GetProcAddress(aDLLHandle, 'SDL_IntersectRect');
  SDL_IntersectRectAndLine := GetProcAddress(aDLLHandle, 'SDL_IntersectRectAndLine');
  SDL_isalnum := GetProcAddress(aDLLHandle, 'SDL_isalnum');
  SDL_isalpha := GetProcAddress(aDLLHandle, 'SDL_isalpha');
  SDL_isblank := GetProcAddress(aDLLHandle, 'SDL_isblank');
  SDL_iscntrl := GetProcAddress(aDLLHandle, 'SDL_iscntrl');
  SDL_isdigit := GetProcAddress(aDLLHandle, 'SDL_isdigit');
  SDL_IsGameController := GetProcAddress(aDLLHandle, 'SDL_IsGameController');
  SDL_isgraph := GetProcAddress(aDLLHandle, 'SDL_isgraph');
  SDL_islower := GetProcAddress(aDLLHandle, 'SDL_islower');
  SDL_isprint := GetProcAddress(aDLLHandle, 'SDL_isprint');
  SDL_ispunct := GetProcAddress(aDLLHandle, 'SDL_ispunct');
  SDL_IsScreenKeyboardShown := GetProcAddress(aDLLHandle, 'SDL_IsScreenKeyboardShown');
  SDL_IsScreenSaverEnabled := GetProcAddress(aDLLHandle, 'SDL_IsScreenSaverEnabled');
  SDL_IsShapedWindow := GetProcAddress(aDLLHandle, 'SDL_IsShapedWindow');
  SDL_isspace := GetProcAddress(aDLLHandle, 'SDL_isspace');
  SDL_IsTablet := GetProcAddress(aDLLHandle, 'SDL_IsTablet');
  SDL_IsTextInputActive := GetProcAddress(aDLLHandle, 'SDL_IsTextInputActive');
  SDL_IsTextInputShown := GetProcAddress(aDLLHandle, 'SDL_IsTextInputShown');
  SDL_isupper := GetProcAddress(aDLLHandle, 'SDL_isupper');
  SDL_isxdigit := GetProcAddress(aDLLHandle, 'SDL_isxdigit');
  SDL_itoa := GetProcAddress(aDLLHandle, 'SDL_itoa');
  SDL_JoystickAttachVirtual := GetProcAddress(aDLLHandle, 'SDL_JoystickAttachVirtual');
  SDL_JoystickClose := GetProcAddress(aDLLHandle, 'SDL_JoystickClose');
  SDL_JoystickCurrentPowerLevel := GetProcAddress(aDLLHandle, 'SDL_JoystickCurrentPowerLevel');
  SDL_JoystickDetachVirtual := GetProcAddress(aDLLHandle, 'SDL_JoystickDetachVirtual');
  SDL_JoystickEventState := GetProcAddress(aDLLHandle, 'SDL_JoystickEventState');
  SDL_JoystickFromInstanceID := GetProcAddress(aDLLHandle, 'SDL_JoystickFromInstanceID');
  SDL_JoystickFromPlayerIndex := GetProcAddress(aDLLHandle, 'SDL_JoystickFromPlayerIndex');
  SDL_JoystickGetAttached := GetProcAddress(aDLLHandle, 'SDL_JoystickGetAttached');
  SDL_JoystickGetAxis := GetProcAddress(aDLLHandle, 'SDL_JoystickGetAxis');
  SDL_JoystickGetAxisInitialState := GetProcAddress(aDLLHandle, 'SDL_JoystickGetAxisInitialState');
  SDL_JoystickGetBall := GetProcAddress(aDLLHandle, 'SDL_JoystickGetBall');
  SDL_JoystickGetButton := GetProcAddress(aDLLHandle, 'SDL_JoystickGetButton');
  SDL_JoystickGetDeviceGUID := GetProcAddress(aDLLHandle, 'SDL_JoystickGetDeviceGUID');
  SDL_JoystickGetDeviceInstanceID := GetProcAddress(aDLLHandle, 'SDL_JoystickGetDeviceInstanceID');
  SDL_JoystickGetDevicePlayerIndex := GetProcAddress(aDLLHandle, 'SDL_JoystickGetDevicePlayerIndex');
  SDL_JoystickGetDeviceProduct := GetProcAddress(aDLLHandle, 'SDL_JoystickGetDeviceProduct');
  SDL_JoystickGetDeviceProductVersion := GetProcAddress(aDLLHandle, 'SDL_JoystickGetDeviceProductVersion');
  SDL_JoystickGetDeviceType := GetProcAddress(aDLLHandle, 'SDL_JoystickGetDeviceType');
  SDL_JoystickGetDeviceVendor := GetProcAddress(aDLLHandle, 'SDL_JoystickGetDeviceVendor');
  SDL_JoystickGetGUID := GetProcAddress(aDLLHandle, 'SDL_JoystickGetGUID');
  SDL_JoystickGetGUIDFromString := GetProcAddress(aDLLHandle, 'SDL_JoystickGetGUIDFromString');
  SDL_JoystickGetGUIDString := GetProcAddress(aDLLHandle, 'SDL_JoystickGetGUIDString');
  SDL_JoystickGetHat := GetProcAddress(aDLLHandle, 'SDL_JoystickGetHat');
  SDL_JoystickGetPlayerIndex := GetProcAddress(aDLLHandle, 'SDL_JoystickGetPlayerIndex');
  SDL_JoystickGetProduct := GetProcAddress(aDLLHandle, 'SDL_JoystickGetProduct');
  SDL_JoystickGetProductVersion := GetProcAddress(aDLLHandle, 'SDL_JoystickGetProductVersion');
  SDL_JoystickGetSerial := GetProcAddress(aDLLHandle, 'SDL_JoystickGetSerial');
  SDL_JoystickGetType := GetProcAddress(aDLLHandle, 'SDL_JoystickGetType');
  SDL_JoystickGetVendor := GetProcAddress(aDLLHandle, 'SDL_JoystickGetVendor');
  SDL_JoystickHasLED := GetProcAddress(aDLLHandle, 'SDL_JoystickHasLED');
  SDL_JoystickHasRumble := GetProcAddress(aDLLHandle, 'SDL_JoystickHasRumble');
  SDL_JoystickHasRumbleTriggers := GetProcAddress(aDLLHandle, 'SDL_JoystickHasRumbleTriggers');
  SDL_JoystickInstanceID := GetProcAddress(aDLLHandle, 'SDL_JoystickInstanceID');
  SDL_JoystickIsHaptic := GetProcAddress(aDLLHandle, 'SDL_JoystickIsHaptic');
  SDL_JoystickIsVirtual := GetProcAddress(aDLLHandle, 'SDL_JoystickIsVirtual');
  SDL_JoystickName := GetProcAddress(aDLLHandle, 'SDL_JoystickName');
  SDL_JoystickNameForIndex := GetProcAddress(aDLLHandle, 'SDL_JoystickNameForIndex');
  SDL_JoystickNumAxes := GetProcAddress(aDLLHandle, 'SDL_JoystickNumAxes');
  SDL_JoystickNumBalls := GetProcAddress(aDLLHandle, 'SDL_JoystickNumBalls');
  SDL_JoystickNumButtons := GetProcAddress(aDLLHandle, 'SDL_JoystickNumButtons');
  SDL_JoystickNumHats := GetProcAddress(aDLLHandle, 'SDL_JoystickNumHats');
  SDL_JoystickOpen := GetProcAddress(aDLLHandle, 'SDL_JoystickOpen');
  SDL_JoystickRumble := GetProcAddress(aDLLHandle, 'SDL_JoystickRumble');
  SDL_JoystickRumbleTriggers := GetProcAddress(aDLLHandle, 'SDL_JoystickRumbleTriggers');
  SDL_JoystickSendEffect := GetProcAddress(aDLLHandle, 'SDL_JoystickSendEffect');
  SDL_JoystickSetLED := GetProcAddress(aDLLHandle, 'SDL_JoystickSetLED');
  SDL_JoystickSetPlayerIndex := GetProcAddress(aDLLHandle, 'SDL_JoystickSetPlayerIndex');
  SDL_JoystickSetVirtualAxis := GetProcAddress(aDLLHandle, 'SDL_JoystickSetVirtualAxis');
  SDL_JoystickSetVirtualButton := GetProcAddress(aDLLHandle, 'SDL_JoystickSetVirtualButton');
  SDL_JoystickSetVirtualHat := GetProcAddress(aDLLHandle, 'SDL_JoystickSetVirtualHat');
  SDL_JoystickUpdate := GetProcAddress(aDLLHandle, 'SDL_JoystickUpdate');
  SDL_lltoa := GetProcAddress(aDLLHandle, 'SDL_lltoa');
  SDL_LoadBMP_RW := GetProcAddress(aDLLHandle, 'SDL_LoadBMP_RW');
  SDL_LoadDollarTemplates := GetProcAddress(aDLLHandle, 'SDL_LoadDollarTemplates');
  SDL_LoadFile := GetProcAddress(aDLLHandle, 'SDL_LoadFile');
  SDL_LoadFile_RW := GetProcAddress(aDLLHandle, 'SDL_LoadFile_RW');
  SDL_LoadFunction := GetProcAddress(aDLLHandle, 'SDL_LoadFunction');
  SDL_LoadObject := GetProcAddress(aDLLHandle, 'SDL_LoadObject');
  SDL_LoadWAV_RW := GetProcAddress(aDLLHandle, 'SDL_LoadWAV_RW');
  SDL_LockAudio := GetProcAddress(aDLLHandle, 'SDL_LockAudio');
  SDL_LockAudioDevice := GetProcAddress(aDLLHandle, 'SDL_LockAudioDevice');
  SDL_LockJoysticks := GetProcAddress(aDLLHandle, 'SDL_LockJoysticks');
  SDL_LockMutex := GetProcAddress(aDLLHandle, 'SDL_LockMutex');
  SDL_LockSensors := GetProcAddress(aDLLHandle, 'SDL_LockSensors');
  SDL_LockSurface := GetProcAddress(aDLLHandle, 'SDL_LockSurface');
  SDL_LockTexture := GetProcAddress(aDLLHandle, 'SDL_LockTexture');
  SDL_LockTextureToSurface := GetProcAddress(aDLLHandle, 'SDL_LockTextureToSurface');
  SDL_log := GetProcAddress(aDLLHandle, 'SDL_log');
  SDL_Log_ := GetProcAddress(aDLLHandle, 'SDL_Log_');
  SDL_log10 := GetProcAddress(aDLLHandle, 'SDL_log10');
  SDL_log10f := GetProcAddress(aDLLHandle, 'SDL_log10f');
  SDL_LogCritical := GetProcAddress(aDLLHandle, 'SDL_LogCritical');
  SDL_LogDebug := GetProcAddress(aDLLHandle, 'SDL_LogDebug');
  SDL_LogError := GetProcAddress(aDLLHandle, 'SDL_LogError');
  SDL_logf := GetProcAddress(aDLLHandle, 'SDL_logf');
  SDL_LogGetOutputFunction := GetProcAddress(aDLLHandle, 'SDL_LogGetOutputFunction');
  SDL_LogGetPriority := GetProcAddress(aDLLHandle, 'SDL_LogGetPriority');
  SDL_LogInfo := GetProcAddress(aDLLHandle, 'SDL_LogInfo');
  SDL_LogMessage := GetProcAddress(aDLLHandle, 'SDL_LogMessage');
  SDL_LogMessageV := GetProcAddress(aDLLHandle, 'SDL_LogMessageV');
  SDL_LogResetPriorities := GetProcAddress(aDLLHandle, 'SDL_LogResetPriorities');
  SDL_LogSetAllPriority := GetProcAddress(aDLLHandle, 'SDL_LogSetAllPriority');
  SDL_LogSetOutputFunction := GetProcAddress(aDLLHandle, 'SDL_LogSetOutputFunction');
  SDL_LogSetPriority := GetProcAddress(aDLLHandle, 'SDL_LogSetPriority');
  SDL_LogVerbose := GetProcAddress(aDLLHandle, 'SDL_LogVerbose');
  SDL_LogWarn := GetProcAddress(aDLLHandle, 'SDL_LogWarn');
  SDL_LowerBlit := GetProcAddress(aDLLHandle, 'SDL_LowerBlit');
  SDL_LowerBlitScaled := GetProcAddress(aDLLHandle, 'SDL_LowerBlitScaled');
  SDL_lround := GetProcAddress(aDLLHandle, 'SDL_lround');
  SDL_lroundf := GetProcAddress(aDLLHandle, 'SDL_lroundf');
  SDL_ltoa := GetProcAddress(aDLLHandle, 'SDL_ltoa');
  SDL_main := GetProcAddress(aDLLHandle, 'SDL_main');
  SDL_malloc := GetProcAddress(aDLLHandle, 'SDL_malloc');
  SDL_MapRGB := GetProcAddress(aDLLHandle, 'SDL_MapRGB');
  SDL_MapRGBA := GetProcAddress(aDLLHandle, 'SDL_MapRGBA');
  SDL_MasksToPixelFormatEnum := GetProcAddress(aDLLHandle, 'SDL_MasksToPixelFormatEnum');
  SDL_MaximizeWindow := GetProcAddress(aDLLHandle, 'SDL_MaximizeWindow');
  SDL_memcmp := GetProcAddress(aDLLHandle, 'SDL_memcmp');
  SDL_memcpy := GetProcAddress(aDLLHandle, 'SDL_memcpy');
  SDL_memmove := GetProcAddress(aDLLHandle, 'SDL_memmove');
  SDL_MemoryBarrierAcquireFunction := GetProcAddress(aDLLHandle, 'SDL_MemoryBarrierAcquireFunction');
  SDL_MemoryBarrierReleaseFunction := GetProcAddress(aDLLHandle, 'SDL_MemoryBarrierReleaseFunction');
  SDL_memset := GetProcAddress(aDLLHandle, 'SDL_memset');
  SDL_Metal_CreateView := GetProcAddress(aDLLHandle, 'SDL_Metal_CreateView');
  SDL_Metal_DestroyView := GetProcAddress(aDLLHandle, 'SDL_Metal_DestroyView');
  SDL_Metal_GetDrawableSize := GetProcAddress(aDLLHandle, 'SDL_Metal_GetDrawableSize');
  SDL_Metal_GetLayer := GetProcAddress(aDLLHandle, 'SDL_Metal_GetLayer');
  SDL_MinimizeWindow := GetProcAddress(aDLLHandle, 'SDL_MinimizeWindow');
  SDL_MixAudio := GetProcAddress(aDLLHandle, 'SDL_MixAudio');
  SDL_MixAudioFormat := GetProcAddress(aDLLHandle, 'SDL_MixAudioFormat');
  SDL_MouseIsHaptic := GetProcAddress(aDLLHandle, 'SDL_MouseIsHaptic');
  SDL_NewAudioStream := GetProcAddress(aDLLHandle, 'SDL_NewAudioStream');
  SDL_NumHaptics := GetProcAddress(aDLLHandle, 'SDL_NumHaptics');
  SDL_NumJoysticks := GetProcAddress(aDLLHandle, 'SDL_NumJoysticks');
  SDL_NumSensors := GetProcAddress(aDLLHandle, 'SDL_NumSensors');
  SDL_OnApplicationDidBecomeActive := GetProcAddress(aDLLHandle, 'SDL_OnApplicationDidBecomeActive');
  SDL_OnApplicationDidEnterBackground := GetProcAddress(aDLLHandle, 'SDL_OnApplicationDidEnterBackground');
  SDL_OnApplicationDidReceiveMemoryWarning := GetProcAddress(aDLLHandle, 'SDL_OnApplicationDidReceiveMemoryWarning');
  SDL_OnApplicationWillEnterForeground := GetProcAddress(aDLLHandle, 'SDL_OnApplicationWillEnterForeground');
  SDL_OnApplicationWillResignActive := GetProcAddress(aDLLHandle, 'SDL_OnApplicationWillResignActive');
  SDL_OnApplicationWillTerminate := GetProcAddress(aDLLHandle, 'SDL_OnApplicationWillTerminate');
  SDL_OpenAudio := GetProcAddress(aDLLHandle, 'SDL_OpenAudio');
  SDL_OpenAudioDevice := GetProcAddress(aDLLHandle, 'SDL_OpenAudioDevice');
  SDL_OpenURL := GetProcAddress(aDLLHandle, 'SDL_OpenURL');
  SDL_PauseAudio := GetProcAddress(aDLLHandle, 'SDL_PauseAudio');
  SDL_PauseAudioDevice := GetProcAddress(aDLLHandle, 'SDL_PauseAudioDevice');
  SDL_PeepEvents := GetProcAddress(aDLLHandle, 'SDL_PeepEvents');
  SDL_PixelFormatEnumToMasks := GetProcAddress(aDLLHandle, 'SDL_PixelFormatEnumToMasks');
  SDL_PollEvent := GetProcAddress(aDLLHandle, 'SDL_PollEvent');
  SDL_pow := GetProcAddress(aDLLHandle, 'SDL_pow');
  SDL_powf := GetProcAddress(aDLLHandle, 'SDL_powf');
  SDL_PremultiplyAlpha := GetProcAddress(aDLLHandle, 'SDL_PremultiplyAlpha');
  SDL_PumpEvents := GetProcAddress(aDLLHandle, 'SDL_PumpEvents');
  SDL_PushEvent := GetProcAddress(aDLLHandle, 'SDL_PushEvent');
  SDL_qsort := GetProcAddress(aDLLHandle, 'SDL_qsort');
  SDL_QueryTexture := GetProcAddress(aDLLHandle, 'SDL_QueryTexture');
  SDL_QueueAudio := GetProcAddress(aDLLHandle, 'SDL_QueueAudio');
  SDL_Quit := GetProcAddress(aDLLHandle, 'SDL_Quit');
  SDL_QuitSubSystem := GetProcAddress(aDLLHandle, 'SDL_QuitSubSystem');
  SDL_RaiseWindow := GetProcAddress(aDLLHandle, 'SDL_RaiseWindow');
  SDL_ReadBE16 := GetProcAddress(aDLLHandle, 'SDL_ReadBE16');
  SDL_ReadBE32 := GetProcAddress(aDLLHandle, 'SDL_ReadBE32');
  SDL_ReadBE64 := GetProcAddress(aDLLHandle, 'SDL_ReadBE64');
  SDL_ReadLE16 := GetProcAddress(aDLLHandle, 'SDL_ReadLE16');
  SDL_ReadLE32 := GetProcAddress(aDLLHandle, 'SDL_ReadLE32');
  SDL_ReadLE64 := GetProcAddress(aDLLHandle, 'SDL_ReadLE64');
  SDL_ReadU8 := GetProcAddress(aDLLHandle, 'SDL_ReadU8');
  SDL_realloc := GetProcAddress(aDLLHandle, 'SDL_realloc');
  SDL_RecordGesture := GetProcAddress(aDLLHandle, 'SDL_RecordGesture');
  SDL_RegisterApp := GetProcAddress(aDLLHandle, 'SDL_RegisterApp');
  SDL_RegisterEvents := GetProcAddress(aDLLHandle, 'SDL_RegisterEvents');
  SDL_RemoveTimer := GetProcAddress(aDLLHandle, 'SDL_RemoveTimer');
  SDL_RenderClear := GetProcAddress(aDLLHandle, 'SDL_RenderClear');
  SDL_RenderCopy := GetProcAddress(aDLLHandle, 'SDL_RenderCopy');
  SDL_RenderCopyEx := GetProcAddress(aDLLHandle, 'SDL_RenderCopyEx');
  SDL_RenderCopyExF := GetProcAddress(aDLLHandle, 'SDL_RenderCopyExF');
  SDL_RenderCopyF := GetProcAddress(aDLLHandle, 'SDL_RenderCopyF');
  SDL_RenderDrawLine := GetProcAddress(aDLLHandle, 'SDL_RenderDrawLine');
  SDL_RenderDrawLineF := GetProcAddress(aDLLHandle, 'SDL_RenderDrawLineF');
  SDL_RenderDrawLines := GetProcAddress(aDLLHandle, 'SDL_RenderDrawLines');
  SDL_RenderDrawLinesF := GetProcAddress(aDLLHandle, 'SDL_RenderDrawLinesF');
  SDL_RenderDrawPoint := GetProcAddress(aDLLHandle, 'SDL_RenderDrawPoint');
  SDL_RenderDrawPointF := GetProcAddress(aDLLHandle, 'SDL_RenderDrawPointF');
  SDL_RenderDrawPoints := GetProcAddress(aDLLHandle, 'SDL_RenderDrawPoints');
  SDL_RenderDrawPointsF := GetProcAddress(aDLLHandle, 'SDL_RenderDrawPointsF');
  SDL_RenderDrawRect := GetProcAddress(aDLLHandle, 'SDL_RenderDrawRect');
  SDL_RenderDrawRectF := GetProcAddress(aDLLHandle, 'SDL_RenderDrawRectF');
  SDL_RenderDrawRects := GetProcAddress(aDLLHandle, 'SDL_RenderDrawRects');
  SDL_RenderDrawRectsF := GetProcAddress(aDLLHandle, 'SDL_RenderDrawRectsF');
  SDL_RenderFillRect := GetProcAddress(aDLLHandle, 'SDL_RenderFillRect');
  SDL_RenderFillRectF := GetProcAddress(aDLLHandle, 'SDL_RenderFillRectF');
  SDL_RenderFillRects := GetProcAddress(aDLLHandle, 'SDL_RenderFillRects');
  SDL_RenderFillRectsF := GetProcAddress(aDLLHandle, 'SDL_RenderFillRectsF');
  SDL_RenderFlush := GetProcAddress(aDLLHandle, 'SDL_RenderFlush');
  SDL_RenderGeometry := GetProcAddress(aDLLHandle, 'SDL_RenderGeometry');
  SDL_RenderGeometryRaw := GetProcAddress(aDLLHandle, 'SDL_RenderGeometryRaw');
  SDL_RenderGetClipRect := GetProcAddress(aDLLHandle, 'SDL_RenderGetClipRect');
  SDL_RenderGetD3D11Device := GetProcAddress(aDLLHandle, 'SDL_RenderGetD3D11Device');
  SDL_RenderGetD3D9Device := GetProcAddress(aDLLHandle, 'SDL_RenderGetD3D9Device');
  SDL_RenderGetIntegerScale := GetProcAddress(aDLLHandle, 'SDL_RenderGetIntegerScale');
  SDL_RenderGetLogicalSize := GetProcAddress(aDLLHandle, 'SDL_RenderGetLogicalSize');
  SDL_RenderGetMetalCommandEncoder := GetProcAddress(aDLLHandle, 'SDL_RenderGetMetalCommandEncoder');
  SDL_RenderGetMetalLayer := GetProcAddress(aDLLHandle, 'SDL_RenderGetMetalLayer');
  SDL_RenderGetScale := GetProcAddress(aDLLHandle, 'SDL_RenderGetScale');
  SDL_RenderGetViewport := GetProcAddress(aDLLHandle, 'SDL_RenderGetViewport');
  SDL_RenderGetWindow := GetProcAddress(aDLLHandle, 'SDL_RenderGetWindow');
  SDL_RenderIsClipEnabled := GetProcAddress(aDLLHandle, 'SDL_RenderIsClipEnabled');
  SDL_RenderLogicalToWindow := GetProcAddress(aDLLHandle, 'SDL_RenderLogicalToWindow');
  SDL_RenderPresent := GetProcAddress(aDLLHandle, 'SDL_RenderPresent');
  SDL_RenderReadPixels := GetProcAddress(aDLLHandle, 'SDL_RenderReadPixels');
  SDL_RenderSetClipRect := GetProcAddress(aDLLHandle, 'SDL_RenderSetClipRect');
  SDL_RenderSetIntegerScale := GetProcAddress(aDLLHandle, 'SDL_RenderSetIntegerScale');
  SDL_RenderSetLogicalSize := GetProcAddress(aDLLHandle, 'SDL_RenderSetLogicalSize');
  SDL_RenderSetScale := GetProcAddress(aDLLHandle, 'SDL_RenderSetScale');
  SDL_RenderSetViewport := GetProcAddress(aDLLHandle, 'SDL_RenderSetViewport');
  SDL_RenderSetVSync := GetProcAddress(aDLLHandle, 'SDL_RenderSetVSync');
  SDL_RenderTargetSupported := GetProcAddress(aDLLHandle, 'SDL_RenderTargetSupported');
  SDL_RenderWindowToLogical := GetProcAddress(aDLLHandle, 'SDL_RenderWindowToLogical');
  SDL_ReportAssertion := GetProcAddress(aDLLHandle, 'SDL_ReportAssertion');
  SDL_ResetAssertionReport := GetProcAddress(aDLLHandle, 'SDL_ResetAssertionReport');
  SDL_RestoreWindow := GetProcAddress(aDLLHandle, 'SDL_RestoreWindow');
  SDL_round := GetProcAddress(aDLLHandle, 'SDL_round');
  SDL_roundf := GetProcAddress(aDLLHandle, 'SDL_roundf');
  SDL_RWclose := GetProcAddress(aDLLHandle, 'SDL_RWclose');
  SDL_RWFromConstMem := GetProcAddress(aDLLHandle, 'SDL_RWFromConstMem');
  SDL_RWFromFile := GetProcAddress(aDLLHandle, 'SDL_RWFromFile');
  SDL_RWFromFP := GetProcAddress(aDLLHandle, 'SDL_RWFromFP');
  SDL_RWFromMem := GetProcAddress(aDLLHandle, 'SDL_RWFromMem');
  SDL_RWread := GetProcAddress(aDLLHandle, 'SDL_RWread');
  SDL_RWseek := GetProcAddress(aDLLHandle, 'SDL_RWseek');
  SDL_RWsize := GetProcAddress(aDLLHandle, 'SDL_RWsize');
  SDL_RWtell := GetProcAddress(aDLLHandle, 'SDL_RWtell');
  SDL_RWwrite := GetProcAddress(aDLLHandle, 'SDL_RWwrite');
  SDL_SaveAllDollarTemplates := GetProcAddress(aDLLHandle, 'SDL_SaveAllDollarTemplates');
  SDL_SaveBMP_RW := GetProcAddress(aDLLHandle, 'SDL_SaveBMP_RW');
  SDL_SaveDollarTemplate := GetProcAddress(aDLLHandle, 'SDL_SaveDollarTemplate');
  SDL_scalbn := GetProcAddress(aDLLHandle, 'SDL_scalbn');
  SDL_scalbnf := GetProcAddress(aDLLHandle, 'SDL_scalbnf');
  SDL_SemPost := GetProcAddress(aDLLHandle, 'SDL_SemPost');
  SDL_SemTryWait := GetProcAddress(aDLLHandle, 'SDL_SemTryWait');
  SDL_SemValue := GetProcAddress(aDLLHandle, 'SDL_SemValue');
  SDL_SemWait := GetProcAddress(aDLLHandle, 'SDL_SemWait');
  SDL_SemWaitTimeout := GetProcAddress(aDLLHandle, 'SDL_SemWaitTimeout');
  SDL_SensorClose := GetProcAddress(aDLLHandle, 'SDL_SensorClose');
  SDL_SensorFromInstanceID := GetProcAddress(aDLLHandle, 'SDL_SensorFromInstanceID');
  SDL_SensorGetData := GetProcAddress(aDLLHandle, 'SDL_SensorGetData');
  SDL_SensorGetDeviceInstanceID := GetProcAddress(aDLLHandle, 'SDL_SensorGetDeviceInstanceID');
  SDL_SensorGetDeviceName := GetProcAddress(aDLLHandle, 'SDL_SensorGetDeviceName');
  SDL_SensorGetDeviceNonPortableType := GetProcAddress(aDLLHandle, 'SDL_SensorGetDeviceNonPortableType');
  SDL_SensorGetDeviceType := GetProcAddress(aDLLHandle, 'SDL_SensorGetDeviceType');
  SDL_SensorGetInstanceID := GetProcAddress(aDLLHandle, 'SDL_SensorGetInstanceID');
  SDL_SensorGetName := GetProcAddress(aDLLHandle, 'SDL_SensorGetName');
  SDL_SensorGetNonPortableType := GetProcAddress(aDLLHandle, 'SDL_SensorGetNonPortableType');
  SDL_SensorGetType := GetProcAddress(aDLLHandle, 'SDL_SensorGetType');
  SDL_SensorOpen := GetProcAddress(aDLLHandle, 'SDL_SensorOpen');
  SDL_SensorUpdate := GetProcAddress(aDLLHandle, 'SDL_SensorUpdate');
  SDL_SetAssertionHandler := GetProcAddress(aDLLHandle, 'SDL_SetAssertionHandler');
  SDL_SetClipboardText := GetProcAddress(aDLLHandle, 'SDL_SetClipboardText');
  SDL_SetClipRect := GetProcAddress(aDLLHandle, 'SDL_SetClipRect');
  SDL_SetColorKey := GetProcAddress(aDLLHandle, 'SDL_SetColorKey');
  SDL_SetCursor := GetProcAddress(aDLLHandle, 'SDL_SetCursor');
  SDL_setenv := GetProcAddress(aDLLHandle, 'SDL_setenv');
  SDL_SetError := GetProcAddress(aDLLHandle, 'SDL_SetError');
  SDL_SetEventFilter := GetProcAddress(aDLLHandle, 'SDL_SetEventFilter');
  SDL_SetHint := GetProcAddress(aDLLHandle, 'SDL_SetHint');
  SDL_SetHintWithPriority := GetProcAddress(aDLLHandle, 'SDL_SetHintWithPriority');
  SDL_SetMainReady := GetProcAddress(aDLLHandle, 'SDL_SetMainReady');
  SDL_SetMemoryFunctions := GetProcAddress(aDLLHandle, 'SDL_SetMemoryFunctions');
  SDL_SetModState := GetProcAddress(aDLLHandle, 'SDL_SetModState');
  SDL_SetPaletteColors := GetProcAddress(aDLLHandle, 'SDL_SetPaletteColors');
  SDL_SetPixelFormatPalette := GetProcAddress(aDLLHandle, 'SDL_SetPixelFormatPalette');
  SDL_SetRelativeMouseMode := GetProcAddress(aDLLHandle, 'SDL_SetRelativeMouseMode');
  SDL_SetRenderDrawBlendMode := GetProcAddress(aDLLHandle, 'SDL_SetRenderDrawBlendMode');
  SDL_SetRenderDrawColor := GetProcAddress(aDLLHandle, 'SDL_SetRenderDrawColor');
  SDL_SetRenderTarget := GetProcAddress(aDLLHandle, 'SDL_SetRenderTarget');
  SDL_SetSurfaceAlphaMod := GetProcAddress(aDLLHandle, 'SDL_SetSurfaceAlphaMod');
  SDL_SetSurfaceBlendMode := GetProcAddress(aDLLHandle, 'SDL_SetSurfaceBlendMode');
  SDL_SetSurfaceColorMod := GetProcAddress(aDLLHandle, 'SDL_SetSurfaceColorMod');
  SDL_SetSurfacePalette := GetProcAddress(aDLLHandle, 'SDL_SetSurfacePalette');
  SDL_SetSurfaceRLE := GetProcAddress(aDLLHandle, 'SDL_SetSurfaceRLE');
  SDL_SetTextInputRect := GetProcAddress(aDLLHandle, 'SDL_SetTextInputRect');
  SDL_SetTextureAlphaMod := GetProcAddress(aDLLHandle, 'SDL_SetTextureAlphaMod');
  SDL_SetTextureBlendMode := GetProcAddress(aDLLHandle, 'SDL_SetTextureBlendMode');
  SDL_SetTextureColorMod := GetProcAddress(aDLLHandle, 'SDL_SetTextureColorMod');
  SDL_SetTextureScaleMode := GetProcAddress(aDLLHandle, 'SDL_SetTextureScaleMode');
  SDL_SetTextureUserData := GetProcAddress(aDLLHandle, 'SDL_SetTextureUserData');
  SDL_SetThreadPriority := GetProcAddress(aDLLHandle, 'SDL_SetThreadPriority');
  SDL_SetWindowAlwaysOnTop := GetProcAddress(aDLLHandle, 'SDL_SetWindowAlwaysOnTop');
  SDL_SetWindowBordered := GetProcAddress(aDLLHandle, 'SDL_SetWindowBordered');
  SDL_SetWindowBrightness := GetProcAddress(aDLLHandle, 'SDL_SetWindowBrightness');
  SDL_SetWindowData := GetProcAddress(aDLLHandle, 'SDL_SetWindowData');
  SDL_SetWindowDisplayMode := GetProcAddress(aDLLHandle, 'SDL_SetWindowDisplayMode');
  SDL_SetWindowFullscreen := GetProcAddress(aDLLHandle, 'SDL_SetWindowFullscreen');
  SDL_SetWindowGammaRamp := GetProcAddress(aDLLHandle, 'SDL_SetWindowGammaRamp');
  SDL_SetWindowGrab := GetProcAddress(aDLLHandle, 'SDL_SetWindowGrab');
  SDL_SetWindowHitTest := GetProcAddress(aDLLHandle, 'SDL_SetWindowHitTest');
  SDL_SetWindowIcon := GetProcAddress(aDLLHandle, 'SDL_SetWindowIcon');
  SDL_SetWindowInputFocus := GetProcAddress(aDLLHandle, 'SDL_SetWindowInputFocus');
  SDL_SetWindowKeyboardGrab := GetProcAddress(aDLLHandle, 'SDL_SetWindowKeyboardGrab');
  SDL_SetWindowMaximumSize := GetProcAddress(aDLLHandle, 'SDL_SetWindowMaximumSize');
  SDL_SetWindowMinimumSize := GetProcAddress(aDLLHandle, 'SDL_SetWindowMinimumSize');
  SDL_SetWindowModalFor := GetProcAddress(aDLLHandle, 'SDL_SetWindowModalFor');
  SDL_SetWindowMouseGrab := GetProcAddress(aDLLHandle, 'SDL_SetWindowMouseGrab');
  SDL_SetWindowMouseRect := GetProcAddress(aDLLHandle, 'SDL_SetWindowMouseRect');
  SDL_SetWindowOpacity := GetProcAddress(aDLLHandle, 'SDL_SetWindowOpacity');
  SDL_SetWindowPosition := GetProcAddress(aDLLHandle, 'SDL_SetWindowPosition');
  SDL_SetWindowResizable := GetProcAddress(aDLLHandle, 'SDL_SetWindowResizable');
  SDL_SetWindowShape := GetProcAddress(aDLLHandle, 'SDL_SetWindowShape');
  SDL_SetWindowSize := GetProcAddress(aDLLHandle, 'SDL_SetWindowSize');
  SDL_SetWindowsMessageHook := GetProcAddress(aDLLHandle, 'SDL_SetWindowsMessageHook');
  SDL_SetWindowTitle := GetProcAddress(aDLLHandle, 'SDL_SetWindowTitle');
  SDL_SetYUVConversionMode := GetProcAddress(aDLLHandle, 'SDL_SetYUVConversionMode');
  SDL_ShowCursor := GetProcAddress(aDLLHandle, 'SDL_ShowCursor');
  SDL_ShowMessageBox := GetProcAddress(aDLLHandle, 'SDL_ShowMessageBox');
  SDL_ShowSimpleMessageBox := GetProcAddress(aDLLHandle, 'SDL_ShowSimpleMessageBox');
  SDL_ShowWindow := GetProcAddress(aDLLHandle, 'SDL_ShowWindow');
  SDL_SIMDAlloc := GetProcAddress(aDLLHandle, 'SDL_SIMDAlloc');
  SDL_SIMDFree := GetProcAddress(aDLLHandle, 'SDL_SIMDFree');
  SDL_SIMDGetAlignment := GetProcAddress(aDLLHandle, 'SDL_SIMDGetAlignment');
  SDL_SIMDRealloc := GetProcAddress(aDLLHandle, 'SDL_SIMDRealloc');
  SDL_sin := GetProcAddress(aDLLHandle, 'SDL_sin');
  SDL_sinf := GetProcAddress(aDLLHandle, 'SDL_sinf');
  SDL_snprintf := GetProcAddress(aDLLHandle, 'SDL_snprintf');
  SDL_SoftStretch := GetProcAddress(aDLLHandle, 'SDL_SoftStretch');
  SDL_SoftStretchLinear := GetProcAddress(aDLLHandle, 'SDL_SoftStretchLinear');
  SDL_sqrt := GetProcAddress(aDLLHandle, 'SDL_sqrt');
  SDL_sqrtf := GetProcAddress(aDLLHandle, 'SDL_sqrtf');
  SDL_sscanf := GetProcAddress(aDLLHandle, 'SDL_sscanf');
  SDL_StartTextInput := GetProcAddress(aDLLHandle, 'SDL_StartTextInput');
  SDL_StopTextInput := GetProcAddress(aDLLHandle, 'SDL_StopTextInput');
  SDL_strcasecmp := GetProcAddress(aDLLHandle, 'SDL_strcasecmp');
  SDL_strchr := GetProcAddress(aDLLHandle, 'SDL_strchr');
  SDL_strcmp := GetProcAddress(aDLLHandle, 'SDL_strcmp');
  SDL_strdup := GetProcAddress(aDLLHandle, 'SDL_strdup');
  SDL_strlcat := GetProcAddress(aDLLHandle, 'SDL_strlcat');
  SDL_strlcpy := GetProcAddress(aDLLHandle, 'SDL_strlcpy');
  SDL_strlen := GetProcAddress(aDLLHandle, 'SDL_strlen');
  SDL_strlwr := GetProcAddress(aDLLHandle, 'SDL_strlwr');
  SDL_strncasecmp := GetProcAddress(aDLLHandle, 'SDL_strncasecmp');
  SDL_strncmp := GetProcAddress(aDLLHandle, 'SDL_strncmp');
  SDL_strrchr := GetProcAddress(aDLLHandle, 'SDL_strrchr');
  SDL_strrev := GetProcAddress(aDLLHandle, 'SDL_strrev');
  SDL_strstr := GetProcAddress(aDLLHandle, 'SDL_strstr');
  SDL_strtod := GetProcAddress(aDLLHandle, 'SDL_strtod');
  SDL_strtokr := GetProcAddress(aDLLHandle, 'SDL_strtokr');
  SDL_strtol := GetProcAddress(aDLLHandle, 'SDL_strtol');
  SDL_strtoll := GetProcAddress(aDLLHandle, 'SDL_strtoll');
  SDL_strtoul := GetProcAddress(aDLLHandle, 'SDL_strtoul');
  SDL_strtoull := GetProcAddress(aDLLHandle, 'SDL_strtoull');
  SDL_strupr := GetProcAddress(aDLLHandle, 'SDL_strupr');
  SDL_tan := GetProcAddress(aDLLHandle, 'SDL_tan');
  SDL_tanf := GetProcAddress(aDLLHandle, 'SDL_tanf');
  SDL_ThreadID := GetProcAddress(aDLLHandle, 'SDL_ThreadID');
  SDL_TLSCleanup := GetProcAddress(aDLLHandle, 'SDL_TLSCleanup');
  SDL_TLSCreate := GetProcAddress(aDLLHandle, 'SDL_TLSCreate');
  SDL_TLSGet := GetProcAddress(aDLLHandle, 'SDL_TLSGet');
  SDL_TLSSet := GetProcAddress(aDLLHandle, 'SDL_TLSSet');
  SDL_tolower := GetProcAddress(aDLLHandle, 'SDL_tolower');
  SDL_toupper := GetProcAddress(aDLLHandle, 'SDL_toupper');
  SDL_trunc := GetProcAddress(aDLLHandle, 'SDL_trunc');
  SDL_truncf := GetProcAddress(aDLLHandle, 'SDL_truncf');
  SDL_TryLockMutex := GetProcAddress(aDLLHandle, 'SDL_TryLockMutex');
  SDL_uitoa := GetProcAddress(aDLLHandle, 'SDL_uitoa');
  SDL_ulltoa := GetProcAddress(aDLLHandle, 'SDL_ulltoa');
  SDL_ultoa := GetProcAddress(aDLLHandle, 'SDL_ultoa');
  SDL_UnionFRect := GetProcAddress(aDLLHandle, 'SDL_UnionFRect');
  SDL_UnionRect := GetProcAddress(aDLLHandle, 'SDL_UnionRect');
  SDL_UnloadObject := GetProcAddress(aDLLHandle, 'SDL_UnloadObject');
  SDL_UnlockAudio := GetProcAddress(aDLLHandle, 'SDL_UnlockAudio');
  SDL_UnlockAudioDevice := GetProcAddress(aDLLHandle, 'SDL_UnlockAudioDevice');
  SDL_UnlockJoysticks := GetProcAddress(aDLLHandle, 'SDL_UnlockJoysticks');
  SDL_UnlockMutex := GetProcAddress(aDLLHandle, 'SDL_UnlockMutex');
  SDL_UnlockSensors := GetProcAddress(aDLLHandle, 'SDL_UnlockSensors');
  SDL_UnlockSurface := GetProcAddress(aDLLHandle, 'SDL_UnlockSurface');
  SDL_UnlockTexture := GetProcAddress(aDLLHandle, 'SDL_UnlockTexture');
  SDL_UnregisterApp := GetProcAddress(aDLLHandle, 'SDL_UnregisterApp');
  SDL_UpdateNVTexture := GetProcAddress(aDLLHandle, 'SDL_UpdateNVTexture');
  SDL_UpdateTexture := GetProcAddress(aDLLHandle, 'SDL_UpdateTexture');
  SDL_UpdateWindowSurface := GetProcAddress(aDLLHandle, 'SDL_UpdateWindowSurface');
  SDL_UpdateWindowSurfaceRects := GetProcAddress(aDLLHandle, 'SDL_UpdateWindowSurfaceRects');
  SDL_UpdateYUVTexture := GetProcAddress(aDLLHandle, 'SDL_UpdateYUVTexture');
  SDL_UpperBlit := GetProcAddress(aDLLHandle, 'SDL_UpperBlit');
  SDL_UpperBlitScaled := GetProcAddress(aDLLHandle, 'SDL_UpperBlitScaled');
  SDL_utf8strlcpy := GetProcAddress(aDLLHandle, 'SDL_utf8strlcpy');
  SDL_utf8strlen := GetProcAddress(aDLLHandle, 'SDL_utf8strlen');
  SDL_vasprintf := GetProcAddress(aDLLHandle, 'SDL_vasprintf');
  SDL_VideoInit := GetProcAddress(aDLLHandle, 'SDL_VideoInit');
  SDL_VideoQuit := GetProcAddress(aDLLHandle, 'SDL_VideoQuit');
  SDL_vsnprintf := GetProcAddress(aDLLHandle, 'SDL_vsnprintf');
  SDL_vsscanf := GetProcAddress(aDLLHandle, 'SDL_vsscanf');
  SDL_WaitEvent := GetProcAddress(aDLLHandle, 'SDL_WaitEvent');
  SDL_WaitEventTimeout := GetProcAddress(aDLLHandle, 'SDL_WaitEventTimeout');
  SDL_WaitThread := GetProcAddress(aDLLHandle, 'SDL_WaitThread');
  SDL_WarpMouseGlobal := GetProcAddress(aDLLHandle, 'SDL_WarpMouseGlobal');
  SDL_WarpMouseInWindow := GetProcAddress(aDLLHandle, 'SDL_WarpMouseInWindow');
  SDL_WasInit := GetProcAddress(aDLLHandle, 'SDL_WasInit');
  SDL_wcscasecmp := GetProcAddress(aDLLHandle, 'SDL_wcscasecmp');
  SDL_wcscmp := GetProcAddress(aDLLHandle, 'SDL_wcscmp');
  SDL_wcsdup := GetProcAddress(aDLLHandle, 'SDL_wcsdup');
  SDL_wcslcat := GetProcAddress(aDLLHandle, 'SDL_wcslcat');
  SDL_wcslcpy := GetProcAddress(aDLLHandle, 'SDL_wcslcpy');
  SDL_wcslen := GetProcAddress(aDLLHandle, 'SDL_wcslen');
  SDL_wcsncasecmp := GetProcAddress(aDLLHandle, 'SDL_wcsncasecmp');
  SDL_wcsncmp := GetProcAddress(aDLLHandle, 'SDL_wcsncmp');
  SDL_wcsstr := GetProcAddress(aDLLHandle, 'SDL_wcsstr');
  SDL_WriteBE16 := GetProcAddress(aDLLHandle, 'SDL_WriteBE16');
  SDL_WriteBE32 := GetProcAddress(aDLLHandle, 'SDL_WriteBE32');
  SDL_WriteBE64 := GetProcAddress(aDLLHandle, 'SDL_WriteBE64');
  SDL_WriteLE16 := GetProcAddress(aDLLHandle, 'SDL_WriteLE16');
  SDL_WriteLE32 := GetProcAddress(aDLLHandle, 'SDL_WriteLE32');
  SDL_WriteLE64 := GetProcAddress(aDLLHandle, 'SDL_WriteLE64');
  SDL_WriteU8 := GetProcAddress(aDLLHandle, 'SDL_WriteU8');
  SDLNet_AddSocket := GetProcAddress(aDLLHandle, 'SDLNet_AddSocket');
  SDLNet_AllocPacket := GetProcAddress(aDLLHandle, 'SDLNet_AllocPacket');
  SDLNet_AllocPacketV := GetProcAddress(aDLLHandle, 'SDLNet_AllocPacketV');
  SDLNet_AllocSocketSet := GetProcAddress(aDLLHandle, 'SDLNet_AllocSocketSet');
  SDLNet_CheckSockets := GetProcAddress(aDLLHandle, 'SDLNet_CheckSockets');
  SDLNet_DelSocket := GetProcAddress(aDLLHandle, 'SDLNet_DelSocket');
  SDLNet_FreePacket := GetProcAddress(aDLLHandle, 'SDLNet_FreePacket');
  SDLNet_FreePacketV := GetProcAddress(aDLLHandle, 'SDLNet_FreePacketV');
  SDLNet_FreeSocketSet := GetProcAddress(aDLLHandle, 'SDLNet_FreeSocketSet');
  SDLNet_GetError := GetProcAddress(aDLLHandle, 'SDLNet_GetError');
  SDLNet_GetLocalAddresses := GetProcAddress(aDLLHandle, 'SDLNet_GetLocalAddresses');
  SDLNet_Init := GetProcAddress(aDLLHandle, 'SDLNet_Init');
  SDLNet_Linked_Version := GetProcAddress(aDLLHandle, 'SDLNet_Linked_Version');
  SDLNet_Quit := GetProcAddress(aDLLHandle, 'SDLNet_Quit');
  SDLNet_ResizePacket := GetProcAddress(aDLLHandle, 'SDLNet_ResizePacket');
  SDLNet_ResolveHost := GetProcAddress(aDLLHandle, 'SDLNet_ResolveHost');
  SDLNet_ResolveIP := GetProcAddress(aDLLHandle, 'SDLNet_ResolveIP');
  SDLNet_SetError := GetProcAddress(aDLLHandle, 'SDLNet_SetError');
  SDLNet_TCP_Accept := GetProcAddress(aDLLHandle, 'SDLNet_TCP_Accept');
  SDLNet_TCP_Close := GetProcAddress(aDLLHandle, 'SDLNet_TCP_Close');
  SDLNet_TCP_GetPeerAddress := GetProcAddress(aDLLHandle, 'SDLNet_TCP_GetPeerAddress');
  SDLNet_TCP_Open := GetProcAddress(aDLLHandle, 'SDLNet_TCP_Open');
  SDLNet_TCP_Recv := GetProcAddress(aDLLHandle, 'SDLNet_TCP_Recv');
  SDLNet_TCP_Send := GetProcAddress(aDLLHandle, 'SDLNet_TCP_Send');
  SDLNet_UDP_Bind := GetProcAddress(aDLLHandle, 'SDLNet_UDP_Bind');
  SDLNet_UDP_Close := GetProcAddress(aDLLHandle, 'SDLNet_UDP_Close');
  SDLNet_UDP_GetPeerAddress := GetProcAddress(aDLLHandle, 'SDLNet_UDP_GetPeerAddress');
  SDLNet_UDP_Open := GetProcAddress(aDLLHandle, 'SDLNet_UDP_Open');
  SDLNet_UDP_Recv := GetProcAddress(aDLLHandle, 'SDLNet_UDP_Recv');
  SDLNet_UDP_RecvV := GetProcAddress(aDLLHandle, 'SDLNet_UDP_RecvV');
  SDLNet_UDP_Send := GetProcAddress(aDLLHandle, 'SDLNet_UDP_Send');
  SDLNet_UDP_SendV := GetProcAddress(aDLLHandle, 'SDLNet_UDP_SendV');
  SDLNet_UDP_SetPacketLoss := GetProcAddress(aDLLHandle, 'SDLNet_UDP_SetPacketLoss');
  SDLNet_UDP_Unbind := GetProcAddress(aDLLHandle, 'SDLNet_UDP_Unbind');
  TTF_ByteSwappedUNICODE := GetProcAddress(aDLLHandle, 'TTF_ByteSwappedUNICODE');
  TTF_CloseFont := GetProcAddress(aDLLHandle, 'TTF_CloseFont');
  TTF_FontAscent := GetProcAddress(aDLLHandle, 'TTF_FontAscent');
  TTF_FontDescent := GetProcAddress(aDLLHandle, 'TTF_FontDescent');
  TTF_FontFaceFamilyName := GetProcAddress(aDLLHandle, 'TTF_FontFaceFamilyName');
  TTF_FontFaceIsFixedWidth := GetProcAddress(aDLLHandle, 'TTF_FontFaceIsFixedWidth');
  TTF_FontFaces := GetProcAddress(aDLLHandle, 'TTF_FontFaces');
  TTF_FontFaceStyleName := GetProcAddress(aDLLHandle, 'TTF_FontFaceStyleName');
  TTF_FontHeight := GetProcAddress(aDLLHandle, 'TTF_FontHeight');
  TTF_FontLineSkip := GetProcAddress(aDLLHandle, 'TTF_FontLineSkip');
  TTF_GetFontHinting := GetProcAddress(aDLLHandle, 'TTF_GetFontHinting');
  TTF_GetFontKerning := GetProcAddress(aDLLHandle, 'TTF_GetFontKerning');
  TTF_GetFontKerningSize := GetProcAddress(aDLLHandle, 'TTF_GetFontKerningSize');
  TTF_GetFontKerningSizeGlyphs := GetProcAddress(aDLLHandle, 'TTF_GetFontKerningSizeGlyphs');
  TTF_GetFontKerningSizeGlyphs32 := GetProcAddress(aDLLHandle, 'TTF_GetFontKerningSizeGlyphs32');
  TTF_GetFontOutline := GetProcAddress(aDLLHandle, 'TTF_GetFontOutline');
  TTF_GetFontSDF := GetProcAddress(aDLLHandle, 'TTF_GetFontSDF');
  TTF_GetFontStyle := GetProcAddress(aDLLHandle, 'TTF_GetFontStyle');
  TTF_GetFontWrappedAlign := GetProcAddress(aDLLHandle, 'TTF_GetFontWrappedAlign');
  TTF_GetFreeTypeVersion := GetProcAddress(aDLLHandle, 'TTF_GetFreeTypeVersion');
  TTF_GetHarfBuzzVersion := GetProcAddress(aDLLHandle, 'TTF_GetHarfBuzzVersion');
  TTF_GlyphIsProvided := GetProcAddress(aDLLHandle, 'TTF_GlyphIsProvided');
  TTF_GlyphIsProvided32 := GetProcAddress(aDLLHandle, 'TTF_GlyphIsProvided32');
  TTF_GlyphMetrics := GetProcAddress(aDLLHandle, 'TTF_GlyphMetrics');
  TTF_GlyphMetrics32 := GetProcAddress(aDLLHandle, 'TTF_GlyphMetrics32');
  TTF_Init := GetProcAddress(aDLLHandle, 'TTF_Init');
  TTF_Linked_Version := GetProcAddress(aDLLHandle, 'TTF_Linked_Version');
  TTF_MeasureText := GetProcAddress(aDLLHandle, 'TTF_MeasureText');
  TTF_MeasureUNICODE := GetProcAddress(aDLLHandle, 'TTF_MeasureUNICODE');
  TTF_MeasureUTF8 := GetProcAddress(aDLLHandle, 'TTF_MeasureUTF8');
  TTF_OpenFont := GetProcAddress(aDLLHandle, 'TTF_OpenFont');
  TTF_OpenFontDPI := GetProcAddress(aDLLHandle, 'TTF_OpenFontDPI');
  TTF_OpenFontDPIRW := GetProcAddress(aDLLHandle, 'TTF_OpenFontDPIRW');
  TTF_OpenFontIndex := GetProcAddress(aDLLHandle, 'TTF_OpenFontIndex');
  TTF_OpenFontIndexDPI := GetProcAddress(aDLLHandle, 'TTF_OpenFontIndexDPI');
  TTF_OpenFontIndexDPIRW := GetProcAddress(aDLLHandle, 'TTF_OpenFontIndexDPIRW');
  TTF_OpenFontIndexRW := GetProcAddress(aDLLHandle, 'TTF_OpenFontIndexRW');
  TTF_OpenFontRW := GetProcAddress(aDLLHandle, 'TTF_OpenFontRW');
  TTF_Quit := GetProcAddress(aDLLHandle, 'TTF_Quit');
  TTF_RenderGlyph_Blended := GetProcAddress(aDLLHandle, 'TTF_RenderGlyph_Blended');
  TTF_RenderGlyph_LCD := GetProcAddress(aDLLHandle, 'TTF_RenderGlyph_LCD');
  TTF_RenderGlyph_Shaded := GetProcAddress(aDLLHandle, 'TTF_RenderGlyph_Shaded');
  TTF_RenderGlyph_Solid := GetProcAddress(aDLLHandle, 'TTF_RenderGlyph_Solid');
  TTF_RenderGlyph32_Blended := GetProcAddress(aDLLHandle, 'TTF_RenderGlyph32_Blended');
  TTF_RenderGlyph32_LCD := GetProcAddress(aDLLHandle, 'TTF_RenderGlyph32_LCD');
  TTF_RenderGlyph32_Shaded := GetProcAddress(aDLLHandle, 'TTF_RenderGlyph32_Shaded');
  TTF_RenderGlyph32_Solid := GetProcAddress(aDLLHandle, 'TTF_RenderGlyph32_Solid');
  TTF_RenderText_Blended := GetProcAddress(aDLLHandle, 'TTF_RenderText_Blended');
  TTF_RenderText_Blended_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderText_Blended_Wrapped');
  TTF_RenderText_LCD := GetProcAddress(aDLLHandle, 'TTF_RenderText_LCD');
  TTF_RenderText_LCD_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderText_LCD_Wrapped');
  TTF_RenderText_Shaded := GetProcAddress(aDLLHandle, 'TTF_RenderText_Shaded');
  TTF_RenderText_Shaded_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderText_Shaded_Wrapped');
  TTF_RenderText_Solid := GetProcAddress(aDLLHandle, 'TTF_RenderText_Solid');
  TTF_RenderText_Solid_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderText_Solid_Wrapped');
  TTF_RenderUNICODE_Blended := GetProcAddress(aDLLHandle, 'TTF_RenderUNICODE_Blended');
  TTF_RenderUNICODE_Blended_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderUNICODE_Blended_Wrapped');
  TTF_RenderUNICODE_LCD := GetProcAddress(aDLLHandle, 'TTF_RenderUNICODE_LCD');
  TTF_RenderUNICODE_LCD_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderUNICODE_LCD_Wrapped');
  TTF_RenderUNICODE_Shaded := GetProcAddress(aDLLHandle, 'TTF_RenderUNICODE_Shaded');
  TTF_RenderUNICODE_Shaded_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderUNICODE_Shaded_Wrapped');
  TTF_RenderUNICODE_Solid := GetProcAddress(aDLLHandle, 'TTF_RenderUNICODE_Solid');
  TTF_RenderUNICODE_Solid_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderUNICODE_Solid_Wrapped');
  TTF_RenderUTF8_Blended := GetProcAddress(aDLLHandle, 'TTF_RenderUTF8_Blended');
  TTF_RenderUTF8_Blended_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderUTF8_Blended_Wrapped');
  TTF_RenderUTF8_LCD := GetProcAddress(aDLLHandle, 'TTF_RenderUTF8_LCD');
  TTF_RenderUTF8_LCD_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderUTF8_LCD_Wrapped');
  TTF_RenderUTF8_Shaded := GetProcAddress(aDLLHandle, 'TTF_RenderUTF8_Shaded');
  TTF_RenderUTF8_Shaded_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderUTF8_Shaded_Wrapped');
  TTF_RenderUTF8_Solid := GetProcAddress(aDLLHandle, 'TTF_RenderUTF8_Solid');
  TTF_RenderUTF8_Solid_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderUTF8_Solid_Wrapped');
  TTF_SetDirection := GetProcAddress(aDLLHandle, 'TTF_SetDirection');
  TTF_SetFontDirection := GetProcAddress(aDLLHandle, 'TTF_SetFontDirection');
  TTF_SetFontHinting := GetProcAddress(aDLLHandle, 'TTF_SetFontHinting');
  TTF_SetFontKerning := GetProcAddress(aDLLHandle, 'TTF_SetFontKerning');
  TTF_SetFontOutline := GetProcAddress(aDLLHandle, 'TTF_SetFontOutline');
  TTF_SetFontScriptName := GetProcAddress(aDLLHandle, 'TTF_SetFontScriptName');
  TTF_SetFontSDF := GetProcAddress(aDLLHandle, 'TTF_SetFontSDF');
  TTF_SetFontSize := GetProcAddress(aDLLHandle, 'TTF_SetFontSize');
  TTF_SetFontSizeDPI := GetProcAddress(aDLLHandle, 'TTF_SetFontSizeDPI');
  TTF_SetFontStyle := GetProcAddress(aDLLHandle, 'TTF_SetFontStyle');
  TTF_SetFontWrappedAlign := GetProcAddress(aDLLHandle, 'TTF_SetFontWrappedAlign');
  TTF_SetScript := GetProcAddress(aDLLHandle, 'TTF_SetScript');
  TTF_SizeText := GetProcAddress(aDLLHandle, 'TTF_SizeText');
  TTF_SizeUNICODE := GetProcAddress(aDLLHandle, 'TTF_SizeUNICODE');
  TTF_SizeUTF8 := GetProcAddress(aDLLHandle, 'TTF_SizeUTF8');
  TTF_WasInit := GetProcAddress(aDLLHandle, 'TTF_WasInit');
{$ENDREGION}
end;

// ==========================================================================
const
  cDllResName  = '1f23f1f8af74435dab2bda628c6f4c97';
  
var
  uDllHandle: THandle = 0;
  uDllFilename: string = '';

procedure AbortDLL;
begin
  Halt;
end;

procedure LoadDLL;
var
  LResStream: TResourceStream;
  LPath: string;
begin
  if uDllHandle <> 0 then Exit;
  if not Boolean((FindResource(HInstance, PChar(cDllResName), RT_RCDATA) <> 0)) then AbortDLL;
  LResStream := TResourceStream.Create(HInstance, cDLLResName, RT_RCDATA);
  try
    LPath := TPath.Combine(TPath.GetTempPath, TPath.GetGUIDFileName.ToLower + '.tmp');
    LResStream.Position := 0;
    LResStream.SaveToFile(LPath);
    if not TFile.Exists(LPath) then AbortDLL;
    uDllFilename := LPath;
    uDllHandle := SafeLoadLibrary(uDllFilename);
    if uDllHandle = 0 then AbortDLL;
    GetExports(uDllHandle);
  finally
    LResStream.Free;
  end;
end;

procedure UnloadDLL;
begin
  if uDllHandle = 0 then Exit;
  FreeLibrary(uDllHandle);
  uDllHandle := 0;
  if not TFile.Exists(uDllFilename) then Exit;
  TFile.Delete(uDllFilename);
  if not TFile.Exists(uDllFilename) then
    uDllFilename := '';
end;

initialization
  ReportMemoryLeaksOnShutdown := True;
  LoadDLL;

finalization
  UnloadDLL;

end.
